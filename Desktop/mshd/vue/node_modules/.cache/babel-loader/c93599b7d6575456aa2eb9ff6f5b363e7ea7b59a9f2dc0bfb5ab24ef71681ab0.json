{"ast":null,"code":"import request from \"@/utils/request\";\nimport * as echarts from \"echarts\";\nimport \"echarts/map/js/china\";\nexport default {\n  name: \"IndexView\",\n  data() {\n    return {\n      activeName: \"\",\n      notices: [],\n      user: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {},\n      disasterData: [] // 用于存储后端返回的数据\n    };\n  },\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    // 获取后端数据\n    fetchData() {\n      request.get(\"/all\").then(res => {\n        if (res.code === \"0\") {\n          this.disasterData = res.data;\n          this.initCharts();\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    // 初始化所有图表\n    initCharts() {\n      this.initPieChart();\n      this.initMapChart();\n    },\n    // 初始化饼图\n    initPieChart() {\n      const pieChart = echarts.init(document.getElementById(\"pieChart\"));\n      // 根据灾情大类分类统计数据\n      const categoryData = {};\n      this.disasterData.forEach(item => {\n        const category = item.disasterMajorCategory || \"其他\";\n        categoryData[category] = (categoryData[category] || 0) + 1;\n      });\n      const chartData = Object.entries(categoryData).map(([name, value]) => ({\n        name,\n        value\n      }));\n      pieChart.setOption({\n        title: {\n          text: \"不同灾情大类信息占比\",\n          left: \"center\",\n          textStyle: {\n            color: \"#003366\",\n            fontSize: 16\n          }\n        },\n        tooltip: {\n          trigger: \"item\"\n        },\n        legend: {\n          bottom: \"3%\",\n          left: \"center\",\n          textStyle: {\n            color: \"#003366\",\n            fontSize: 10\n          }\n        },\n        series: [{\n          name: \"灾情类型\",\n          type: \"pie\",\n          radius: [\"30%\", \"50%\"],\n          label: {\n            formatter: \"{b}\\n{d}%\",\n            color: \"#003366\",\n            fontSize: 8\n          },\n          data: chartData\n        }]\n      });\n    },\n    // 初始化地图\n    initMapChart() {\n      const mapChart = echarts.init(document.getElementById(\"mapChart\"));\n\n      // 根据省份统计灾情数量\n      const provinceData = {};\n      this.disasterData.forEach(item => {\n        const province = item.province || \"未知\";\n        provinceData[province] = (provinceData[province] || 0) + 1;\n      });\n      const chartData = Object.entries(provinceData).map(([name, value]) => ({\n        name,\n        value\n      }));\n      mapChart.setOption({\n        title: {\n          text: \"各省灾情分布情况\",\n          left: \"center\",\n          textStyle: {\n            color: \"#003366\",\n            fontSize: 16\n          }\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{b}<br/>灾情数量: {c}\"\n        },\n        visualMap: {\n          min: 0,\n          max: Math.max(...chartData.map(d => d.value)),\n          left: \"left\",\n          textStyle: {\n            color: \"#003366\"\n          },\n          inRange: {\n            color: [\"#d7f0fa\", \"#005bb5\"]\n          }\n        },\n        geo: {\n          map: \"china\",\n          label: {\n            emphasis: {\n              show: false\n            }\n          },\n          itemStyle: {\n            normal: {\n              areaColor: \"#f9f9f9\",\n              borderColor: \"#ccc\"\n            },\n            emphasis: {\n              areaColor: \"#d1ecff\"\n            }\n          }\n        },\n        series: [{\n          name: \"灾情数量\",\n          type: \"map\",\n          map: \"china\",\n          data: chartData\n        }]\n      });\n    }\n  }\n};","map":{"version":3,"names":["request","echarts","name","data","activeName","notices","user","localStorage","getItem","JSON","parse","disasterData","mounted","fetchData","methods","get","then","res","code","initCharts","$message","error","msg","initPieChart","initMapChart","pieChart","init","document","getElementById","categoryData","forEach","item","category","disasterMajorCategory","chartData","Object","entries","map","value","setOption","title","text","left","textStyle","color","fontSize","tooltip","trigger","legend","bottom","series","type","radius","label","formatter","mapChart","provinceData","province","visualMap","min","max","Math","d","inRange","geo","emphasis","show","itemStyle","normal","areaColor","borderColor"],"sources":["src/views/manager/Index.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"main-body-header\">欢迎进入多源灾情数据管理服务系统</div>\n    <div class=\"main-body-content\">\n      <div style=\"margin-bottom: 100px; width: 100%\">\n        <el-collapse v-model=\"activeName\" accordion>\n          <el-collapse-item v-for=\"item in notices\" :key=\"item.id\" :title=\"item.name\" :name=\"item.id\">\n            <div style=\"padding: 0 20px\">{{ item.content }}</div>\n          </el-collapse-item>\n        </el-collapse>\n      </div>\n      <div>\n        <el-row :gutter=\"20\">\n          <el-col :span=\"12\">\n            <div id=\"pieChart\" style=\"height: 400px\"></div>\n          </el-col>\n          <el-col :span=\"12\">\n            <div id=\"mapChart\" style=\"height: 400px\"></div>\n          </el-col>\n        </el-row>\n        <!-- 其余图表保持原样 -->\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport request from \"@/utils/request\";\nimport * as echarts from \"echarts\";\nimport \"echarts/map/js/china\";\n\nexport default {\n  name: \"IndexView\",\n  data() {\n    return {\n      activeName: \"\",\n      notices: [],\n      user: localStorage.getItem(\"user\")\n        ? JSON.parse(localStorage.getItem(\"user\"))\n        : {},\n      disasterData: [], // 用于存储后端返回的数据\n    };\n  },\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    // 获取后端数据\n    fetchData() {\n      request.get(\"/all\").then((res) => {\n        if (res.code === \"0\") {\n          this.disasterData = res.data;\n          this.initCharts();\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    // 初始化所有图表\n    initCharts() {\n      this.initPieChart();\n      this.initMapChart();\n    },\n    // 初始化饼图\n    initPieChart() {\n      const pieChart = echarts.init(document.getElementById(\"pieChart\"));\n      // 根据灾情大类分类统计数据\n      const categoryData = {};\n      this.disasterData.forEach((item) => {\n        const category = item.disasterMajorCategory || \"其他\";\n        categoryData[category] = (categoryData[category] || 0) + 1;\n      });\n      const chartData = Object.entries(categoryData).map(([name, value]) => ({\n        name,\n        value,\n      }));\n\n      pieChart.setOption({\n        title: {\n          text: \"不同灾情大类信息占比\",\n          left: \"center\",\n          textStyle: { color: \"#003366\", fontSize: 16 },\n        },\n        tooltip: { trigger: \"item\" },\n        legend: {\n          bottom: \"3%\",\n          left: \"center\",\n          textStyle: { color: \"#003366\", fontSize: 10 },\n        },\n        series: [\n          {\n            name: \"灾情类型\",\n            type: \"pie\",\n            radius: [\"30%\", \"50%\"],\n            label: {\n              formatter: \"{b}\\n{d}%\",\n              color: \"#003366\",\n              fontSize: 8,\n            },\n            data: chartData,\n          },\n        ],\n      });\n    },\n    // 初始化地图\n    initMapChart() {\n      const mapChart = echarts.init(document.getElementById(\"mapChart\"));\n\n      // 根据省份统计灾情数量\n      const provinceData = {};\n      this.disasterData.forEach((item) => {\n        const province = item.province || \"未知\";\n        provinceData[province] = (provinceData[province] || 0) + 1;\n      });\n\n      const chartData = Object.entries(provinceData).map(([name, value]) => ({\n        name,\n        value,\n      }));\n\n      mapChart.setOption({\n        title: {\n          text: \"各省灾情分布情况\",\n          left: \"center\",\n          textStyle: { color: \"#003366\", fontSize: 16 },\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{b}<br/>灾情数量: {c}\",\n        },\n        visualMap: {\n          min: 0,\n          max: Math.max(...chartData.map((d) => d.value)),\n          left: \"left\",\n          textStyle: { color: \"#003366\" },\n          inRange: { color: [\"#d7f0fa\", \"#005bb5\"] },\n        },\n        geo: {\n          map: \"china\",\n          label: {\n            emphasis: { show: false },\n          },\n          itemStyle: {\n            normal: {\n              areaColor: \"#f9f9f9\",\n              borderColor: \"#ccc\",\n            },\n            emphasis: {\n              areaColor: \"#d1ecff\",\n            },\n          },\n        },\n        series: [\n          {\n            name: \"灾情数量\",\n            type: \"map\",\n            map: \"china\",\n            data: chartData,\n          },\n        ],\n      });\n    },\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}