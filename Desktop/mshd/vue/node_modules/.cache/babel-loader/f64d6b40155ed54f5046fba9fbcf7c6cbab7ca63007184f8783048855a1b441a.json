{"ast":null,"code":"import request from \"@/utils/request\";\nimport * as echarts from 'echarts'; // 引入 ECharts 主模块\nimport 'echarts/map/js/china'; // 引入中国地图数据\n\nexport default {\n  name: 'IndexView',\n  data() {\n    return {\n      activeName: '',\n      notices: [],\n      user: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {}\n    };\n  },\n  mounted() {\n    request.get(\"/all\").then(res => {\n      if (res.code === '0') {\n        this.notices = res.data;\n      } else {\n        this.$message.error(res.msg);\n      }\n    });\n    this.initCharts();\n  },\n  methods: {\n    initCharts() {\n      this.initPieChart();\n      this.initMapChart();\n      this.initRankingChart();\n      this.initBarChart();\n      this.initLineChart();\n      this.initStackedBarChart();\n      this.initRadarChart();\n      this.initDataFormatChart();\n    },\n    initPieChart() {\n      var pieChart = echarts.init(document.getElementById('pieChart'));\n      pieChart.setOption({\n        // 饼图配置\n        title: {\n          text: '不同灾情大类信息占比',\n          left: 'center',\n          textStyle: {\n            color: '#003366',\n            fontSize: 16\n          }\n        },\n        tooltip: {\n          trigger: 'item'\n        },\n        legend: {\n          bottom: '3%',\n          left: 'center',\n          textStyle: {\n            color: '#003366',\n            fontSize: 10\n          }\n        },\n        series: [{\n          name: '灾情类型',\n          type: 'pie',\n          radius: ['30%', '50%'],\n          label: {\n            formatter: '{b}\\n{d}%',\n            color: '#003366',\n            fontSize: 8\n          },\n          data: [{\n            value: 556,\n            name: '业务报送数据'\n          }, {\n            value: 100,\n            name: '泛在感知数据'\n          }, {\n            value: 30,\n            name: '其他数据'\n          }],\n          color: ['#5470c6', '#91cc75', '#fac858']\n        }]\n      });\n    },\n    /*************  ✨ Codeium Command ⭐  *************/\n    /******  7e1a9d91-da15-4afe-bba0-d99ed6ca118b  *******/\n    initMapChart() {\n      var mapChart = echarts.init(document.getElementById('mapChart'));\n\n      // 调用后端接口获取灾情数据\n      fetch('http://localhost:8080/all').then(response => response.json()).then(data => {\n        if (data.code !== \"0\") {\n          console.error(\"获取数据失败:\", data.msg);\n          return;\n        }\n\n        // 解析返回的数据，根据省份统计灾情数量\n        const disasterCountByProvince = {};\n        data.data.forEach(item => {\n          const province = item.province; // 获取省份字段\n          if (province) {\n            disasterCountByProvince[province] = (disasterCountByProvince[province] || 0) + 1;\n          }\n        });\n\n        // 将统计结果转换为 ECharts 所需格式\n        const disasterData = Object.keys(disasterCountByProvince).map(province => ({\n          name: province,\n          value: disasterCountByProvince[province] // 灾情数量\n        }));\n\n        // 动态计算灾情最大值，用于视觉映射\n        const maxDisasterCount = Math.max(...Object.values(disasterCountByProvince));\n\n        // 设置 ECharts 配置项\n        mapChart.setOption({\n          title: {\n            text: '各省灾情分布情况',\n            left: 'center',\n            textStyle: {\n              color: '#003366',\n              fontSize: 16\n            }\n          },\n          tooltip: {\n            trigger: 'item',\n            formatter: '{b}<br/>灾情数量: {c}'\n          },\n          visualMap: {\n            min: 0,\n            max: maxDisasterCount,\n            // 动态设置最大值\n            left: 'left',\n            textStyle: {\n              color: '#003366'\n            },\n            inRange: {\n              color: ['#d7f0fa', '#005bb5']\n            } // 从浅蓝到深蓝\n          },\n          geo: {\n            map: 'china',\n            label: {\n              emphasis: {\n                show: false\n              }\n            },\n            itemStyle: {\n              normal: {\n                areaColor: '#f9f9f9',\n                borderColor: '#ccc'\n              },\n              emphasis: {\n                areaColor: '#d1ecff'\n              }\n            }\n          },\n          series: [{\n            name: '灾情数量',\n            type: 'map',\n            map: 'china',\n            geoIndex: 0,\n            data: disasterData,\n            // 使用灾情统计数据\n            itemStyle: {\n              emphasis: {\n                areaColor: '#ffd700'\n              }\n            }\n          }]\n        });\n      }).catch(error => {\n        console.error(\"获取灾情数据失败:\", error);\n      });\n    },\n    initRankingChart() {\n      var rankingChart = echarts.init(document.getElementById('rankingChart'));\n      rankingChart.setOption({\n        // 排名图配置\n        title: {\n          text: '按城市灾情数量排名',\n          left: 'center',\n          textStyle: {\n            color: '#003366'\n          }\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        yAxis: {\n          type: 'category',\n          data: ['宁波', '台州', '上海', '长沙', '武汉'],\n          axisLabel: {\n            color: '#003366',\n            fontSize: 8\n          }\n        },\n        xAxis: {\n          type: 'value',\n          axisLabel: {\n            color: '#003366',\n            fontSize: 8\n          }\n        },\n        series: [{\n          type: 'bar',\n          data: [180, 250, 300, 150, 200],\n          itemStyle: {\n            color: '#40a9ff',\n            fontSize: 8\n          }\n        }]\n      });\n    },\n    initBarChart() {\n      var barChart = echarts.init(document.getElementById('barChart'));\n      barChart.setOption({\n        // 柱状图配置\n        title: {\n          text: '灾情类型分布',\n          left: 'center',\n          textStyle: {\n            color: '#003366'\n          }\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        xAxis: {\n          type: 'category',\n          data: ['震情', '人员伤亡', '次生灾害', '诱发灾害', '经济损失'],\n          axisLabel: {\n            color: '#003366',\n            fontSize: 7\n          }\n        },\n        yAxis: {\n          type: 'value',\n          axisLabel: {\n            color: '#003366',\n            fontSize: 8\n          }\n        },\n        series: [{\n          type: 'bar',\n          data: [80, 60, 40, 30, 20],\n          itemStyle: {\n            color: '#91cc75'\n          }\n        }]\n      });\n    },\n    initLineChart() {\n      var lineChart = echarts.init(document.getElementById('lineChart'));\n      lineChart.setOption({\n        // 折线图配置\n        title: {\n          text: '灾情时段分布',\n          left: 'center',\n          textStyle: {\n            color: '#003366'\n          }\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        xAxis: {\n          type: 'category',\n          data: ['2024.01', '2024.02', '2024.03', '2024.04', '2024.05'],\n          axisLabel: {\n            color: '#003366'\n          }\n        },\n        yAxis: {\n          type: 'value',\n          axisLabel: {\n            color: '#003366'\n          }\n        },\n        series: [{\n          type: 'line',\n          data: [80, 180, 120, 20, 250],\n          itemStyle: {\n            color: '#5470c6'\n          }\n        }]\n      });\n    },\n    initStackedBarChart() {\n      var stackedBarChart = echarts.init(document.getElementById('stackedBarChart'));\n      stackedBarChart.setOption({\n        // 堆叠柱状图配置\n        title: {\n          text: '灾情数量统计',\n          left: 'center',\n          textStyle: {\n            color: '#003366'\n          }\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        yAxis: {\n          type: 'category',\n          data: ['2024.01', '2024.02', '2024.03', '2024.04', '2024.05'],\n          axisLabel: {\n            color: '#003366',\n            fontSize: 7\n          }\n        },\n        xAxis: {\n          type: 'value',\n          axisLabel: {\n            color: '#003366'\n          }\n        },\n        series: [{\n          name: '震情',\n          type: 'bar',\n          stack: '总量',\n          data: [20, 30, 40, 50, 60],\n          itemStyle: {\n            color: '#91cc75'\n          }\n        }, {\n          name: '人员伤亡',\n          type: 'bar',\n          stack: '总量',\n          data: [15, 25, 35, 45, 55],\n          itemStyle: {\n            color: '#fac858'\n          }\n        }, {\n          name: '经济损失',\n          type: 'bar',\n          stack: '总量',\n          data: [10, 20, 30, 40, 50],\n          itemStyle: {\n            color: '#73c0de'\n          }\n        }, {\n          name: '次生灾害',\n          type: 'bar',\n          stack: '总量',\n          data: [10, 20, 30, 40, 50],\n          itemStyle: {\n            color: '#66af9f'\n          }\n        }, {\n          name: '诱发灾害',\n          type: 'bar',\n          stack: '总量',\n          data: [10, 20, 30, 40, 50],\n          itemStyle: {\n            color: '#bd6477'\n          }\n        }]\n      });\n    },\n    initRadarChart() {\n      var radarChart = echarts.init(document.getElementById('radarChart'));\n      radarChart.setOption({\n        // 雷达图配置\n        title: {\n          text: '灾情类型雷达分布',\n          left: 'center',\n          textStyle: {\n            color: '#003366'\n          }\n        },\n        radar: {\n          indicator: [{\n            name: '震情',\n            max: 100\n          }, {\n            name: '人员伤亡',\n            max: 100\n          }, {\n            name: '次生灾害',\n            max: 100\n          }, {\n            name: '诱发灾害',\n            max: 100\n          }, {\n            name: '经济损失',\n            max: 100\n          }],\n          splitArea: {\n            areaStyle: {\n              color: 'rgba(255, 255, 255, 0.1)'\n            }\n          }\n        },\n        series: [{\n          name: '2023年',\n          type: 'radar',\n          data: [{\n            value: [60, 50, 40, 30, 20],\n            name: '2023年'\n          }]\n        }, {\n          name: '2024年',\n          type: 'radar',\n          data: [{\n            value: [70, 60, 50, 40, 30],\n            name: '2024年'\n          }]\n        }]\n      });\n    },\n    initDataFormatChart() {\n      var dataFormatChart = echarts.init(document.getElementById('dataFormatChart'));\n      dataFormatChart.setOption({\n        // 数据格式统计图配置\n        title: {\n          text: '数据格式统计',\n          // 设置标题\n          left: 'center',\n          // 标题居中\n          textStyle: {\n            color: '#003366',\n            fontSize: 16\n          } // 标题样式\n        },\n        tooltip: {\n          trigger: 'item',\n          // 鼠标悬浮触发提示\n          formatter: '{b}: {c}%' // 格式化提示内容\n        },\n        series: [{\n          type: 'treemap',\n          // 使用矩形树图\n          data: [{\n            name: '文字',\n            value: 31,\n            itemStyle: {\n              color: '#73c0de'\n            }\n          },\n          // 文字数据\n          {\n            name: '图像',\n            value: 25,\n            itemStyle: {\n              color: '#ab85c9'\n            }\n          },\n          // 图像数据\n          {\n            name: '音频',\n            value: 17,\n            itemStyle: {\n              color: '#5b9bd5'\n            }\n          },\n          // 音频数据\n          {\n            name: '视频',\n            value: 15,\n            itemStyle: {\n              color: '#9c7248'\n            }\n          },\n          // 视频数据\n          {\n            name: '其他',\n            value: 10,\n            itemStyle: {\n              color: '#7b61ff'\n            }\n          } // 其他数据\n          ],\n          label: {\n            show: true,\n            // 显示标签\n            formatter: '{b}\\n{c}%',\n            // 标签格式，显示名称和百分比\n            color: '#ffffff',\n            // 标签文字颜色\n            fontSize: 12 // 标签字体大小\n          },\n          breadcrumb: {\n            show: false\n          },\n          // 禁用导航\n          roam: false // 禁止缩放\n        }]\n      });\n    }\n  }\n};","map":{"version":3,"names":["request","echarts","name","data","activeName","notices","user","localStorage","getItem","JSON","parse","mounted","get","then","res","code","$message","error","msg","initCharts","methods","initPieChart","initMapChart","initRankingChart","initBarChart","initLineChart","initStackedBarChart","initRadarChart","initDataFormatChart","pieChart","init","document","getElementById","setOption","title","text","left","textStyle","color","fontSize","tooltip","trigger","legend","bottom","series","type","radius","label","formatter","value","mapChart","fetch","response","json","console","disasterCountByProvince","forEach","item","province","disasterData","Object","keys","map","maxDisasterCount","Math","max","values","visualMap","min","inRange","geo","emphasis","show","itemStyle","normal","areaColor","borderColor","geoIndex","catch","rankingChart","yAxis","axisLabel","xAxis","barChart","lineChart","stackedBarChart","stack","radarChart","radar","indicator","splitArea","areaStyle","dataFormatChart","breadcrumb","roam"],"sources":["src/views/manager/Index.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"main-body-header\">欢迎进入多源灾情数据管理服务系统</div>\n    <div class=\"main-body-content\">\n      <div style=\"margin-bottom: 100px; width: 100%\">\n        <el-collapse v-model=\"activeName\" accordion>\n          <el-collapse-item v-for=\"item in notices\" :title=\"item.name\" :name=\"item.id\">\n            <div style=\"padding: 0 20px\">{{ item.content }}</div>\n          </el-collapse-item>\n        </el-collapse>\n      </div>\n      <div>\n        <el-row :gutter=\"20\">\n          <el-col :span=\"12\">\n            <div id=\"pieChart\" style=\"height: 400px\"></div>\n          </el-col>\n          <el-col :span=\"12\">\n            <div id=\"mapChart\" style=\"height: 400px\"></div>\n          </el-col>\n        </el-row>\n        <el-row :gutter=\"20\">\n          <el-col :span=\"12\">\n            <div id=\"rankingChart\" style=\"height: 400px\"></div>\n          </el-col>\n          <el-col :span=\"12\">\n            <div id=\"barChart\" style=\"height: 400px\"></div>\n          </el-col>\n        </el-row>\n        <el-row :gutter=\"20\">\n          <el-col :span=\"24\">\n            <div id=\"lineChart\" style=\"height: 400px\"></div>\n          </el-col>\n        </el-row>\n        <el-row :gutter=\"20\">\n          <el-col :span=\"24\">\n            <div id=\"stackedBarChart\" style=\"height: 400px\"></div>\n          </el-col>\n        </el-row>\n        <el-row :gutter=\"20\">\n          <el-col :span=\"24\">\n            <div id=\"radarChart\" style=\"height: 400px\"></div>\n          </el-col>\n        </el-row>\n        <el-row :gutter=\"20\">\n          <el-col :span=\"24\">\n            <div id=\"dataFormatChart\" style=\"height: 400px\"></div>\n          </el-col>\n        </el-row>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport request from \"@/utils/request\";\nimport * as echarts from 'echarts'; // 引入 ECharts 主模块\nimport 'echarts/map/js/china'; // 引入中国地图数据\n\nexport default {\n  name: 'IndexView',\n  data() {\n    return {\n      activeName: '',\n      notices: [],\n      user: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {},\n    }\n  },\n  mounted() {\n    request.get(\"/all\").then(res => {\n      if (res.code === '0') {\n        this.notices = res.data;\n      } else {\n        this.$message.error(res.msg)\n      }\n    });\n    this.initCharts();\n  },\n  methods: {\n    initCharts() {\n      this.initPieChart();\n      this.initMapChart();\n      this.initRankingChart();\n      this.initBarChart();\n      this.initLineChart();\n      this.initStackedBarChart();\n      this.initRadarChart();\n      this.initDataFormatChart();\n    },\n    initPieChart() {\n      var pieChart = echarts.init(document.getElementById('pieChart'));\n      pieChart.setOption({\n        // 饼图配置\n        title: {\n          text: '不同灾情大类信息占比',\n          left: 'center',\n          textStyle: { color: '#003366', fontSize: 16 }\n        },\n        tooltip: { trigger: 'item' },\n        legend: {\n          bottom: '3%',\n          left: 'center',\n          textStyle: { color: '#003366', fontSize: 10 }\n        },\n        series: [\n          {\n            name: '灾情类型',\n            type: 'pie',\n            radius: ['30%', '50%'],\n            label: {\n              formatter: '{b}\\n{d}%',\n              color: '#003366',\n              fontSize: 8\n            },\n            data: [\n              { value: 556, name: '业务报送数据' },\n              { value: 100, name: '泛在感知数据' },\n              { value: 30, name: '其他数据' }\n            ],\n            color: ['#5470c6', '#91cc75', '#fac858']\n          }\n        ]\n      });\n    },\n    /*************  ✨ Codeium Command ⭐  *************/\n    /******  7e1a9d91-da15-4afe-bba0-d99ed6ca118b  *******/\n    initMapChart() {\n      var mapChart = echarts.init(document.getElementById('mapChart'));\n\n      // 调用后端接口获取灾情数据\n      fetch('http://localhost:8080/all')\n        .then(response => response.json())\n        .then(data => {\n          if (data.code !== \"0\") {\n            console.error(\"获取数据失败:\", data.msg);\n            return;\n          }\n\n          // 解析返回的数据，根据省份统计灾情数量\n          const disasterCountByProvince = {};\n          data.data.forEach(item => {\n            const province = item.province; // 获取省份字段\n            if (province) {\n              disasterCountByProvince[province] = (disasterCountByProvince[province] || 0) + 1;\n            }\n          });\n\n          // 将统计结果转换为 ECharts 所需格式\n          const disasterData = Object.keys(disasterCountByProvince).map(province => ({\n            name: province,\n            value: disasterCountByProvince[province] // 灾情数量\n          }));\n\n          // 动态计算灾情最大值，用于视觉映射\n          const maxDisasterCount = Math.max(...Object.values(disasterCountByProvince));\n\n          // 设置 ECharts 配置项\n          mapChart.setOption({\n            title: {\n              text: '各省灾情分布情况',\n              left: 'center',\n              textStyle: { color: '#003366', fontSize: 16 }\n            },\n            tooltip: {\n              trigger: 'item',\n              formatter: '{b}<br/>灾情数量: {c}'\n            },\n            visualMap: {\n              min: 0,\n              max: maxDisasterCount, // 动态设置最大值\n              left: 'left',\n              textStyle: { color: '#003366' },\n              inRange: { color: ['#d7f0fa', '#005bb5'] } // 从浅蓝到深蓝\n            },\n            geo: {\n              map: 'china',\n              label: {\n                emphasis: { show: false }\n              },\n              itemStyle: {\n                normal: {\n                  areaColor: '#f9f9f9',\n                  borderColor: '#ccc'\n                },\n                emphasis: {\n                  areaColor: '#d1ecff'\n                }\n              }\n            },\n            series: [\n              {\n                name: '灾情数量',\n                type: 'map',\n                map: 'china',\n                geoIndex: 0,\n                data: disasterData, // 使用灾情统计数据\n                itemStyle: {\n                  emphasis: {\n                    areaColor: '#ffd700'\n                  }\n                }\n              }\n            ]\n          });\n        })\n        .catch(error => {\n          console.error(\"获取灾情数据失败:\", error);\n        });\n    },\n\n    initRankingChart() {\n      var rankingChart = echarts.init(document.getElementById('rankingChart'));\n      rankingChart.setOption({\n        // 排名图配置\n        title: { text: '按城市灾情数量排名', left: 'center', textStyle: { color: '#003366' } },\n        tooltip: { trigger: 'axis' },\n        yAxis: {\n          type: 'category',\n          data: ['宁波', '台州', '上海', '长沙', '武汉'],\n          axisLabel: { color: '#003366', fontSize: 8 }\n        },\n        xAxis: { type: 'value', axisLabel: { color: '#003366', fontSize: 8 } },\n        series: [\n          {\n            type: 'bar',\n            data: [180, 250, 300, 150, 200],\n            itemStyle: { color: '#40a9ff', fontSize: 8 }\n          }\n        ]\n      });\n    },\n    initBarChart() {\n      var barChart = echarts.init(document.getElementById('barChart'));\n      barChart.setOption({\n        // 柱状图配置\n        title: { text: '灾情类型分布', left: 'center', textStyle: { color: '#003366' } },\n        tooltip: { trigger: 'axis' },\n        xAxis: { type: 'category', data: ['震情', '人员伤亡', '次生灾害', '诱发灾害', '经济损失'], axisLabel: { color: '#003366', fontSize: 7 } },\n        yAxis: { type: 'value', axisLabel: { color: '#003366', fontSize: 8 } },\n        series: [\n          {\n            type: 'bar',\n            data: [80, 60, 40, 30, 20],\n            itemStyle: { color: '#91cc75' }\n          }\n        ]\n      });\n    },\n    initLineChart() {\n      var lineChart = echarts.init(document.getElementById('lineChart'));\n      lineChart.setOption({\n        // 折线图配置\n        title: { text: '灾情时段分布', left: 'center', textStyle: { color: '#003366' } },\n        tooltip: { trigger: 'axis' },\n        xAxis: { type: 'category', data: ['2024.01', '2024.02', '2024.03', '2024.04', '2024.05'], axisLabel: { color: '#003366' } },\n        yAxis: { type: 'value', axisLabel: { color: '#003366' } },\n        series: [\n          {\n            type: 'line',\n            data: [80, 180, 120, 20, 250],\n            itemStyle: { color: '#5470c6' }\n          }\n        ]\n      });\n    },\n    initStackedBarChart() {\n      var stackedBarChart = echarts.init(document.getElementById('stackedBarChart'));\n      stackedBarChart.setOption({\n        // 堆叠柱状图配置\n        title: { text: '灾情数量统计', left: 'center', textStyle: { color: '#003366' } },\n        tooltip: { trigger: 'axis' },\n        yAxis: {\n          type: 'category',\n          data: ['2024.01', '2024.02', '2024.03', '2024.04', '2024.05'],\n          axisLabel: { color: '#003366', fontSize: 7 }\n        },\n        xAxis: { type: 'value', axisLabel: { color: '#003366' } },\n        series: [\n          { name: '震情', type: 'bar', stack: '总量', data: [20, 30, 40, 50, 60], itemStyle: { color: '#91cc75' } },\n          { name: '人员伤亡', type: 'bar', stack: '总量', data: [15, 25, 35, 45, 55], itemStyle: { color: '#fac858' } },\n          { name: '经济损失', type: 'bar', stack: '总量', data: [10, 20, 30, 40, 50], itemStyle: { color: '#73c0de' } },\n          { name: '次生灾害', type: 'bar', stack: '总量', data: [10, 20, 30, 40, 50], itemStyle: { color: '#66af9f' } },\n          { name: '诱发灾害', type: 'bar', stack: '总量', data: [10, 20, 30, 40, 50], itemStyle: { color: '#bd6477' } }]\n      });\n    },\n    initRadarChart() {\n      var radarChart = echarts.init(document.getElementById('radarChart'));\n      radarChart.setOption({\n        // 雷达图配置\n        title: { text: '灾情类型雷达分布', left: 'center', textStyle: { color: '#003366' } },\n        radar: {\n          indicator: [\n            { name: '震情', max: 100 },\n            { name: '人员伤亡', max: 100 },\n            { name: '次生灾害', max: 100 },\n            { name: '诱发灾害', max: 100 },\n            { name: '经济损失', max: 100 }\n          ],\n          splitArea: { areaStyle: { color: 'rgba(255, 255, 255, 0.1)' } }\n        },\n        series: [\n          { name: '2023年', type: 'radar', data: [{ value: [60, 50, 40, 30, 20], name: '2023年' }] },\n          { name: '2024年', type: 'radar', data: [{ value: [70, 60, 50, 40, 30], name: '2024年' }] }\n        ]\n      });\n    },\n    initDataFormatChart() {\n      var dataFormatChart = echarts.init(document.getElementById('dataFormatChart'));\n      dataFormatChart.setOption({\n        // 数据格式统计图配置\n        title: {\n          text: '数据格式统计', // 设置标题\n          left: 'center', // 标题居中\n          textStyle: { color: '#003366', fontSize: 16 }, // 标题样式\n        },\n        tooltip: {\n          trigger: 'item', // 鼠标悬浮触发提示\n          formatter: '{b}: {c}%', // 格式化提示内容\n        },\n        series: [\n          {\n            type: 'treemap', // 使用矩形树图\n            data: [\n              { name: '文字', value: 31, itemStyle: { color: '#73c0de' } }, // 文字数据\n              { name: '图像', value: 25, itemStyle: { color: '#ab85c9' } }, // 图像数据\n              { name: '音频', value: 17, itemStyle: { color: '#5b9bd5' } }, // 音频数据\n              { name: '视频', value: 15, itemStyle: { color: '#9c7248' } }, // 视频数据\n              { name: '其他', value: 10, itemStyle: { color: '#7b61ff' } }, // 其他数据\n            ],\n            label: {\n              show: true, // 显示标签\n              formatter: '{b}\\n{c}%', // 标签格式，显示名称和百分比\n              color: '#ffffff', // 标签文字颜色\n              fontSize: 12, // 标签字体大小\n            },\n            breadcrumb: { show: false }, // 禁用导航\n            roam: false, // 禁止缩放\n          },\n        ],\n      });\n    },\n  }\n}\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}