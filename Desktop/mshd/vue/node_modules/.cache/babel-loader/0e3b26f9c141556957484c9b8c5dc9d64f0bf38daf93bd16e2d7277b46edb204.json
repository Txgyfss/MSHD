{"ast":null,"code":"import request from \"@/utils/request\"; // 使用封装的 axios 实例\n\nexport default {\n  data() {\n    return {\n      form: {\n        location: [],\n        time: '',\n        source: [],\n        carrier: '',\n        disasterType: [],\n        indicator: '',\n        description: ''\n      },\n      disasterCode: '',\n      disasterCodeInput: '',\n      // 用户输入的灾情码\n      decodedData: {\n        location: '',\n        // 地点\n        time: '',\n        // 时间\n        source: '',\n        // 来源\n        carrier: '',\n        // 承载形式\n        disasterType: '',\n        // 灾情类型\n        indicator: '',\n        // 灾情指标\n        description: '',\n        // 描述\n        province: '',\n        // 省\n        city: '',\n        // 市\n        country: '',\n        // 区县\n        town: '',\n        // 镇\n        village: '',\n        // 村\n        disasterMajorCategory: '',\n        // 灾情主类别\n        disasterSubCategory: '',\n        // 灾情子类别\n        disasterIndicator: '',\n        // 灾情指标\n        date: '',\n        // 日期\n        reportingUnit: '',\n        // 上报单位\n        sourceCategory: '',\n        // 来源分类\n        sourceSubCategory: '',\n        // 来源子分类\n        carrierForm: '',\n        // 承载形式\n        link: '' // 数据链接\n      },\n      SourcesName: '',\n      subSourcesName: '',\n      carriers: [],\n      disasterTypes: [],\n      indicators: [],\n      selectedDisasterTypeCode: '',\n      // 用于记录当前选中的灾情类型编码\n      selectedDisasterSubTypeCode: '',\n      // 用于记录当前选中的灾情子类型编码\n      isSelectingDisasterType: true,\n      // 用于标记是否在选择灾情类型\n\n      cascaderProps: {\n        value: 'code',\n        // 显示的数据绑定字段\n        label: 'name',\n        // 显示的名称字段\n        children: 'children',\n        // 子级数据字段\n        lazy: true,\n        // 启用懒加载\n        lazyLoad: this.lazyLoadData // 动态加载函数\n      },\n      sourceProps: {\n        value: 'code',\n        // 显示的数据绑定字段\n        label: 'name',\n        // 显示的名称字段\n        children: 'children',\n        // 子级数据字段\n        lazy: true,\n        // 启用懒加载\n        lazyLoad: this.lazyLoadSourceData // 动态加载函数\n      },\n      disasterTypeProps: {\n        value: 'code',\n        // 显示的数据绑定字段\n        label: 'name',\n        // 显示的名称字段\n        children: 'children',\n        // 子级数据字段\n        lazy: true,\n        // 启用懒加载\n        lazyLoad: this.lazyLoadDisasterTypeData // 动态加载函数\n      }\n    };\n  },\n  methods: {\n    // 懒加载函数，根据级别来加载不同的区域数据\n    lazyLoadData(node, resolve) {\n      const {\n        level,\n        value\n      } = node; // 获取当前节点的级别和选中的值\n      let fetchData;\n      // 根据级别来判断加载哪个数据（省 -> 市 -> 县区 -> 乡镇 -> 村庄）\n      switch (level) {\n        case 0:\n          // 省级\n          fetchData = this.fetchProvinces();\n          break;\n        case 1:\n          // 市级\n          fetchData = this.fetchCities(value);\n          break;\n        case 2:\n          // 区县级\n          fetchData = this.fetchCounties(value);\n          break;\n        case 3:\n          // 乡镇级\n          fetchData = this.fetchTowns(value);\n          break;\n        case 4:\n          // 村庄级\n          fetchData = this.fetchVillages(value);\n          break;\n        default:\n          resolve([]);\n          return;\n      }\n\n      // 获取数据后，通过 resolve 函数返回节点数据\n      fetchData.then(data => {\n        resolve(data); // 返回数据\n      }).catch(error => {\n        console.error(error);\n        resolve([]); // 如果请求失败，返回空数组\n      });\n    },\n    lazyLoadSourceData(node, resolve) {\n      const {\n        level,\n        value\n      } = node; // 获取当前节点的级别和选中的值\n      let fetchData;\n      console.log(`Lazy load triggered for level: ${level}, value: ${value}`);\n      // 根据级别来判断加载哪个数据（大类 -> 子类）\n      switch (level) {\n        case 0:\n          // 大类\n          fetchData = this.fetchSources();\n          break;\n        case 1:\n          // 子类\n          fetchData = this.fetchSubSources(value);\n          break;\n        default:\n          resolve([]);\n          return;\n      }\n\n      // 获取数据后，通过 resolve 函数返回节点数据\n      fetchData.then(data => {\n        resolve(data); // 返回数据\n      }).catch(error => {\n        console.error(error);\n        resolve([]); // 如果请求失败，返回空数组\n      });\n    },\n    lazyLoadDisasterTypeData(node, resolve) {\n      const {\n        level,\n        value\n      } = node; // 获取当前节点的级别和选中的值\n      let fetchData;\n      // 根据级别来判断加载哪个数据（大类 -> 子类）\n      switch (level) {\n        case 0:\n          // 大类\n          fetchData = this.fetchDisasterTypes();\n          break;\n        case 1:\n          // 子类\n          fetchData = this.fetchSubDisasterTypes(value);\n          break;\n        default:\n          resolve([]);\n          return;\n      }\n\n      // 获取数据后，通过 resolve 函数返回节点数据\n      fetchData.then(data => {\n        resolve(data); // 返回数据\n      }).catch(error => {\n        console.error(error);\n        resolve([]); // 如果请求失败，返回空数组\n      });\n    },\n    // 获取省份数据\n    async fetchProvinces() {\n      try {\n        const response = await request.get('http://localhost:8080/api/areas/getProvinces');\n        return response.data;\n      } catch (error) {\n        console.error('Error fetching provinces:', error);\n      }\n    },\n    // 获取城市数据\n    async fetchCities(provinceCode) {\n      try {\n        const response = await request.get(`http://localhost:8080/api/areas/getCities?provinceCode=${provinceCode}`);\n        return response.data;\n      } catch (error) {\n        console.error('Error fetching cities:', error);\n      }\n    },\n    // 获取县区数据\n    async fetchCounties(cityCode) {\n      try {\n        // 调用后端接口获取县区数据\n        const response = await request.get(`http://localhost:8080/api/areas/getCounties?cityCode=${cityCode}`);\n        return response.data; // 返回后端的数据，格式与后端一致\n      } catch (error) {\n        console.error('Error fetching counties:', error);\n      }\n    },\n    // 获取乡镇数据\n    async fetchTowns(areaCode) {\n      try {\n        // 调用后端接口获取乡镇数据\n        const response = await request.get(`http://localhost:8080/api/areas/getTowns?areaCode=${areaCode}`);\n        return response.data; // 返回后端的数据，格式与后端一致\n      } catch (error) {\n        console.error('Error fetching towns:', error);\n      }\n    },\n    // 获取村庄数据\n    async fetchVillages(streetCode) {\n      try {\n        const response = await request.get(`http://localhost:8080/api/areas/getVillages?streetCode=${streetCode}`);\n        return response.data;\n        return data.map(item => {\n          return {\n            code: item.code,\n            name: item.name,\n            leaf: true // 最后一级，为叶子节点\n          };\n        });\n      } catch (error) {\n        console.error('Error fetching villages:', error);\n      }\n    },\n    // 获取来源大类\n    async fetchSources() {\n      try {\n        const sourcesResponse = await request.get('http://localhost:8080/disaster/sources');\n        const sourcesNameResponse = await request.get('http://localhost:8080/disaster/sourcesName');\n        console.log(\"Source:\", sourcesResponse.data);\n        console.log(\"SourceName\", sourcesNameResponse);\n        this.SourcesName = sourcesNameResponse.data[1].name;\n        console.log(\"SourceName\", this.SourcesName);\n        return sourcesResponse.data; // 从后端获取数据\n        console.log(\"Source:\", sourcesResponse.data);\n      } catch (error) {\n        console.error('Error fetching sources:', error);\n      }\n    },\n    // 获取来源子类\n    async fetchSubSources(sourceCode) {\n      try {\n        const subSourcesResponse = await request.get('http://localhost:8080/disaster/subSources', {\n          params: {\n            sourceCode\n          } // 确保传递了正确的 sourceCode\n        });\n        const subSourcesNameResponse = await request.get('http://localhost:8080/disaster/subSourcesName');\n        this.subSourcesName = subSourcesNameResponse.data[sourceCode].name;\n        console.log(\"SourceName\", this.subSourcesName);\n        return subSourcesResponse.data; // 从后端获取数据\n      } catch (error) {\n        console.error('Error fetching sub-sources:', error);\n      }\n    },\n    // 获取灾情类型大类\n    async fetchDisasterTypes() {\n      try {\n        const disasterTypesResponse = await request.get('http://localhost:8080/disaster/types');\n        this.disasterTypes = disasterTypesResponse.data; // 更新 disasterTypes\n        return disasterTypesResponse.data; // 从后端获取数据\n      } catch (error) {\n        console.error('Error fetching disaster types:', error);\n      }\n    },\n    // 获取子灾情类型大类\n    async fetchSubDisasterTypes(disasterCode) {\n      try {\n        const subDisasterTypesResponse = await request.get('http://localhost:8080/disaster/subTypes', {\n          params: {\n            disasterCode\n          } // 传递 disasterCode 作为查询参数\n        });\n        return subDisasterTypesResponse.data; // 从后端获取数据\n      } catch (error) {\n        console.error('Error fetching sub-disaster types:', error);\n      }\n    },\n    // 级联选择变化时的处理\n    handleCascadeChange(node) {\n      // 此处获取的是最后一级选中的数据\n      // this.form.location = node[node.length - 1];\n      const selectedData = node[node.length - 1];\n      console.log(selectedData);\n    },\n    handleSourceChange(node) {\n      // 此处获取的是最后一级选中的数据\n      // this.form.source = node[node.length - 1];\n      const selectedData = node[node.length - 1];\n      console.log(selectedData);\n    },\n    handleDisasterTypeChange(node) {\n      console.log('选中的节点数组:', node);\n      console.log('灾情类型数据:', this.disasterTypes);\n      if (node && node.length > 0) {\n        // 假设你只需要第一个选中的节点的 label\n        const selectedDisasterTypeCode = node[0]; // 获取第一个选中的值\n\n        console.log('灾情类型编码:', selectedDisasterTypeCode);\n        // 根据 selectedDisasterTypeCode 获取对应的 label\n        let selectedLabel = '';\n        this.getLabelFromDisasterTypes(selectedDisasterTypeCode, label => {\n          selectedLabel = label;\n          console.log('灾情类型的 label:', selectedLabel);\n        });\n        if (this.isSelectingDisasterType) {\n          // 如果需要继续其他操作\n          if (selectedDisasterTypeCode !== this.selectedDisasterTypeCode) {\n            this.selectedDisasterTypeCode = selectedDisasterTypeCode;\n            this.fetchIndicators(selectedDisasterTypeCode);\n          }\n        } else {\n          console.log('当前是选择灾情子类型，不请求灾情指标');\n        }\n      } else {\n        console.warn('没有选择灾情类型');\n      }\n    },\n    // 根据编码查找对应的label\n    getLabelFromDisasterTypes(code, callback) {\n      // 假设 disasterTypes 是你所有灾情类型数据的集合，且每个项有 'code' 和 'name'\n      const foundItem = this.disasterTypes.find(item => item.code === code);\n      if (foundItem) {\n        callback(foundItem.name); // 调用回调函数返回 label\n      } else {\n        console.warn('找不到对应的灾情类型');\n      }\n    },\n    handleDisasterSubTypeChange(node) {\n      // 打印选中的节点数组\n      console.log('选中的子节点数组:', node);\n      if (node && node.length > 0) {\n        const selectedDisasterSubTypeCode = node[0]; // 获取选中的灾情子类型编码\n\n        console.log('灾情子类型编码:', selectedDisasterSubTypeCode);\n\n        // 只在选择灾情子类型时，更新灾情子类型编码\n        if (selectedDisasterSubTypeCode !== this.selectedDisasterSubTypeCode) {\n          this.selectedDisasterSubTypeCode = selectedDisasterSubTypeCode;\n          // 不请求灾情指标，只更新子类型编码\n          console.log('灾情子类型已更新:', selectedDisasterSubTypeCode);\n        }\n      } else {\n        console.warn('没有选择灾情子类型');\n      }\n    },\n    // 这个方法请求灾情指标，只有在选择灾情类型时触发\n    async fetchIndicators(disasterTypeCode) {\n      try {\n        console.log('请求灾情指标时传递的灾情类型编码:', disasterTypeCode);\n        const response = await request.get('http://localhost:8080/disaster/indicators', {\n          params: {\n            sourceCode: disasterTypeCode\n          }\n        });\n        if (response.data) {\n          // 获取到数据后，存储到 indicators 中\n          this.indicators = response.data;\n          console.log('已获取灾情指标:', this.indicators);\n        } else {\n          console.warn('没有获取到灾情指标数据');\n          this.indicators = []; // 如果没有数据，设置为空数组\n        }\n      } catch (error) {\n        console.error('获取灾情指标时出错:', error);\n        this.indicators = []; // 如果出现错误，设置为空数组\n      }\n    },\n    // 获取后端的地理位置、灾情来源等数据\n    async initData() {\n      try {\n        const carriersResponse = await request.get('http://localhost:8080/disaster/carriers');\n        //const indicatorsResponse = await request.get('http://localhost:8080/disaster/indicators');\n\n        // 设置其他下拉选项数据\n        this.carriers = carriersResponse.data;\n        //this.indicators = indicatorsResponse.data;\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    // 生成灾情码并生成符合格式的数据\n    generateDisasterCode() {\n      const location = this.form.location.join('/'); // 获取省市区县的组合\n      console.log(\"地理位置\", Location);\n      const time = this.form.time.toISOString().split('T')[0].replace(/-/g, '');\n      ;\n      const source = this.form.source;\n      const carrier = this.form.carrier;\n      const disasterType = this.form.disasterType;\n      const indicator = this.form.indicator;\n      const description = this.form.description;\n\n      // 生成符合要求的结构\n\n      // const disasterData = {\n      //   province: location.split('/')[0],  // 北京\n      //   city: location.split('/')[1],  // 北京市\n      //   country: location.split('/')[2],  // 门头沟区\n      //   town: location.split('/')[3],  // 永定路街道\n      //   village: location.split('/')[4],  // 采石路7号社区居委会\n      //   category: disasterType,  // 房屋破坏\n      //   date: time,  // 2024-12-24T14:00:00\n      //   location: location.split('/')[1],  // 北京市\n      //   detail: description,  // 发生山洪\n      //   reportingUnit: this.form.source,  // 门头沟地质局\n      //   sourceCategory: this.SourcesName,  // 业务报送数据\n      //   sourceSubCategory: this.subSourcesName,  // 灾情快速上报接收处理系统\n      //   carrierForm: carrier,  // 图像\n      //   link: null,  // 传输数据链接\n      //   disasterMajorCategory: disasterType,  // 房屋破坏\n      //   disasterSubCategory: '土木',  // 固定示例，若有其他信息可以动态填充\n      //   disasterIndicator: indicator  // 一般损坏面积\n      // };\n      const disasterData = {\n        province: \"北京市\",\n        // 北京\n        city: \"市辖区\",\n        // 北京市\n        country: \"东城区\",\n        // 门头沟区\n        town: \"东华门街道\",\n        // 永定路街道\n        village: \"多福巷社区居委会\",\n        // 采石路7号社区居委会\n        category: disasterType,\n        // 房屋破坏\n        date: time,\n        // 2024-12-24T14:00:00\n        location: location,\n        // 北京市\n        detail: description,\n        // 发生山洪\n        reportingUnit: this.form.source,\n        // 门头沟地质局\n        sourceCategory: this.SourcesName,\n        // 业务报送数据\n        sourceSubCategory: this.subSourcesName,\n        // 灾情快速上报接收处理系统\n        carrierForm: carrier,\n        // 图像\n        link: null,\n        // 传输数据链接\n        disasterMajorCategory: disasterType,\n        // 房屋破坏\n        disasterSubCategory: \"土木\",\n        // 固定示例，若有其他信息可以动态填充\n        disasterIndicator: indicator // 一般损坏面积\n      };\n      this.sendDisasterData(disasterData); // 调用发送接口方法\n    },\n    // 发送数据到后端接口\n    async sendDisasterData(data) {\n      try {\n        // 发送 POST 请求到后端接口\n        const response = await request.post('http://localhost:8080/add', data);\n        console.log('数据发送成功:', response);\n        console.log(\"发送的灾情信息：\", data);\n\n        // 检查 response.data 是否有效\n        if (response && response.data) {\n          // 如果返回的 code 是 0，则表示成功\n          if (response.data.code === \"0\") {\n            // 获取返回的灾情码并填充到 disasterCode 输入框\n            this.disasterCode = response.data.data || '无灾情码返回'; // 如果没有返回数据，默认显示 '无灾情码返回'\n            console.log('生成的灾情码:', this.disasterCode);\n          } else {\n            // 如果 code 不是 0，显示错误信息\n            console.error('错误:', response.data.msg || '未知错误');\n          }\n        } else {\n          console.error('响应数据无效');\n        }\n      } catch (error) {\n        // 捕获并打印错误信息\n        console.error('数据发送失败:', error);\n      }\n    },\n    // 解码灾情码\n    async decodeDisasterCode() {\n      try {\n        // 发起请求，获取解码后的灾情信息\n        const response = await request.get(`http://localhost:8080/all?disasterCode=${this.disasterCodeInput}`);\n\n        // 从后端响应中提取灾情信息字符串，并解析为对象\n        const disasterInfo = response.data.data;\n\n        // 将灾情信息字符串转换为对象\n        const disasterInfoObj = this.parseDisasterInfo(disasterInfo);\n\n        // 假设 disasterInfoObj 格式如下：{province: '河北省', city: '承德市', ... }\n        // 只填充前端需要的字段\n        this.decodedData = {\n          //...this.decodedData,  // 保留已有的数据\n          location: disasterInfoObj.location || '',\n          time: disasterInfoObj.date ? new Date(disasterInfoObj.date).toLocaleString() : '',\n          // 格式化时间\n          source: disasterInfoObj.sourceCategory || '',\n          carrier: disasterInfoObj.carrierForm || '',\n          disasterType: disasterInfoObj.disasterMajorCategory || '',\n          indicator: disasterInfoObj.disasterIndicator || '',\n          description: disasterInfoObj.detail || '' // 假设为灾情描述字段\n        };\n      } catch (error) {\n        console.error('Error fetching disaster info:', error);\n      }\n    },\n    // 解析灾情信息字符串为对象\n    parseDisasterInfo(disasterInfoStr) {\n      // 使用正则表达式提取字段中的内容\n      const regex = /(\\w+)='([^']*)'/g;\n      let match;\n      const disasterInfoObj = {};\n      while ((match = regex.exec(disasterInfoStr)) !== null) {\n        disasterInfoObj[match[1]] = match[2];\n      }\n      return disasterInfoObj;\n    },\n    fileUploadSuccess(response) {\n      console.log('File uploaded successfully:', response);\n    }\n  },\n  mounted() {\n    this.initData();\n  }\n};","map":{"version":3,"names":["request","data","form","location","time","source","carrier","disasterType","indicator","description","disasterCode","disasterCodeInput","decodedData","province","city","country","town","village","disasterMajorCategory","disasterSubCategory","disasterIndicator","date","reportingUnit","sourceCategory","sourceSubCategory","carrierForm","link","SourcesName","subSourcesName","carriers","disasterTypes","indicators","selectedDisasterTypeCode","selectedDisasterSubTypeCode","isSelectingDisasterType","cascaderProps","value","label","children","lazy","lazyLoad","lazyLoadData","sourceProps","lazyLoadSourceData","disasterTypeProps","lazyLoadDisasterTypeData","methods","node","resolve","level","fetchData","fetchProvinces","fetchCities","fetchCounties","fetchTowns","fetchVillages","then","catch","error","console","log","fetchSources","fetchSubSources","fetchDisasterTypes","fetchSubDisasterTypes","response","get","provinceCode","cityCode","areaCode","streetCode","map","item","code","name","leaf","sourcesResponse","sourcesNameResponse","sourceCode","subSourcesResponse","params","subSourcesNameResponse","disasterTypesResponse","subDisasterTypesResponse","handleCascadeChange","selectedData","length","handleSourceChange","handleDisasterTypeChange","selectedLabel","getLabelFromDisasterTypes","fetchIndicators","warn","callback","foundItem","find","handleDisasterSubTypeChange","disasterTypeCode","initData","carriersResponse","generateDisasterCode","join","Location","toISOString","split","replace","disasterData","category","detail","sendDisasterData","post","msg","decodeDisasterCode","disasterInfo","disasterInfoObj","parseDisasterInfo","Date","toLocaleString","disasterInfoStr","regex","match","exec","fileUploadSuccess","mounted"],"sources":["src/views/manager/Upload.vue"],"sourcesContent":["<template>\n  <div class=\"main-body-content\">\n    <div class=\"main-body-header\">灾情信息上传</div>\n\n    <!-- 编码部分 -->\n    <el-card class=\"form-card\" :body-style=\"{ padding: '20px' }\">\n      <div class=\"form-title\">灾情信息编码</div>\n      <el-form :model=\"form\" label-position=\"right\" label-width=\"120px\">\n        <el-row>\n          <!-- 地理位置 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情地理位置\">\n              <el-cascader size=\"small\" v-model=\"form.location\" :props=\"cascaderProps\" placeholder=\"请选择完整的地理位置\"\n                @change=\"handleCascadeChange\" change-on-select></el-cascader>\n            </el-form-item>\n          </el-col>\n\n\n          <!-- 时间 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情时间\">\n              <el-date-picker v-model=\"form.time\" type=\"datetime\" placeholder=\"请选择灾情时间\" size=\"small\"></el-date-picker>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <el-row>\n          <!-- 来源 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情来源\">\n              <el-cascader size=\"small\" v-model=\"form.source\" :props=\"sourceProps\" placeholder=\"请选择灾情来源\"\n                @change=\"handleSourceChange\" change-on-select></el-cascader>\n            </el-form-item>\n          </el-col>\n\n          <!-- 载体类型 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情载体类型\">\n              <el-select size=\"small\" v-model=\"form.carrier\" placeholder=\"请选择灾情载体类型\">\n                <el-option v-for=\"(carrier, index) in carriers\" :key=\"index\" :label=\"carrier\"\n                  :value=\"carrier\"></el-option>\n              </el-select>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <el-row>\n          <!-- 灾情分类 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情分类\">\n\n              <el-cascader size=\"small\" v-model=\"form.disasterType\" :props=\"disasterTypeProps\" placeholder=\"请选择灾情分类\"\n                @change=\"handleDisasterTypeChange\" change-on-select></el-cascader>\n            </el-form-item>\n          </el-col>\n\n          <!-- 灾情指标分类 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情指标分类\">\n              <el-select size=\"small\" v-model=\"form.indicator\" placeholder=\"请选择灾情指标分类\">\n                <el-option v-for=\"(indicator, index) in indicators\" :key=\"index\" :label=\"indicator\"\n                  :value=\"indicator\"></el-option>\n              </el-select>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <!-- 富文本框，放在编码部分 -->\n        <el-form-item label=\"灾情描述\" style=\"margin-top: 10px;\">\n          <el-input type=\"textarea\" size=\"small\" v-model=\"form.description\" placeholder=\"请输入灾情描述\" rows=\"4\"\n            style=\"resize: none; width: 100%;\"></el-input>\n        </el-form-item>\n\n        <!-- 生成灾情码按钮 -->\n        <el-form-item>\n          <el-button size=\"small\" type=\"primary\" @click=\"generateDisasterCode\">生成灾情码</el-button>\n        </el-form-item>\n      </el-form>\n\n      <div class=\"disaster-code-display\">\n        <el-input size=\"small\" v-model=\"disasterCode\" placeholder=\"生成的灾情码\" readonly>\n        </el-input>\n      </div>\n\n    </el-card>\n\n    <!-- 解码部分 -->\n    <el-card class=\"form-card\" :body-style=\"{ padding: '20px' }\">\n      <div class=\"form-title\">灾情信息解码</div>\n      <el-form :model=\"form\" label-position=\"right\" label-width=\"120px\">\n        <el-form-item label=\"灾情码\">\n          <el-input size=\"small\" v-model=\"disasterCodeInput\" placeholder=\"请输入灾情码\"></el-input>\n        </el-form-item>\n\n        <el-form-item label=\"上传文件\">\n          <el-upload action=\"http://localhost:8080/files/upload\" ref=\"disasterFile\" :on-success=\"fileUploadSuccess\"\n            list-type=\"text\" style=\"width: 100%;\">\n            <el-button size=\"small\" type=\"success\">点击上传文件</el-button>\n          </el-upload>\n        </el-form-item>\n\n        <el-form-item style=\"margin-top: 15px;\">\n          <el-button size=\"small\" type=\"primary\" @click=\"decodeDisasterCode\">解码灾情码</el-button>\n        </el-form-item>\n\n        <el-row>\n          <!-- 解码后的地理位置 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情地理位置\">\n              <el-input size=\"small\" :value=\"decodedData.location\" readonly></el-input>\n            </el-form-item>\n          </el-col>\n\n          <!-- 解码后的时间 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情时间\">\n              <el-input size=\"small\" :value=\"decodedData.time\" readonly></el-input>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <el-row>\n          <!-- 解码后的来源 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情来源\">\n              <el-input size=\"small\" :value=\"decodedData.source\" readonly></el-input>\n            </el-form-item>\n          </el-col>\n\n          <!-- 解码后的载体类型 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情载体类型\">\n              <el-input size=\"small\" :value=\"decodedData.carrier\" readonly></el-input>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <el-row>\n          <!-- 解码后的灾情分类 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情分类\">\n              <el-input size=\"small\" :value=\"decodedData.disasterType\" readonly></el-input>\n            </el-form-item>\n          </el-col>\n\n          <!-- 解码后的灾情指标分类 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情指标分类\">\n              <el-input size=\"small\" :value=\"decodedData.indicator\" readonly></el-input>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <!-- 解码后的描述 -->\n        <el-form-item label=\"灾情描述\">\n          <el-input type=\"textarea\" size=\"small\" :value=\"decodedData.description\" readonly></el-input>\n        </el-form-item>\n      </el-form>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport request from \"@/utils/request\";  // 使用封装的 axios 实例\n\nexport default {\n  data() {\n    return {\n      form: {\n        location: [],\n        time: '',\n        source: [],\n        carrier: '',\n        disasterType: [],\n        indicator: '',\n        description: ''\n      },\n      disasterCode: '',\n      disasterCodeInput: '',  // 用户输入的灾情码\n      decodedData: {\n        location: '',  // 地点\n        time: '',  // 时间\n        source: '',  // 来源\n        carrier: '',  // 承载形式\n        disasterType: '',  // 灾情类型\n        indicator: '',  // 灾情指标\n        description: '',  // 描述\n        province: '',  // 省\n        city: '',  // 市\n        country: '',  // 区县\n        town: '',  // 镇\n        village: '',  // 村\n        disasterMajorCategory: '',  // 灾情主类别\n        disasterSubCategory: '',  // 灾情子类别\n        disasterIndicator: '',  // 灾情指标\n        date: '',  // 日期\n        reportingUnit: '',  // 上报单位\n        sourceCategory: '',  // 来源分类\n        sourceSubCategory: '',  // 来源子分类\n        carrierForm: '',  // 承载形式\n        link: ''  // 数据链接\n      },\n      SourcesName: '',\n      subSourcesName: '',\n      carriers: [],\n      disasterTypes: [],\n      indicators: [],\n      selectedDisasterTypeCode: '',  // 用于记录当前选中的灾情类型编码\n      selectedDisasterSubTypeCode: '',  // 用于记录当前选中的灾情子类型编码\n      isSelectingDisasterType: true,  // 用于标记是否在选择灾情类型\n\n      cascaderProps: {\n        value: 'code', // 显示的数据绑定字段\n        label: 'name', // 显示的名称字段\n        children: 'children', // 子级数据字段\n        lazy: true, // 启用懒加载\n        lazyLoad: this.lazyLoadData // 动态加载函数\n      },\n      sourceProps: {\n        value: 'code', // 显示的数据绑定字段\n        label: 'name', // 显示的名称字段\n        children: 'children', // 子级数据字段\n        lazy: true, // 启用懒加载\n        lazyLoad: this.lazyLoadSourceData // 动态加载函数\n      },\n      disasterTypeProps: {\n        value: 'code', // 显示的数据绑定字段\n        label: 'name', // 显示的名称字段\n        children: 'children', // 子级数据字段\n        lazy: true, // 启用懒加载\n        lazyLoad: this.lazyLoadDisasterTypeData // 动态加载函数\n      }\n    }\n  },\n  methods: {\n    // 懒加载函数，根据级别来加载不同的区域数据\n    lazyLoadData(node, resolve) {\n      const { level, value } = node;  // 获取当前节点的级别和选中的值\n      let fetchData;\n      // 根据级别来判断加载哪个数据（省 -> 市 -> 县区 -> 乡镇 -> 村庄）\n      switch (level) {\n        case 0: // 省级\n          fetchData = this.fetchProvinces();\n          break;\n        case 1: // 市级\n          fetchData = this.fetchCities(value);\n          break;\n        case 2: // 区县级\n          fetchData = this.fetchCounties(value);\n          break;\n        case 3: // 乡镇级\n          fetchData = this.fetchTowns(value);\n          break;\n        case 4: // 村庄级\n          fetchData = this.fetchVillages(value);\n          break;\n        default:\n          resolve([]);\n          return;\n      }\n\n      // 获取数据后，通过 resolve 函数返回节点数据\n      fetchData.then(data => {\n        resolve(data); // 返回数据\n      }).catch(error => {\n        console.error(error);\n        resolve([]); // 如果请求失败，返回空数组\n      });\n    },\n    lazyLoadSourceData(node, resolve) {\n      const { level, value } = node;  // 获取当前节点的级别和选中的值\n      let fetchData;\n      console.log(`Lazy load triggered for level: ${level}, value: ${value}`);\n      // 根据级别来判断加载哪个数据（大类 -> 子类）\n      switch (level) {\n        case 0: // 大类\n          fetchData = this.fetchSources();\n          break;\n        case 1: // 子类\n          fetchData = this.fetchSubSources(value);\n          break;\n        default:\n          resolve([]);\n          return;\n      }\n\n      // 获取数据后，通过 resolve 函数返回节点数据\n      fetchData.then(data => {\n        resolve(data); // 返回数据\n      }).catch(error => {\n        console.error(error);\n        resolve([]); // 如果请求失败，返回空数组\n      });\n    },\n    lazyLoadDisasterTypeData(node, resolve) {\n      const { level, value } = node;  // 获取当前节点的级别和选中的值\n      let fetchData;\n      // 根据级别来判断加载哪个数据（大类 -> 子类）\n      switch (level) {\n        case 0: // 大类\n          fetchData = this.fetchDisasterTypes();\n          break;\n        case 1: // 子类\n          fetchData = this.fetchSubDisasterTypes(value);\n          break;\n        default:\n          resolve([]);\n          return;\n      }\n\n      // 获取数据后，通过 resolve 函数返回节点数据\n      fetchData.then(data => {\n        resolve(data); // 返回数据\n      }).catch(error => {\n        console.error(error);\n        resolve([]); // 如果请求失败，返回空数组\n      });\n    },\n    // 获取省份数据\n    async fetchProvinces() {\n      try {\n        const response = await request.get('http://localhost:8080/api/areas/getProvinces');\n        return response.data;\n      } catch (error) {\n        console.error('Error fetching provinces:', error);\n      }\n    },\n\n    // 获取城市数据\n    async fetchCities(provinceCode) {\n      try {\n        const response = await request.get(`http://localhost:8080/api/areas/getCities?provinceCode=${provinceCode}`);\n        return response.data;\n      } catch (error) {\n        console.error('Error fetching cities:', error);\n      }\n    },\n\n    // 获取县区数据\n    async fetchCounties(cityCode) {\n      try {\n        // 调用后端接口获取县区数据\n        const response = await request.get(`http://localhost:8080/api/areas/getCounties?cityCode=${cityCode}`);\n        return response.data;  // 返回后端的数据，格式与后端一致\n      } catch (error) {\n        console.error('Error fetching counties:', error);\n      }\n    },\n\n    // 获取乡镇数据\n    async fetchTowns(areaCode) {\n      try {\n        // 调用后端接口获取乡镇数据\n        const response = await request.get(`http://localhost:8080/api/areas/getTowns?areaCode=${areaCode}`);\n        return response.data;  // 返回后端的数据，格式与后端一致\n      } catch (error) {\n        console.error('Error fetching towns:', error);\n      }\n    },\n\n\n    // 获取村庄数据\n    async fetchVillages(streetCode) {\n      try {\n        const response = await request.get(`http://localhost:8080/api/areas/getVillages?streetCode=${streetCode}`);\n        return response.data;\n\n        return data.map(item => {\n          return {\n            code: item.code,\n            name: item.name,\n            leaf: true // 最后一级，为叶子节点\n          }\n        });\n      } catch (error) {\n        console.error('Error fetching villages:', error);\n      }\n    },\n\n    // 获取来源大类\n    async fetchSources() {\n      try {\n        const sourcesResponse = await request.get('http://localhost:8080/disaster/sources');\n        const sourcesNameResponse = await request.get('http://localhost:8080/disaster/sourcesName');\n        console.log(\"Source:\", sourcesResponse.data);\n        console.log(\"SourceName\", sourcesNameResponse);\n        this.SourcesName = sourcesNameResponse.data[1].name;\n        console.log(\"SourceName\", this.SourcesName);\n        return sourcesResponse.data; // 从后端获取数据\n        console.log(\"Source:\", sourcesResponse.data);\n      } catch (error) {\n        console.error('Error fetching sources:', error);\n      }\n    },\n\n    // 获取来源子类\n    async fetchSubSources(sourceCode) {\n      try {\n        const subSourcesResponse = await request.get('http://localhost:8080/disaster/subSources', {\n          params: { sourceCode }  // 确保传递了正确的 sourceCode\n        });\n        const subSourcesNameResponse = await request.get('http://localhost:8080/disaster/subSourcesName');\n        this.subSourcesName = subSourcesNameResponse.data[sourceCode].name;\n        console.log(\"SourceName\", this.subSourcesName);\n        return subSourcesResponse.data; // 从后端获取数据\n      } catch (error) {\n        console.error('Error fetching sub-sources:', error);\n      }\n    },\n\n    // 获取灾情类型大类\n    async fetchDisasterTypes() {\n      try {\n        const disasterTypesResponse = await request.get('http://localhost:8080/disaster/types');\n        this.disasterTypes = disasterTypesResponse.data;  // 更新 disasterTypes\n        return disasterTypesResponse.data; // 从后端获取数据\n      } catch (error) {\n        console.error('Error fetching disaster types:', error);\n      }\n    },\n\n    // 获取子灾情类型大类\n    async fetchSubDisasterTypes(disasterCode) {\n      try {\n        const subDisasterTypesResponse = await request.get('http://localhost:8080/disaster/subTypes', {\n          params: { disasterCode }  // 传递 disasterCode 作为查询参数\n        });\n        return subDisasterTypesResponse.data; // 从后端获取数据\n      } catch (error) {\n        console.error('Error fetching sub-disaster types:', error);\n      }\n    },\n\n    // 级联选择变化时的处理\n    handleCascadeChange(node) {\n      // 此处获取的是最后一级选中的数据\n      // this.form.location = node[node.length - 1];\n      const selectedData = node[node.length - 1];\n      console.log(selectedData);\n    },\n    handleSourceChange(node) {\n      // 此处获取的是最后一级选中的数据\n      // this.form.source = node[node.length - 1];\n      const selectedData = node[node.length - 1];\n      console.log(selectedData);\n    },\n    handleDisasterTypeChange(node) {\n      console.log('选中的节点数组:', node);\n      console.log('灾情类型数据:', this.disasterTypes);\n      if (node && node.length > 0) {\n        // 假设你只需要第一个选中的节点的 label\n        const selectedDisasterTypeCode = node[0];  // 获取第一个选中的值\n\n        console.log('灾情类型编码:', selectedDisasterTypeCode);\n        // 根据 selectedDisasterTypeCode 获取对应的 label\n        let selectedLabel = '';\n        this.getLabelFromDisasterTypes(selectedDisasterTypeCode, (label) => {\n          selectedLabel = label;\n          console.log('灾情类型的 label:', selectedLabel);\n        });\n\n        if (this.isSelectingDisasterType) {\n          // 如果需要继续其他操作\n          if (selectedDisasterTypeCode !== this.selectedDisasterTypeCode) {\n            this.selectedDisasterTypeCode = selectedDisasterTypeCode;\n            this.fetchIndicators(selectedDisasterTypeCode);\n          }\n        } else {\n          console.log('当前是选择灾情子类型，不请求灾情指标');\n        }\n      } else {\n        console.warn('没有选择灾情类型');\n      }\n    },\n\n    // 根据编码查找对应的label\n    getLabelFromDisasterTypes(code, callback) {\n      // 假设 disasterTypes 是你所有灾情类型数据的集合，且每个项有 'code' 和 'name'\n      const foundItem = this.disasterTypes.find(item => item.code === code);\n      if (foundItem) {\n        callback(foundItem.name);  // 调用回调函数返回 label\n      } else {\n        console.warn('找不到对应的灾情类型');\n      }\n    },\n\n    handleDisasterSubTypeChange(node) {\n      // 打印选中的节点数组\n      console.log('选中的子节点数组:', node);\n\n      if (node && node.length > 0) {\n        const selectedDisasterSubTypeCode = node[0];  // 获取选中的灾情子类型编码\n\n        console.log('灾情子类型编码:', selectedDisasterSubTypeCode);\n\n        // 只在选择灾情子类型时，更新灾情子类型编码\n        if (selectedDisasterSubTypeCode !== this.selectedDisasterSubTypeCode) {\n          this.selectedDisasterSubTypeCode = selectedDisasterSubTypeCode;\n          // 不请求灾情指标，只更新子类型编码\n          console.log('灾情子类型已更新:', selectedDisasterSubTypeCode);\n        }\n      } else {\n        console.warn('没有选择灾情子类型');\n      }\n    },\n\n    // 这个方法请求灾情指标，只有在选择灾情类型时触发\n    async fetchIndicators(disasterTypeCode) {\n      try {\n        console.log('请求灾情指标时传递的灾情类型编码:', disasterTypeCode);\n        const response = await request.get('http://localhost:8080/disaster/indicators', {\n          params: { sourceCode: disasterTypeCode }\n        });\n\n        if (response.data) {\n          // 获取到数据后，存储到 indicators 中\n          this.indicators = response.data;\n          console.log('已获取灾情指标:', this.indicators);\n        } else {\n          console.warn('没有获取到灾情指标数据');\n          this.indicators = [];  // 如果没有数据，设置为空数组\n        }\n      } catch (error) {\n        console.error('获取灾情指标时出错:', error);\n        this.indicators = [];  // 如果出现错误，设置为空数组\n      }\n    },\n\n    // 获取后端的地理位置、灾情来源等数据\n    async initData() {\n      try {\n        const carriersResponse = await request.get('http://localhost:8080/disaster/carriers');\n        //const indicatorsResponse = await request.get('http://localhost:8080/disaster/indicators');\n\n        // 设置其他下拉选项数据\n        this.carriers = carriersResponse.data;\n        //this.indicators = indicatorsResponse.data;\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n\n    // 生成灾情码并生成符合格式的数据\n    generateDisasterCode() {\n      const location = this.form.location.join('/');  // 获取省市区县的组合\n      console.log(\"地理位置\", Location);\n      const time = this.form.time.toISOString().split('T')[0].replace(/-/g, '');;\n      const source = this.form.source;\n      const carrier = this.form.carrier;\n      const disasterType = this.form.disasterType;\n      const indicator = this.form.indicator;\n      const description = this.form.description;\n\n      // 生成符合要求的结构\n\n      // const disasterData = {\n      //   province: location.split('/')[0],  // 北京\n      //   city: location.split('/')[1],  // 北京市\n      //   country: location.split('/')[2],  // 门头沟区\n      //   town: location.split('/')[3],  // 永定路街道\n      //   village: location.split('/')[4],  // 采石路7号社区居委会\n      //   category: disasterType,  // 房屋破坏\n      //   date: time,  // 2024-12-24T14:00:00\n      //   location: location.split('/')[1],  // 北京市\n      //   detail: description,  // 发生山洪\n      //   reportingUnit: this.form.source,  // 门头沟地质局\n      //   sourceCategory: this.SourcesName,  // 业务报送数据\n      //   sourceSubCategory: this.subSourcesName,  // 灾情快速上报接收处理系统\n      //   carrierForm: carrier,  // 图像\n      //   link: null,  // 传输数据链接\n      //   disasterMajorCategory: disasterType,  // 房屋破坏\n      //   disasterSubCategory: '土木',  // 固定示例，若有其他信息可以动态填充\n      //   disasterIndicator: indicator  // 一般损坏面积\n      // };\n      const disasterData = {\n        province: \"北京市\",  // 北京\n        city: \"市辖区\",  // 北京市\n        country: \"东城区\",  // 门头沟区\n        town: \"东华门街道\",  // 永定路街道\n        village: \"多福巷社区居委会\",  // 采石路7号社区居委会\n        category: disasterType,  // 房屋破坏\n        date: time,  // 2024-12-24T14:00:00\n        location: location,  // 北京市\n        detail: description,  // 发生山洪\n        reportingUnit: this.form.source,  // 门头沟地质局\n        sourceCategory: this.SourcesName,  // 业务报送数据\n        sourceSubCategory: this.subSourcesName,  // 灾情快速上报接收处理系统\n        carrierForm: carrier,  // 图像\n        link: null,  // 传输数据链接\n        disasterMajorCategory: disasterType,  // 房屋破坏\n        disasterSubCategory: \"土木\",  // 固定示例，若有其他信息可以动态填充\n        disasterIndicator: indicator  // 一般损坏面积\n      };\n\n      this.sendDisasterData(disasterData);  // 调用发送接口方法\n    },\n\n    // 发送数据到后端接口\n    async sendDisasterData(data) {\n      try {\n        // 发送 POST 请求到后端接口\n        const response = await request.post('http://localhost:8080/add', data);\n        console.log('数据发送成功:', response);\n        console.log(\"发送的灾情信息：\", data);\n\n        // 检查 response.data 是否有效\n        if (response && response.data) {\n          // 如果返回的 code 是 0，则表示成功\n          if (response.data.code === \"0\") {\n            // 获取返回的灾情码并填充到 disasterCode 输入框\n            this.disasterCode = response.data.data || '无灾情码返回'; // 如果没有返回数据，默认显示 '无灾情码返回'\n            console.log('生成的灾情码:', this.disasterCode);\n          } else {\n            // 如果 code 不是 0，显示错误信息\n            console.error('错误:', response.data.msg || '未知错误');\n          }\n        } else {\n          console.error('响应数据无效');\n        }\n      } catch (error) {\n        // 捕获并打印错误信息\n        console.error('数据发送失败:', error);\n      }\n    },\n\n\n    // 解码灾情码\n    async decodeDisasterCode() {\n      try {\n        // 发起请求，获取解码后的灾情信息\n        const response = await request.get(`http://localhost:8080/all?disasterCode=${this.disasterCodeInput}`);\n\n        // 从后端响应中提取灾情信息字符串，并解析为对象\n        const disasterInfo = response.data.data;\n\n        // 将灾情信息字符串转换为对象\n        const disasterInfoObj = this.parseDisasterInfo(disasterInfo);\n\n        // 假设 disasterInfoObj 格式如下：{province: '河北省', city: '承德市', ... }\n        // 只填充前端需要的字段\n        this.decodedData = {\n          //...this.decodedData,  // 保留已有的数据\n          location: disasterInfoObj.location || '',\n          time: disasterInfoObj.date ? new Date(disasterInfoObj.date).toLocaleString() : '',  // 格式化时间\n          source: disasterInfoObj.sourceCategory || '',\n          carrier: disasterInfoObj.carrierForm || '',\n          disasterType: disasterInfoObj.disasterMajorCategory || '',\n          indicator: disasterInfoObj.disasterIndicator || '',\n          description: disasterInfoObj.detail || ''  // 假设为灾情描述字段\n        };\n      } catch (error) {\n        console.error('Error fetching disaster info:', error);\n      }\n    },\n\n    // 解析灾情信息字符串为对象\n    parseDisasterInfo(disasterInfoStr) {\n      // 使用正则表达式提取字段中的内容\n      const regex = /(\\w+)='([^']*)'/g;\n      let match;\n      const disasterInfoObj = {};\n\n      while ((match = regex.exec(disasterInfoStr)) !== null) {\n        disasterInfoObj[match[1]] = match[2];\n      }\n\n      return disasterInfoObj;\n    },\n\n\n\n    fileUploadSuccess(response) {\n      console.log('File uploaded successfully:', response);\n    },\n  },\n\n  mounted() {\n    this.initData();\n  }\n}\n</script>\n\n\n// 全局样式，可能有问题\n// https://www.cnblogs.com/alioth01/p/18527300\n<style>\n.form-card {\n  margin-top: 20px;\n}\n\n.form-title {\n  font-size: 18px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.disaster-code-display {\n  margin-top: 20px;\n}\n\n.el-radio input[aria-hidden=\"true\"] {\n  display: none !important;\n}\n\n.el-radio:focus:not(.is-focus):not(:active):not(.is-disabled) .el-radio__inner {\n  box-shadow: none !important;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}