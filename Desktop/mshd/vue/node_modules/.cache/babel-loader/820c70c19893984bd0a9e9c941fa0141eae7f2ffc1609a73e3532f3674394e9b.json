{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport request from \"@/utils/request\"; // 使用封装的 axios 实例\n\nexport default {\n  data() {\n    return {\n      form: {\n        location: [],\n        time: '',\n        source: '',\n        carrier: '',\n        disasterType: '',\n        indicator: '',\n        description: ''\n      },\n      disasterCode: '',\n      disasterCodeInput: '',\n      decodedData: {\n        location: '',\n        time: '',\n        source: '',\n        carrier: '',\n        disasterType: '',\n        indicator: '',\n        description: ''\n      },\n      locationOptions: [],\n      // 存储级联下拉框数据\n      uploadParams: {},\n      // 动态传递给后端的参数\n      filePath: '',\n      // 上传后的文件路径\n\n      // 完整的地理位置数据\n      sources: [],\n      carriers: [],\n      disasterTypes: [],\n      indicators: [],\n      cascaderProps: {\n        emitPath: true,\n        // 必须为 true\n        value: 'code',\n        // 绑定选择项的字段\n        label: 'name',\n        // 显示的标签字段\n        children: 'children' // 子项的字段名\n      }\n    };\n  },\n  methods: {\n    // 获取省份数据\n    async fetchProvinces() {\n      try {\n        const response = await request.get('http://localhost:8080/api/areas/getProvinces');\n        return response.data.map(province => ({\n          code: province.code,\n          name: province.name,\n          children: [] // 初始化为空，后续会填充城市数据\n        }));\n      } catch (error) {\n        console.error('Error fetching provinces:', error);\n      }\n    },\n    // 获取城市数据\n    async fetchCities(provinceCode) {\n      try {\n        const response = await request.get(`http://localhost:8080/api/areas/getCities?provinceCode=${provinceCode}`);\n        console.log(\"!!!!!!!!!!\", response.data);\n        return response.data.map(city => ({\n          code: city.code,\n          name: city.name,\n          children: ['hahaha'] // 初始化为空，后续会填充县区数据\n        }));\n      } catch (error) {\n        console.error('Error fetching cities:', error);\n      }\n    },\n    // 获取县区数据\n    async fetchCounties(cityCode) {\n      try {\n        const response = await request.get(`http://localhost:8080/api/areas/getCounties?cityCode=${cityCode}`);\n        return response.data.map(county => ({\n          code: county.code,\n          name: county.name,\n          children: [] // 初始化为空，后续会填充乡镇数据\n        }));\n      } catch (error) {\n        console.error('Error fetching counties:', error);\n      }\n    },\n    // 获取乡镇数据\n    async fetchTowns(areaCode) {\n      try {\n        const response = await request.get(`http://localhost:8080/api/areas/getTowns?areaCode=${areaCode}`);\n        return response.data.map(town => ({\n          code: town.code,\n          name: town.name,\n          children: [] // 初始化为空，后续会填充村庄数据\n        }));\n      } catch (error) {\n        console.error('Error fetching towns:', error);\n      }\n    },\n    // 获取村庄数据\n    async fetchVillages(streetCode) {\n      try {\n        const response = await request.get(`http://localhost:8080/api/areas/getVillages?streetCode=${streetCode}`);\n        return response.data.map(village => ({\n          code: village.code,\n          name: village.name\n        }));\n      } catch (error) {\n        console.error('Error fetching villages:', error);\n      }\n    },\n    // 级联选择变化时的处理\n    async handleCascaderChange(value) {\n      console.log('Cascader value changed:', value);\n      const selectedData = this.getSelectedData(value, this.locationOptions);\n      console.log('Selected Data:', selectedData);\n      const [provinceCode, cityCode, countyCode, townCode, villageCode] = value;\n      // 打印传入的provinceCode\n      console.log('Selected Province Code:', provinceCode);\n      if (provinceCode) {\n        const cities = await this.fetchCities(provinceCode);\n        console.log('cities in Selected Province :', cities);\n        this.updateChildren(selectedData, cities);\n      }\n      if (cityCode) {\n        const counties = await this.fetchCounties(cityCode);\n        this.updateChildren(selectedData, counties);\n      }\n      if (countyCode) {\n        const towns = await this.fetchTowns(countyCode);\n        this.updateChildren(selectedData, towns);\n      }\n      if (townCode) {\n        const villages = await this.fetchVillages(townCode);\n        this.updateChildren(selectedData, villages);\n      }\n    },\n    // 递归解析选中路径的数据\n    getSelectedData(value, options) {\n      let result = [];\n      let currentOptions = options;\n      for (let val of value) {\n        const current = currentOptions.find(option => option.value === val);\n        if (current) {\n          result.push(current);\n          currentOptions = current.children || []; // 如果有子节点，则继续递归\n        }\n      }\n      return result;\n    },\n    // 更新级联选项的子节点\n    updateChildren(selectedData, children) {\n      console.log('Selected Data:', selectedData);\n      console.log('children:', children);\n      selectedData.forEach(data => {\n        console.log('data:', data); // 打印每个数据项 \n        console.log('selectedData:', selectedData); // 打印 selectedData 数组 \n        const lastSelectedCode = selectedData[selectedData.length - 1]?.code;\n        console.log('Last selected code:', lastSelectedCode); // 打印最后一个选中的 code\n        if (data.code === selectedData[selectedData.length - 1].code) {\n          data.children = children.map(children => ({\n            value: children.code,\n            label: children.name,\n            children: children.children || []\n          }));\n          console.log('Updated Data:', data); // 看到更新后的数据\n        }\n      });\n    },\n    // 获取后端的地理位置、灾情来源等数据\n    async fetchData() {\n      try {\n        const sourcesResponse = await request.get('http://localhost:8080/disaster/sources');\n        //console.log('Selected Province Code:', provinceCode);\n\n        const carriersResponse = await request.get('http://localhost:8080/disaster/carriers');\n        const disasterTypesResponse = await request.get('http://localhost:8080/disaster/types');\n        const indicatorsResponse = await request.get('http://localhost:8080/disaster/indicators');\n        console.log('载体', carriersResponse);\n        console.log('灾情类型', disasterTypesResponse);\n        console.log('指标', indicatorsResponse);\n\n        // 设置其他下拉选项数据\n        this.sources = sourcesResponse.data;\n        this.carriers = carriersResponse.data;\n        this.disasterTypes = disasterTypesResponse.data;\n        this.indicators = indicatorsResponse.data;\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    // 生成灾情码\n    generateDisasterCode() {\n      const location = this.form.location.join('/');\n      const time = this.form.time;\n      const source = this.form.source;\n      const carrier = this.form.carrier;\n      const disasterType = this.form.disasterType;\n      const indicator = this.form.indicator;\n      const description = this.form.description;\n      this.disasterCode = `${location}|${time}|${source}|${carrier}|${disasterType}|${indicator}|${description}`;\n    },\n    // 上传灾情信息\n    async submitDisasterInfo() {\n      const disasterInfo = {\n        location: this.form.location.join('/'),\n        time: this.form.time,\n        source: this.form.source,\n        carrier: this.form.carrier,\n        disasterType: this.form.disasterType,\n        indicator: this.form.indicator,\n        description: this.form.description\n      };\n      try {\n        const response = await request.post('http://localhost:8080/add', disasterInfo);\n        console.log('Disaster information uploaded successfully:', response);\n      } catch (error) {\n        console.error('Error uploading disaster information:', error);\n      }\n    },\n    async fetchAllDisasterInfo() {\n      try {\n        const requestData = {\n          disasterCode: this.disasterCodeInput\n        };\n\n        // 发送 POST 请求\n        const response = await request.post('http://localhost:8080/decode', requestData, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log(\"Response from backend:\", response);\n        console.log(\"Response data:\", response.data);\n        console.log(\"Response data type:\", response.data.code);\n        if (response && response.data) {\n          // 后端返回的 `data` 是 JSON 对象，直接解析\n          const disasterInfo = response.data;\n\n          // 将解析后的字段赋值到 `decodedData`\n          this.decodedData = {\n            location: disasterInfo.location || \"\",\n            time: disasterInfo.date || \"\",\n            source: `${disasterInfo.sourceCategory || \"\"} - ${disasterInfo.sourceSubCategory || \"\"}`,\n            carrier: disasterInfo.carrierForm || \"\",\n            disasterType: `${disasterInfo.disasterMajorCategory || \"\"} - ${disasterInfo.disasterSubCategory || \"\"}`,\n            indicator: disasterInfo.disasterIndicator || \"\",\n            description: disasterInfo.detail || \"\"\n          };\n          console.log(\"Decoded disaster information:\", this.decodedData);\n        } else {\n          console.error(\"No response data received from backend.\");\n          this.$notify.error(\"未从后端接收到数据，请检查服务器！\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching all disaster information:\", error);\n        this.$notify.error(\"请求失败，请检查网络或后端服务！\");\n      }\n    },\n    // 自定义上传请求逻辑\n    async customUploadRequest({\n      file\n    }) {\n      // 获取灾情码\n      const disasterCode = this.disasterCodeInput;\n      if (!disasterCode) {\n        this.$notify.error(\"请先输入灾情码！\");\n        return;\n      }\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      formData.append(\"disasterCode\", disasterCode);\n      try {\n        // 调用后端上传接口\n        const response = await request.post(\"http://localhost:8080/files/upload\", formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        });\n        if (response.data.code === \"0\") {\n          // 保存文件路径\n          this.filePath = response.data.data.link || \"\";\n          this.$notify.success(\"文件上传成功！\");\n          // 调用文件解码接口\n          this.decodeFile();\n        } else {\n          this.$notify.error(response.data.msg || \"文件上传失败！\");\n        }\n      } catch (error) {\n        console.error(\"File upload failed:\", error);\n        this.$notify.error(\"文件上传失败，请检查后端服务！\");\n      }\n    },\n    // 文件解码方法\n    async decodeFile() {\n      try {\n        const decodeResponse = await request.post(\"http://localhost:8080/decodeFromFile\", {\n          disasterCode: this.disasterCodeInput,\n          fileLink: this.filePath\n        });\n        if (decodeResponse.data.code === \"0\") {\n          this.$notify.success(\"解码并存储灾情信息成功！\");\n        } else {\n          this.$notify.error(decodeResponse.data.msg || \"解码失败！\");\n        }\n      } catch (error) {\n        console.error(\"Error decoding and storing disaster info:\", error);\n        this.$notify.error(\"解码失败，请检查后端服务！\");\n      }\n    },\n    // 在上传文件前动态设置参数\n    beforeFileUpload(file) {\n      const fileName = file.name;\n      const fileParts = fileName.split(\".\"); // 拆分文件名\n      const disasterCode = fileParts[0]; // 假定文件名格式为: 灾情编码.文件格式\n\n      if (!disasterCode) {\n        this.$notify.error('文件名格式错误，请确保文件名为 \"灾情编码.文件格式\"');\n        return false; // 取消上传\n      }\n\n      // 保存灾情编码到变量\n      this.disasterCodeInput = disasterCode;\n      return true; // 允许上传\n    }\n  },\n  mounted() {\n    // 获取初始的省份数据\n    this.fetchProvinces().then(provinces => {\n      this.locationOptions = provinces;\n    }).catch(error => {\n      console.error(\"Error fetching provinces:\", error);\n    });\n    this.fetchData().catch(error => {\n      console.error(\"Error fetching other data:\", error);\n    });\n  }\n};","map":{"version":3,"names":["request","data","form","location","time","source","carrier","disasterType","indicator","description","disasterCode","disasterCodeInput","decodedData","locationOptions","uploadParams","filePath","sources","carriers","disasterTypes","indicators","cascaderProps","emitPath","value","label","children","methods","fetchProvinces","response","get","map","province","code","name","error","console","fetchCities","provinceCode","log","city","fetchCounties","cityCode","county","fetchTowns","areaCode","town","fetchVillages","streetCode","village","handleCascaderChange","selectedData","getSelectedData","countyCode","townCode","villageCode","cities","updateChildren","counties","towns","villages","options","result","currentOptions","val","current","find","option","push","forEach","lastSelectedCode","length","fetchData","sourcesResponse","carriersResponse","disasterTypesResponse","indicatorsResponse","generateDisasterCode","join","submitDisasterInfo","disasterInfo","post","fetchAllDisasterInfo","requestData","headers","date","sourceCategory","sourceSubCategory","carrierForm","disasterMajorCategory","disasterSubCategory","disasterIndicator","detail","$notify","customUploadRequest","file","formData","FormData","append","link","success","decodeFile","msg","decodeResponse","fileLink","beforeFileUpload","fileName","fileParts","split","mounted","then","provinces","catch"],"sources":["src/views/manager/Upload.vue"],"sourcesContent":["<template>\n  <div class=\"main-body-content\">\n    <div class=\"main-body-header\">灾情信息上传</div>\n\n    <!-- 编码部分 -->\n    <el-card class=\"form-card\" :body-style=\"{ padding: '20px' }\">\n      <div class=\"form-title\">灾情信息编码</div>\n      <el-form :model=\"form\" label-position=\"right\" label-width=\"120px\">\n        <el-row>\n          <!-- 地理位置 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情地理位置\">\n              <el-cascader size=\"small\" v-model=\"form.location\" :options=\"locationOptions\" :props=\"cascaderProps\"\n                placeholder=\"请选择完整的地理位置\" @change=\"(value, selectedData) => handleCascaderChange(value, selectedData)\"\n                change-on-select></el-cascader></el-form-item>\n          </el-col>\n\n\n\n          <!-- 时间 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情时间\">\n              <el-date-picker v-model=\"form.time\" type=\"datetime\" placeholder=\"请选择灾情时间\" size=\"small\"></el-date-picker>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <el-row>\n          <!-- 来源 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情来源\">\n              <el-select size=\"small\" v-model=\"form.source\" placeholder=\"请选择灾情来源\">\n                <el-option v-for=\"(source, index) in sources\" :key=\"index\" :label=\"source\" :value=\"source\"></el-option>\n              </el-select>\n            </el-form-item>\n          </el-col>\n\n          <!-- 载体类型 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情载体类型\">\n              <el-select size=\"small\" v-model=\"form.carrier\" placeholder=\"请选择灾情载体类型\">\n                <el-option v-for=\"(carrier, index) in carriers\" :key=\"index\" :label=\"carrier\"\n                  :value=\"carrier\"></el-option>\n              </el-select>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <el-row>\n          <!-- 灾情分类 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情分类\">\n              <el-select size=\"small\" v-model=\"form.disasterType\" placeholder=\"请选择灾情分类\">\n                <el-option v-for=\"(type, index) in disasterTypes\" :key=\"index\" :label=\"type\" :value=\"type\"></el-option>\n              </el-select>\n            </el-form-item>\n          </el-col>\n\n          <!-- 灾情指标分类 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情指标分类\">\n              <el-select size=\"small\" v-model=\"form.indicator\" placeholder=\"请选择灾情指标分类\">\n                <el-option v-for=\"(indicator, index) in indicators\" :key=\"index\" :label=\"indicator\"\n                  :value=\"indicator\"></el-option>\n              </el-select>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <!-- 富文本框，放在编码部分 -->\n        <el-form-item label=\"灾情描述\" style=\"margin-top: 10px;\">\n          <el-input type=\"textarea\" size=\"small\" v-model=\"form.description\" placeholder=\"请输入灾情描述\" rows=\"4\"\n            style=\"resize: none; width: 100%;\"></el-input>\n        </el-form-item>\n\n        <!-- 生成灾情码按钮 -->\n        <el-form-item>\n          <el-button size=\"small\" type=\"primary\" @click=\"generateDisasterCode\">生成灾情码</el-button>\n        </el-form-item>\n      </el-form>\n\n      <div class=\"disaster-code-display\">\n        <el-input size=\"small\" :value=\"disasterCode\" placeholder=\"生成的灾情码\" readonly></el-input>\n      </div>\n    </el-card>\n\n    <el-card class=\"form-card\" :body-style=\"{ padding: '20px' }\">\n      <div class=\"form-title\">灾情信息解码</div>\n      <el-form :model=\"form\" label-position=\"right\" label-width=\"120px\">\n        <el-form-item label=\"灾情码\">\n          <el-input size=\"small\" v-model=\"disasterCodeInput\" placeholder=\"请输入灾情码\"></el-input>\n        </el-form-item>\n\n\n\n\n        <el-form-item label=\"上传文件\">\n          <el-upload :http-request=\"customUploadRequest\" :before-upload=\"beforeFileUpload\" list-type=\"text\"\n            style=\"width: 100%;\">\n            <el-button size=\"small\" type=\"success\">点击上传文件</el-button>\n          </el-upload>\n        </el-form-item>\n\n      </el-form>\n    </el-card>\n\n\n    <el-form-item style=\"margin-top: 15px;\">\n      <el-button size=\"small\" type=\"primary\" @click=\"fetchAllDisasterInfo\">解码灾情码</el-button>\n    </el-form-item>\n\n    <el-row>\n      <!-- 解码后的地理位置 -->\n      <el-col :span=\"12\">\n        <el-form-item label=\"灾情地理位置\">\n          <el-input size=\"small\" v-model=\"decodedData.location\" readonly></el-input>\n        </el-form-item>\n      </el-col>\n\n      <!-- 解码后的时间 -->\n      <el-col :span=\"12\">\n        <el-form-item label=\"灾情时间\">\n          <el-input size=\"small\" v-model=\"decodedData.time\" readonly></el-input>\n        </el-form-item>\n      </el-col>\n    </el-row>\n\n    <el-row>\n      <!-- 解码后的来源 -->\n      <el-col :span=\"12\">\n        <el-form-item label=\"灾情来源\">\n          <el-input size=\"small\" v-model=\"decodedData.source\" readonly></el-input>\n        </el-form-item>\n      </el-col>\n\n      <!-- 解码后的载体类型 -->\n      <el-col :span=\"12\">\n        <el-form-item label=\"灾情载体类型\">\n          <el-input size=\"small\" v-model=\"decodedData.carrier\" readonly></el-input>\n        </el-form-item>\n      </el-col>\n    </el-row>\n\n    <el-row>\n      <!-- 解码后的灾情分类 -->\n      <el-col :span=\"12\">\n        <el-form-item label=\"灾情分类\">\n          <el-input size=\"small\" v-model=\"decodedData.disasterType\" readonly></el-input>\n        </el-form-item>\n      </el-col>\n\n      <!-- 解码后的灾情指标分类 -->\n      <el-col :span=\"12\">\n        <el-form-item label=\"灾情指标分类\">\n          <el-input size=\"small\" v-model=\"decodedData.indicator\" readonly></el-input>\n        </el-form-item>\n      </el-col>\n    </el-row>\n\n    <!-- 解码后的描述 -->\n    <el-form-item label=\"灾情描述\">\n      <el-input type=\"textarea\" size=\"small\" v-model=\"decodedData.description\" readonly></el-input>\n    </el-form-item>\n    </el-form>\n    </el-card>\n\n  </div>\n</template>\n\n<script>\nimport request from \"@/utils/request\";  // 使用封装的 axios 实例\n\nexport default {\n  data() {\n    return {\n      form: {\n        location: [],\n        time: '',\n        source: '',\n        carrier: '',\n        disasterType: '',\n        indicator: '',\n        description: ''\n      },\n      disasterCode: '',\n      disasterCodeInput: '',\n      decodedData: {\n        location: '',\n        time: '',\n        source: '',\n        carrier: '',\n        disasterType: '',\n        indicator: '',\n        description: ''\n      },\n      locationOptions: [],  // 存储级联下拉框数据\n      uploadParams: {}, // 动态传递给后端的参数\n      filePath: '', // 上传后的文件路径\n\n\n      // 完整的地理位置数据\n      sources: [],\n      carriers: [],\n      disasterTypes: [],\n      indicators: [],\n      cascaderProps: {\n        emitPath: true, // 必须为 true\n        value: 'code',  // 绑定选择项的字段\n        label: 'name',  // 显示的标签字段\n        children: 'children',  // 子项的字段名\n      }\n    };\n  },\n  methods: {\n    // 获取省份数据\n    async fetchProvinces() {\n      try {\n        const response = await request.get('http://localhost:8080/api/areas/getProvinces');\n        return response.data.map(province => ({\n          code: province.code,\n          name: province.name,\n          children: []  // 初始化为空，后续会填充城市数据\n        }));\n      } catch (error) {\n        console.error('Error fetching provinces:', error);\n      }\n    },\n\n    // 获取城市数据\n    async fetchCities(provinceCode) {\n      try {\n        const response = await request.get(`http://localhost:8080/api/areas/getCities?provinceCode=${provinceCode}`);\n        console.log(\"!!!!!!!!!!\", response.data);\n        return response.data.map(city => ({\n          code: city.code,\n          name: city.name,\n          children: ['hahaha']  // 初始化为空，后续会填充县区数据\n        }));\n      } catch (error) {\n        console.error('Error fetching cities:', error);\n      }\n    },\n\n    // 获取县区数据\n    async fetchCounties(cityCode) {\n      try {\n        const response = await request.get(`http://localhost:8080/api/areas/getCounties?cityCode=${cityCode}`);\n        return response.data.map(county => ({\n          code: county.code,\n          name: county.name,\n          children: []  // 初始化为空，后续会填充乡镇数据\n        }));\n      } catch (error) {\n        console.error('Error fetching counties:', error);\n      }\n    },\n\n    // 获取乡镇数据\n    async fetchTowns(areaCode) {\n      try {\n        const response = await request.get(`http://localhost:8080/api/areas/getTowns?areaCode=${areaCode}`);\n        return response.data.map(town => ({\n          code: town.code,\n          name: town.name,\n          children: []  // 初始化为空，后续会填充村庄数据\n        }));\n      } catch (error) {\n        console.error('Error fetching towns:', error);\n      }\n    },\n\n    // 获取村庄数据\n    async fetchVillages(streetCode) {\n      try {\n        const response = await request.get(`http://localhost:8080/api/areas/getVillages?streetCode=${streetCode}`);\n        return response.data.map(village => ({\n          code: village.code,\n          name: village.name\n        }));\n      } catch (error) {\n        console.error('Error fetching villages:', error);\n      }\n    },\n\n    // 级联选择变化时的处理\n    async handleCascaderChange(value) {\n      console.log('Cascader value changed:', value);\n      const selectedData = this.getSelectedData(value, this.locationOptions);\n      console.log('Selected Data:', selectedData);\n      const [provinceCode, cityCode, countyCode, townCode, villageCode] = value;\n      // 打印传入的provinceCode\n      console.log('Selected Province Code:', provinceCode);\n\n      if (provinceCode) {\n        const cities = await this.fetchCities(provinceCode);\n        console.log('cities in Selected Province :', cities);\n        this.updateChildren(selectedData, cities);\n      }\n      if (cityCode) {\n        const counties = await this.fetchCounties(cityCode);\n        this.updateChildren(selectedData, counties);\n      }\n      if (countyCode) {\n        const towns = await this.fetchTowns(countyCode);\n        this.updateChildren(selectedData, towns);\n      }\n      if (townCode) {\n        const villages = await this.fetchVillages(townCode);\n        this.updateChildren(selectedData, villages);\n      }\n    },\n    // 递归解析选中路径的数据\n    getSelectedData(value, options) {\n      let result = [];\n      let currentOptions = options;\n\n      for (let val of value) {\n        const current = currentOptions.find(option => option.value === val);\n        if (current) {\n          result.push(current);\n          currentOptions = current.children || []; // 如果有子节点，则继续递归\n        }\n      }\n\n      return result;\n    },\n    // 更新级联选项的子节点\n    updateChildren(selectedData, children) {\n      console.log('Selected Data:', selectedData);\n      console.log('children:', children);\n\n      selectedData.forEach(data => {\n        console.log('data:', data); // 打印每个数据项 \n        console.log('selectedData:', selectedData); // 打印 selectedData 数组 \n        const lastSelectedCode = selectedData[selectedData.length - 1]?.code;\n        console.log('Last selected code:', lastSelectedCode); // 打印最后一个选中的 code\n        if (data.code === selectedData[selectedData.length - 1].code) {\n          data.children = children.map(children => ({\n            value: children.code,\n            label: children.name,\n            children: children.children || []\n\n          }));\n          console.log('Updated Data:', data);  // 看到更新后的数据\n        }\n      });\n    },\n\n    // 获取后端的地理位置、灾情来源等数据\n    async fetchData() {\n      try {\n        const sourcesResponse = await request.get('http://localhost:8080/disaster/sources');\n        //console.log('Selected Province Code:', provinceCode);\n\n        const carriersResponse = await request.get('http://localhost:8080/disaster/carriers');\n        const disasterTypesResponse = await request.get('http://localhost:8080/disaster/types');\n        const indicatorsResponse = await request.get('http://localhost:8080/disaster/indicators');\n        console.log('载体', carriersResponse);\n        console.log('灾情类型', disasterTypesResponse);\n        console.log('指标', indicatorsResponse);\n\n        // 设置其他下拉选项数据\n        this.sources = sourcesResponse.data;\n        this.carriers = carriersResponse.data;\n        this.disasterTypes = disasterTypesResponse.data;\n        this.indicators = indicatorsResponse.data;\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n\n    // 生成灾情码\n    generateDisasterCode() {\n      const location = this.form.location.join('/');\n      const time = this.form.time;\n      const source = this.form.source;\n      const carrier = this.form.carrier;\n      const disasterType = this.form.disasterType;\n      const indicator = this.form.indicator;\n      const description = this.form.description;\n\n      this.disasterCode = `${location}|${time}|${source}|${carrier}|${disasterType}|${indicator}|${description}`;\n    },\n\n\n\n    // 上传灾情信息\n    async submitDisasterInfo() {\n      const disasterInfo = {\n        location: this.form.location.join('/'),\n        time: this.form.time,\n        source: this.form.source,\n        carrier: this.form.carrier,\n        disasterType: this.form.disasterType,\n        indicator: this.form.indicator,\n        description: this.form.description\n      };\n\n      try {\n        const response = await request.post('http://localhost:8080/add', disasterInfo);\n        console.log('Disaster information uploaded successfully:', response);\n      } catch (error) {\n        console.error('Error uploading disaster information:', error);\n      }\n    },\n    async fetchAllDisasterInfo() {\n      try {\n        const requestData = {\n          disasterCode: this.disasterCodeInput\n        };\n\n        // 发送 POST 请求\n        const response = await request.post('http://localhost:8080/decode', requestData, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        console.log(\"Response from backend:\", response);\n        console.log(\"Response data:\", response.data);\n        console.log(\"Response data type:\", response.data.code);\n\n        if (response && response.data) {\n\n          // 后端返回的 `data` 是 JSON 对象，直接解析\n          const disasterInfo = response.data;\n\n          // 将解析后的字段赋值到 `decodedData`\n          this.decodedData = {\n            location: disasterInfo.location || \"\",\n            time: disasterInfo.date || \"\",\n            source: `${disasterInfo.sourceCategory || \"\"} - ${disasterInfo.sourceSubCategory || \"\"}`,\n            carrier: disasterInfo.carrierForm || \"\",\n            disasterType: `${disasterInfo.disasterMajorCategory || \"\"} - ${disasterInfo.disasterSubCategory || \"\"}`,\n            indicator: disasterInfo.disasterIndicator || \"\",\n            description: disasterInfo.detail || \"\"\n          };\n\n          console.log(\"Decoded disaster information:\", this.decodedData);\n\n        } else {\n          console.error(\"No response data received from backend.\");\n          this.$notify.error(\"未从后端接收到数据，请检查服务器！\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching all disaster information:\", error);\n        this.$notify.error(\"请求失败，请检查网络或后端服务！\");\n      }\n    },\n\n    // 自定义上传请求逻辑\n    async customUploadRequest({ file }) {\n      // 获取灾情码\n      const disasterCode = this.disasterCodeInput;\n\n      if (!disasterCode) {\n        this.$notify.error(\"请先输入灾情码！\");\n        return;\n      }\n\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      formData.append(\"disasterCode\", disasterCode);\n\n      try {\n        // 调用后端上传接口\n        const response = await request.post(\"http://localhost:8080/files/upload\", formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\",\n          },\n        });\n\n        if (response.data.code === \"0\") {\n          // 保存文件路径\n          this.filePath = response.data.data.link || \"\";\n          this.$notify.success(\"文件上传成功！\");\n          // 调用文件解码接口\n          this.decodeFile();\n        } else {\n          this.$notify.error(response.data.msg || \"文件上传失败！\");\n        }\n      } catch (error) {\n        console.error(\"File upload failed:\", error);\n        this.$notify.error(\"文件上传失败，请检查后端服务！\");\n      }\n    },\n\n    // 文件解码方法\n    async decodeFile() {\n      try {\n        const decodeResponse = await request.post(\"http://localhost:8080/decodeFromFile\", {\n          disasterCode: this.disasterCodeInput,\n          fileLink: this.filePath,\n        });\n\n        if (decodeResponse.data.code === \"0\") {\n          this.$notify.success(\"解码并存储灾情信息成功！\");\n        } else {\n          this.$notify.error(decodeResponse.data.msg || \"解码失败！\");\n        }\n      } catch (error) {\n        console.error(\"Error decoding and storing disaster info:\", error);\n        this.$notify.error(\"解码失败，请检查后端服务！\");\n      }\n    },\n\n    // 在上传文件前动态设置参数\n    beforeFileUpload(file) {\n      const fileName = file.name;\n      const fileParts = fileName.split(\".\"); // 拆分文件名\n      const disasterCode = fileParts[0]; // 假定文件名格式为: 灾情编码.文件格式\n\n      if (!disasterCode) {\n        this.$notify.error('文件名格式错误，请确保文件名为 \"灾情编码.文件格式\"');\n        return false; // 取消上传\n      }\n\n      // 保存灾情编码到变量\n      this.disasterCodeInput = disasterCode;\n\n      return true; // 允许上传\n    },\n\n\n  },\n\n  mounted() {\n    // 获取初始的省份数据\n    this.fetchProvinces()\n      .then(provinces => {\n        this.locationOptions = provinces;\n      })\n      .catch(error => {\n        console.error(\"Error fetching provinces:\", error);\n      });\n\n    this.fetchData().catch(error => {\n      console.error(\"Error fetching other data:\", error);\n    });\n  }\n}\n</script>\n\n\n<style scoped>\n.form-card {\n  margin-top: 20px;\n}\n\n.form-title {\n  font-size: 18px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.disaster-code-display {\n  margin-top: 20px;\n}\n</style>\n"],"mappings":";AA0KA,OAAAA,OAAA;;AAEA;EACAC,KAAA;IACA;MACAC,IAAA;QACAC,QAAA;QACAC,IAAA;QACAC,MAAA;QACAC,OAAA;QACAC,YAAA;QACAC,SAAA;QACAC,WAAA;MACA;MACAC,YAAA;MACAC,iBAAA;MACAC,WAAA;QACAT,QAAA;QACAC,IAAA;QACAC,MAAA;QACAC,OAAA;QACAC,YAAA;QACAC,SAAA;QACAC,WAAA;MACA;MACAI,eAAA;MAAA;MACAC,YAAA;MAAA;MACAC,QAAA;MAAA;;MAGA;MACAC,OAAA;MACAC,QAAA;MACAC,aAAA;MACAC,UAAA;MACAC,aAAA;QACAC,QAAA;QAAA;QACAC,KAAA;QAAA;QACAC,KAAA;QAAA;QACAC,QAAA;MACA;IACA;EACA;EACAC,OAAA;IACA;IACA,MAAAC,eAAA;MACA;QACA,MAAAC,QAAA,SAAA3B,OAAA,CAAA4B,GAAA;QACA,OAAAD,QAAA,CAAA1B,IAAA,CAAA4B,GAAA,CAAAC,QAAA;UACAC,IAAA,EAAAD,QAAA,CAAAC,IAAA;UACAC,IAAA,EAAAF,QAAA,CAAAE,IAAA;UACAR,QAAA;QACA;MACA,SAAAS,KAAA;QACAC,OAAA,CAAAD,KAAA,8BAAAA,KAAA;MACA;IACA;IAEA;IACA,MAAAE,YAAAC,YAAA;MACA;QACA,MAAAT,QAAA,SAAA3B,OAAA,CAAA4B,GAAA,2DAAAQ,YAAA;QACAF,OAAA,CAAAG,GAAA,eAAAV,QAAA,CAAA1B,IAAA;QACA,OAAA0B,QAAA,CAAA1B,IAAA,CAAA4B,GAAA,CAAAS,IAAA;UACAP,IAAA,EAAAO,IAAA,CAAAP,IAAA;UACAC,IAAA,EAAAM,IAAA,CAAAN,IAAA;UACAR,QAAA;QACA;MACA,SAAAS,KAAA;QACAC,OAAA,CAAAD,KAAA,2BAAAA,KAAA;MACA;IACA;IAEA;IACA,MAAAM,cAAAC,QAAA;MACA;QACA,MAAAb,QAAA,SAAA3B,OAAA,CAAA4B,GAAA,yDAAAY,QAAA;QACA,OAAAb,QAAA,CAAA1B,IAAA,CAAA4B,GAAA,CAAAY,MAAA;UACAV,IAAA,EAAAU,MAAA,CAAAV,IAAA;UACAC,IAAA,EAAAS,MAAA,CAAAT,IAAA;UACAR,QAAA;QACA;MACA,SAAAS,KAAA;QACAC,OAAA,CAAAD,KAAA,6BAAAA,KAAA;MACA;IACA;IAEA;IACA,MAAAS,WAAAC,QAAA;MACA;QACA,MAAAhB,QAAA,SAAA3B,OAAA,CAAA4B,GAAA,sDAAAe,QAAA;QACA,OAAAhB,QAAA,CAAA1B,IAAA,CAAA4B,GAAA,CAAAe,IAAA;UACAb,IAAA,EAAAa,IAAA,CAAAb,IAAA;UACAC,IAAA,EAAAY,IAAA,CAAAZ,IAAA;UACAR,QAAA;QACA;MACA,SAAAS,KAAA;QACAC,OAAA,CAAAD,KAAA,0BAAAA,KAAA;MACA;IACA;IAEA;IACA,MAAAY,cAAAC,UAAA;MACA;QACA,MAAAnB,QAAA,SAAA3B,OAAA,CAAA4B,GAAA,2DAAAkB,UAAA;QACA,OAAAnB,QAAA,CAAA1B,IAAA,CAAA4B,GAAA,CAAAkB,OAAA;UACAhB,IAAA,EAAAgB,OAAA,CAAAhB,IAAA;UACAC,IAAA,EAAAe,OAAA,CAAAf;QACA;MACA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,6BAAAA,KAAA;MACA;IACA;IAEA;IACA,MAAAe,qBAAA1B,KAAA;MACAY,OAAA,CAAAG,GAAA,4BAAAf,KAAA;MACA,MAAA2B,YAAA,QAAAC,eAAA,CAAA5B,KAAA,OAAAT,eAAA;MACAqB,OAAA,CAAAG,GAAA,mBAAAY,YAAA;MACA,OAAAb,YAAA,EAAAI,QAAA,EAAAW,UAAA,EAAAC,QAAA,EAAAC,WAAA,IAAA/B,KAAA;MACA;MACAY,OAAA,CAAAG,GAAA,4BAAAD,YAAA;MAEA,IAAAA,YAAA;QACA,MAAAkB,MAAA,cAAAnB,WAAA,CAAAC,YAAA;QACAF,OAAA,CAAAG,GAAA,kCAAAiB,MAAA;QACA,KAAAC,cAAA,CAAAN,YAAA,EAAAK,MAAA;MACA;MACA,IAAAd,QAAA;QACA,MAAAgB,QAAA,cAAAjB,aAAA,CAAAC,QAAA;QACA,KAAAe,cAAA,CAAAN,YAAA,EAAAO,QAAA;MACA;MACA,IAAAL,UAAA;QACA,MAAAM,KAAA,cAAAf,UAAA,CAAAS,UAAA;QACA,KAAAI,cAAA,CAAAN,YAAA,EAAAQ,KAAA;MACA;MACA,IAAAL,QAAA;QACA,MAAAM,QAAA,cAAAb,aAAA,CAAAO,QAAA;QACA,KAAAG,cAAA,CAAAN,YAAA,EAAAS,QAAA;MACA;IACA;IACA;IACAR,gBAAA5B,KAAA,EAAAqC,OAAA;MACA,IAAAC,MAAA;MACA,IAAAC,cAAA,GAAAF,OAAA;MAEA,SAAAG,GAAA,IAAAxC,KAAA;QACA,MAAAyC,OAAA,GAAAF,cAAA,CAAAG,IAAA,CAAAC,MAAA,IAAAA,MAAA,CAAA3C,KAAA,KAAAwC,GAAA;QACA,IAAAC,OAAA;UACAH,MAAA,CAAAM,IAAA,CAAAH,OAAA;UACAF,cAAA,GAAAE,OAAA,CAAAvC,QAAA;QACA;MACA;MAEA,OAAAoC,MAAA;IACA;IACA;IACAL,eAAAN,YAAA,EAAAzB,QAAA;MACAU,OAAA,CAAAG,GAAA,mBAAAY,YAAA;MACAf,OAAA,CAAAG,GAAA,cAAAb,QAAA;MAEAyB,YAAA,CAAAkB,OAAA,CAAAlE,IAAA;QACAiC,OAAA,CAAAG,GAAA,UAAApC,IAAA;QACAiC,OAAA,CAAAG,GAAA,kBAAAY,YAAA;QACA,MAAAmB,gBAAA,GAAAnB,YAAA,CAAAA,YAAA,CAAAoB,MAAA,OAAAtC,IAAA;QACAG,OAAA,CAAAG,GAAA,wBAAA+B,gBAAA;QACA,IAAAnE,IAAA,CAAA8B,IAAA,KAAAkB,YAAA,CAAAA,YAAA,CAAAoB,MAAA,MAAAtC,IAAA;UACA9B,IAAA,CAAAuB,QAAA,GAAAA,QAAA,CAAAK,GAAA,CAAAL,QAAA;YACAF,KAAA,EAAAE,QAAA,CAAAO,IAAA;YACAR,KAAA,EAAAC,QAAA,CAAAQ,IAAA;YACAR,QAAA,EAAAA,QAAA,CAAAA,QAAA;UAEA;UACAU,OAAA,CAAAG,GAAA,kBAAApC,IAAA;QACA;MACA;IACA;IAEA;IACA,MAAAqE,UAAA;MACA;QACA,MAAAC,eAAA,SAAAvE,OAAA,CAAA4B,GAAA;QACA;;QAEA,MAAA4C,gBAAA,SAAAxE,OAAA,CAAA4B,GAAA;QACA,MAAA6C,qBAAA,SAAAzE,OAAA,CAAA4B,GAAA;QACA,MAAA8C,kBAAA,SAAA1E,OAAA,CAAA4B,GAAA;QACAM,OAAA,CAAAG,GAAA,OAAAmC,gBAAA;QACAtC,OAAA,CAAAG,GAAA,SAAAoC,qBAAA;QACAvC,OAAA,CAAAG,GAAA,OAAAqC,kBAAA;;QAEA;QACA,KAAA1D,OAAA,GAAAuD,eAAA,CAAAtE,IAAA;QACA,KAAAgB,QAAA,GAAAuD,gBAAA,CAAAvE,IAAA;QACA,KAAAiB,aAAA,GAAAuD,qBAAA,CAAAxE,IAAA;QACA,KAAAkB,UAAA,GAAAuD,kBAAA,CAAAzE,IAAA;MACA,SAAAgC,KAAA;QACAC,OAAA,CAAAD,KAAA,yBAAAA,KAAA;MACA;IACA;IAEA;IACA0C,qBAAA;MACA,MAAAxE,QAAA,QAAAD,IAAA,CAAAC,QAAA,CAAAyE,IAAA;MACA,MAAAxE,IAAA,QAAAF,IAAA,CAAAE,IAAA;MACA,MAAAC,MAAA,QAAAH,IAAA,CAAAG,MAAA;MACA,MAAAC,OAAA,QAAAJ,IAAA,CAAAI,OAAA;MACA,MAAAC,YAAA,QAAAL,IAAA,CAAAK,YAAA;MACA,MAAAC,SAAA,QAAAN,IAAA,CAAAM,SAAA;MACA,MAAAC,WAAA,QAAAP,IAAA,CAAAO,WAAA;MAEA,KAAAC,YAAA,MAAAP,QAAA,IAAAC,IAAA,IAAAC,MAAA,IAAAC,OAAA,IAAAC,YAAA,IAAAC,SAAA,IAAAC,WAAA;IACA;IAIA;IACA,MAAAoE,mBAAA;MACA,MAAAC,YAAA;QACA3E,QAAA,OAAAD,IAAA,CAAAC,QAAA,CAAAyE,IAAA;QACAxE,IAAA,OAAAF,IAAA,CAAAE,IAAA;QACAC,MAAA,OAAAH,IAAA,CAAAG,MAAA;QACAC,OAAA,OAAAJ,IAAA,CAAAI,OAAA;QACAC,YAAA,OAAAL,IAAA,CAAAK,YAAA;QACAC,SAAA,OAAAN,IAAA,CAAAM,SAAA;QACAC,WAAA,OAAAP,IAAA,CAAAO;MACA;MAEA;QACA,MAAAkB,QAAA,SAAA3B,OAAA,CAAA+E,IAAA,8BAAAD,YAAA;QACA5C,OAAA,CAAAG,GAAA,gDAAAV,QAAA;MACA,SAAAM,KAAA;QACAC,OAAA,CAAAD,KAAA,0CAAAA,KAAA;MACA;IACA;IACA,MAAA+C,qBAAA;MACA;QACA,MAAAC,WAAA;UACAvE,YAAA,OAAAC;QACA;;QAEA;QACA,MAAAgB,QAAA,SAAA3B,OAAA,CAAA+E,IAAA,iCAAAE,WAAA;UACAC,OAAA;YACA;UACA;QACA;QAEAhD,OAAA,CAAAG,GAAA,2BAAAV,QAAA;QACAO,OAAA,CAAAG,GAAA,mBAAAV,QAAA,CAAA1B,IAAA;QACAiC,OAAA,CAAAG,GAAA,wBAAAV,QAAA,CAAA1B,IAAA,CAAA8B,IAAA;QAEA,IAAAJ,QAAA,IAAAA,QAAA,CAAA1B,IAAA;UAEA;UACA,MAAA6E,YAAA,GAAAnD,QAAA,CAAA1B,IAAA;;UAEA;UACA,KAAAW,WAAA;YACAT,QAAA,EAAA2E,YAAA,CAAA3E,QAAA;YACAC,IAAA,EAAA0E,YAAA,CAAAK,IAAA;YACA9E,MAAA,KAAAyE,YAAA,CAAAM,cAAA,YAAAN,YAAA,CAAAO,iBAAA;YACA/E,OAAA,EAAAwE,YAAA,CAAAQ,WAAA;YACA/E,YAAA,KAAAuE,YAAA,CAAAS,qBAAA,YAAAT,YAAA,CAAAU,mBAAA;YACAhF,SAAA,EAAAsE,YAAA,CAAAW,iBAAA;YACAhF,WAAA,EAAAqE,YAAA,CAAAY,MAAA;UACA;UAEAxD,OAAA,CAAAG,GAAA,uCAAAzB,WAAA;QAEA;UACAsB,OAAA,CAAAD,KAAA;UACA,KAAA0D,OAAA,CAAA1D,KAAA;QACA;MACA,SAAAA,KAAA;QACAC,OAAA,CAAAD,KAAA,6CAAAA,KAAA;QACA,KAAA0D,OAAA,CAAA1D,KAAA;MACA;IACA;IAEA;IACA,MAAA2D,oBAAA;MAAAC;IAAA;MACA;MACA,MAAAnF,YAAA,QAAAC,iBAAA;MAEA,KAAAD,YAAA;QACA,KAAAiF,OAAA,CAAA1D,KAAA;QACA;MACA;MAEA,MAAA6D,QAAA,OAAAC,QAAA;MACAD,QAAA,CAAAE,MAAA,SAAAH,IAAA;MACAC,QAAA,CAAAE,MAAA,iBAAAtF,YAAA;MAEA;QACA;QACA,MAAAiB,QAAA,SAAA3B,OAAA,CAAA+E,IAAA,uCAAAe,QAAA;UACAZ,OAAA;YACA;UACA;QACA;QAEA,IAAAvD,QAAA,CAAA1B,IAAA,CAAA8B,IAAA;UACA;UACA,KAAAhB,QAAA,GAAAY,QAAA,CAAA1B,IAAA,CAAAA,IAAA,CAAAgG,IAAA;UACA,KAAAN,OAAA,CAAAO,OAAA;UACA;UACA,KAAAC,UAAA;QACA;UACA,KAAAR,OAAA,CAAA1D,KAAA,CAAAN,QAAA,CAAA1B,IAAA,CAAAmG,GAAA;QACA;MACA,SAAAnE,KAAA;QACAC,OAAA,CAAAD,KAAA,wBAAAA,KAAA;QACA,KAAA0D,OAAA,CAAA1D,KAAA;MACA;IACA;IAEA;IACA,MAAAkE,WAAA;MACA;QACA,MAAAE,cAAA,SAAArG,OAAA,CAAA+E,IAAA;UACArE,YAAA,OAAAC,iBAAA;UACA2F,QAAA,OAAAvF;QACA;QAEA,IAAAsF,cAAA,CAAApG,IAAA,CAAA8B,IAAA;UACA,KAAA4D,OAAA,CAAAO,OAAA;QACA;UACA,KAAAP,OAAA,CAAA1D,KAAA,CAAAoE,cAAA,CAAApG,IAAA,CAAAmG,GAAA;QACA;MACA,SAAAnE,KAAA;QACAC,OAAA,CAAAD,KAAA,8CAAAA,KAAA;QACA,KAAA0D,OAAA,CAAA1D,KAAA;MACA;IACA;IAEA;IACAsE,iBAAAV,IAAA;MACA,MAAAW,QAAA,GAAAX,IAAA,CAAA7D,IAAA;MACA,MAAAyE,SAAA,GAAAD,QAAA,CAAAE,KAAA;MACA,MAAAhG,YAAA,GAAA+F,SAAA;;MAEA,KAAA/F,YAAA;QACA,KAAAiF,OAAA,CAAA1D,KAAA;QACA;MACA;;MAEA;MACA,KAAAtB,iBAAA,GAAAD,YAAA;MAEA;IACA;EAGA;EAEAiG,QAAA;IACA;IACA,KAAAjF,cAAA,GACAkF,IAAA,CAAAC,SAAA;MACA,KAAAhG,eAAA,GAAAgG,SAAA;IACA,GACAC,KAAA,CAAA7E,KAAA;MACAC,OAAA,CAAAD,KAAA,8BAAAA,KAAA;IACA;IAEA,KAAAqC,SAAA,GAAAwC,KAAA,CAAA7E,KAAA;MACAC,OAAA,CAAAD,KAAA,+BAAAA,KAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}