{"ast":null,"code":"import request from \"@/utils/request\"; // 使用封装的 axios 实例\n\nexport default {\n  data() {\n    return {\n      form: {\n        location: [],\n        time: '',\n        source: '',\n        carrier: '',\n        disasterType: '',\n        indicator: '',\n        description: ''\n      },\n      disasterCode: '',\n      disasterCodeInput: '',\n      decodedData: {\n        location: '',\n        time: '',\n        source: '',\n        carrier: '',\n        disasterType: '',\n        indicator: '',\n        description: ''\n      },\n      locationOptions: [],\n      // 存储级联下拉框数据\n      cascaderProps: {\n        value: 'code',\n        // 显示的数据绑定字段 \n        label: 'name',\n        // 显示的名称字段 \n        children: 'children',\n        // 子级数据字段 \n        lazy: true,\n        // 启用懒加载 \n        lazyLoad: this.lazyLoad // 动态加载函数 \n      },\n      // 完整的地理位置数据\n      sources: [],\n      carriers: [],\n      disasterTypes: [],\n      indicators: []\n    };\n  },\n  methods: {\n    // 懒加载函数，根据级别来加载不同的区域数据\n    lazyLoad(node, resolve) {\n      const {\n        level,\n        value\n      } = node; // 获取当前节点的级别和选中的值\n\n      let fetchData;\n\n      // 根据级别来判断加载哪个数据（省 -> 市 -> 县区 -> 乡镇 -> 村庄）\n      switch (level) {\n        case 0:\n          // 省级\n          fetchData = this.fetchProvinces();\n          break;\n        case 1:\n          // 市级\n          fetchData = this.fetchCities(value);\n          break;\n        case 2:\n          // 区县级\n          fetchData = this.fetchCounties(value);\n          break;\n        case 3:\n          // 乡镇级\n          fetchData = this.fetchTowns(value);\n          break;\n        case 4:\n          // 村庄级\n          fetchData = this.fetchVillages(value);\n          break;\n        default:\n          resolve([]);\n          return;\n      }\n\n      // 获取数据后，通过 resolve 函数返回节点数据\n      fetchData.then(data => {\n        const children = data.map(item => ({\n          value: item.code,\n          label: item.name,\n          children: [] // 初始化子级为空\n        }));\n        resolve(children); // 返回数据\n      }).catch(error => {\n        console.error(error);\n        resolve([]); // 如果请求失败，返回空数组\n      });\n    },\n    // 获取省份数据\n    fetchProvinces() {\n      return request.get('http://localhost:8080/api/areas/getProvinces').then(response => response.data);\n    },\n    // 获取市级数据\n    fetchCities(provinceCode) {\n      return request.get(`http://localhost:8080/api/areas/getCities?provinceCode=${provinceCode}`).then(response => response.data);\n    },\n    // 获取区县级数据\n    fetchCounties(cityCode) {\n      return request.get(`http://localhost:8080/api/areas/getCounties?cityCode=${cityCode}`).then(response => response.data);\n    },\n    // 获取乡镇数据\n    fetchTowns(countyCode) {\n      return request.get(`http://localhost:8080/api/areas/getTowns?countyCode=${countyCode}`).then(response => response.data);\n    },\n    // 获取村庄数据\n    fetchVillages(townCode) {\n      return request.get(`http://localhost:8080/api/areas/getVillages?townCode=${townCode}`).then(response => response.data);\n    },\n    // 级联选择变化时的处理\n    handleCascaderChange(value) {\n      console.log('Selected Value:', value); // 输出选择的值\n    },\n    // // 获取省份数据\n    // async fetchProvinces() {\n    //   try {\n    //     const response = await request.get('http://localhost:8080/api/areas/getProvinces');\n    //     return response.data.map(province => ({\n    //       code: province.code,\n    //       name: province.name,\n    //       children: ['aaa']  // 初始化为空，后续会填充城市数据\n    //     }));\n    //   } catch (error) {\n    //     console.error('Error fetching provinces:', error);\n    //   }\n    // },\n\n    // // 获取城市数据\n    // async fetchCities(provinceCode) {\n    //   try {\n    //     const response = await request.get(`http://localhost:8080/api/areas/getCities?provinceCode=${provinceCode}`);\n    //     return response.data.map(city => ({\n    //       code: city.code,\n    //       name: city.name,\n    //       children: ['hahaha']  // 初始化为空，后续会填充县区数据\n    //     }));\n    //   } catch (error) {\n    //     console.error('Error fetching cities:', error);\n    //   }\n    // },\n\n    // // 获取县区数据\n    // async fetchCounties(cityCode) {\n    //   try {\n    //     const response = await request.get(`http://localhost:8080/api/areas/getCounties?cityCode=${cityCode}`);\n    //     return response.data.map(county => ({\n    //       code: county.code,\n    //       name: county.name,\n    //       children: []  // 初始化为空，后续会填充乡镇数据\n    //     }));\n    //   } catch (error) {\n    //     console.error('Error fetching counties:', error);\n    //   }\n    // },\n\n    // // 获取乡镇数据\n    // async fetchTowns(areaCode) {\n    //   try {\n    //     const response = await request.get(`http://localhost:8080/api/areas/getTowns?areaCode=${areaCode}`);\n    //     return response.data.map(town => ({\n    //       code: town.code,\n    //       name: town.name,\n    //       children: []  // 初始化为空，后续会填充村庄数据\n    //     }));\n    //   } catch (error) {\n    //     console.error('Error fetching towns:', error);\n    //   }\n    // },\n\n    // // 获取村庄数据\n    // async fetchVillages(streetCode) {\n    //   try {\n    //     const response = await request.get(`http://localhost:8080/api/areas/getVillages?streetCode=${streetCode}`);\n    //     return response.data.map(village => ({\n    //       code: village.code,\n    //       name: village.name\n    //     }));\n    //   } catch (error) {\n    //     console.error('Error fetching villages:', error);\n    //   }\n    // },\n\n    // // 级联选择变化时的处理\n    // async handleCascaderChange(value) {\n    //   console.log('Cascader value changed:', value);\n    //   const selectedData = this.getSelectedData(value, this.locationOptions);\n    //   console.log('Selected Data:', selectedData);\n    //   const [provinceCode, cityCode, countyCode, townCode, villageCode] = value;\n    //   // 打印传入的provinceCode\n    //   console.log('Selected Province Code:', provinceCode);\n\n    //   if (provinceCode) {\n    //     const cities = await this.fetchCities(provinceCode);\n    //     console.log('cities in Selected Province :', cities);\n    //     this.updateChildren(selectedData, cities);\n    //   }\n    //   if (cityCode) {\n    //     const counties = await this.fetchCounties(cityCode);\n    //     this.updateChildren(selectedData, counties);\n    //   }\n    //   if (countyCode) {\n    //     const towns = await this.fetchTowns(countyCode);\n    //     this.updateChildren(selectedData, towns);\n    //   }\n    //   if (townCode) {\n    //     const villages = await this.fetchVillages(townCode);\n    //     this.updateChildren(selectedData, villages);\n    //   }\n    // },\n    // // 递归解析选中路径的数据\n    // getSelectedData(value, options) {\n    //   let result = [];\n    //   let currentOptions = options;\n\n    //   for (let val of value) {\n    //     const current = currentOptions.find(option => option.value === val);\n    //     if (current) {\n    //       result.push(current);\n    //       currentOptions = current.children || []; // 如果有子节点，则继续递归\n    //     }\n    //   }\n\n    //   return result;\n    // },\n    // // 更新级联选项的子节点\n    // updateChildren(selectedData, children) {\n    //   console.log('Selected Data:', selectedData);\n    //   console.log('children:', children);\n\n    //   selectedData.forEach(data => {\n    //     console.log('data:', data); // 打印每个数据项 \n    //     console.log('selectedData:', selectedData); // 打印 selectedData 数组 \n    //     const lastSelectedCode = selectedData[selectedData.length - 1]?.code;\n    //     console.log('Last selected code:', lastSelectedCode); // 打印最后一个选中的 code\n    //     if (data.code === selectedData[selectedData.length - 1].code) {\n    //       data.children = children.map(children => ({\n    //         value: children.code,\n    //         label: children.name,\n    //         children: children.children || []\n\n    //       }));\n    //       console.log('Updated Data:', data);  // 看到更新后的数据\n    //     }\n    //   });\n    // },\n\n    // 获取后端的地理位置、灾情来源等数据\n    async fetchData() {\n      try {\n        const sourcesResponse = await request.get('http://localhost:8080/disaster/sources');\n        console.log('Selected Province Code:', provinceCode);\n        const carriersResponse = await request.get('http://localhost:8080/disaster/carriers');\n        const disasterTypesResponse = await request.get('http://localhost:8080/disaster/types');\n        const indicatorsResponse = await request.get('http://localhost:8080/disaster/indicators');\n\n        // 设置其他下拉选项数据\n        this.sources = sourcesResponse.data;\n        this.carriers = carriersResponse.data;\n        this.disasterTypes = disasterTypesResponse.data;\n        this.indicators = indicatorsResponse.data;\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    // 生成灾情码\n    generateDisasterCode() {\n      const location = this.form.location.join('/');\n      const time = this.form.time;\n      const source = this.form.source;\n      const carrier = this.form.carrier;\n      const disasterType = this.form.disasterType;\n      const indicator = this.form.indicator;\n      const description = this.form.description;\n      this.disasterCode = `${location}|${time}|${source}|${carrier}|${disasterType}|${indicator}|${description}`;\n    },\n    // 解码灾情码\n    decodeDisasterCode() {\n      const codeParts = this.disasterCodeInput.split('|');\n      this.decodedData = {\n        location: codeParts[0],\n        time: codeParts[1],\n        source: codeParts[2],\n        carrier: codeParts[3],\n        disasterType: codeParts[4],\n        indicator: codeParts[5],\n        description: codeParts[6]\n      };\n    },\n    // 上传灾情信息\n    async submitDisasterInfo() {\n      const disasterInfo = {\n        location: this.form.location.join('/'),\n        time: this.form.time,\n        source: this.form.source,\n        carrier: this.form.carrier,\n        disasterType: this.form.disasterType,\n        indicator: this.form.indicator,\n        description: this.form.description\n      };\n      try {\n        const response = await request.post('http://localhost:8080/add', disasterInfo);\n        console.log('Disaster information uploaded successfully:', response);\n      } catch (error) {\n        console.error('Error uploading disaster information:', error);\n      }\n    },\n    // 获取所有灾情信息（解码）\n    async fetchAllDisasterInfo() {\n      try {\n        const response = await request.get(`http://localhost:8080/decode?disasterCode=${this.disasterCodeInput}`);\n        this.decodedData = response.data;\n        console.log('Decoded disaster information:', this.decodedData);\n      } catch (error) {\n        console.error('Error fetching all disaster information:', error);\n      }\n    },\n    fileUploadSuccess(response) {\n      console.log('File uploaded successfully:', response);\n    }\n  },\n  mounted() {\n    this.fetchProvinces().then(provinces => {\n      // 初始时加载省级数据\n      this.locationOptions = provinces.map(province => ({\n        value: province.code,\n        label: province.name,\n        children: [] // 初始化省级节点的子级为空\n      }));\n    });\n    this.fetchData().catch(error => {\n      console.error(\"Error fetching other data:\", error);\n    });\n  }\n};","map":{"version":3,"names":["request","data","form","location","time","source","carrier","disasterType","indicator","description","disasterCode","disasterCodeInput","decodedData","locationOptions","cascaderProps","value","label","children","lazy","lazyLoad","sources","carriers","disasterTypes","indicators","methods","node","resolve","level","fetchData","fetchProvinces","fetchCities","fetchCounties","fetchTowns","fetchVillages","then","map","item","code","name","catch","error","console","get","response","provinceCode","cityCode","countyCode","townCode","handleCascaderChange","log","sourcesResponse","carriersResponse","disasterTypesResponse","indicatorsResponse","generateDisasterCode","join","decodeDisasterCode","codeParts","split","submitDisasterInfo","disasterInfo","post","fetchAllDisasterInfo","fileUploadSuccess","mounted","provinces","province"],"sources":["src/views/manager/Upload.vue"],"sourcesContent":["<template>\n  <div class=\"main-body-content\">\n    <div class=\"main-body-header\">灾情信息上传</div>\n\n    <!-- 编码部分 -->\n    <el-card class=\"form-card\" :body-style=\"{ padding: '20px' }\">\n      <div class=\"form-title\">灾情信息编码</div>\n      <el-form :model=\"form\" label-position=\"right\" label-width=\"120px\">\n        <el-row>\n          <!-- 地理位置 -->\n          <el-col :span=\"12\"> <el-form-item label=\"灾情地理位置\"> <el-cascader size=\"small\" v-model=\"form.location\"\n                :options=\"locationOptions\" :props=\"cascaderProps\" placeholder=\"请选择完整的地理位置\"\n                @change=\"handleCascaderChange\" change-on-select></el-cascader> </el-form-item> </el-col>\n\n\n\n          <!-- 时间 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情时间\">\n              <el-date-picker v-model=\"form.time\" type=\"datetime\" placeholder=\"请选择灾情时间\" size=\"small\"></el-date-picker>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <el-row>\n          <!-- 来源 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情来源\">\n              <el-select size=\"small\" v-model=\"form.source\" placeholder=\"请选择灾情来源\">\n                <el-option v-for=\"(source, index) in sources\" :key=\"index\" :label=\"source\" :value=\"source\"></el-option>\n              </el-select>\n            </el-form-item>\n          </el-col>\n\n          <!-- 载体类型 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情载体类型\">\n              <el-select size=\"small\" v-model=\"form.carrier\" placeholder=\"请选择灾情载体类型\">\n                <el-option v-for=\"(carrier, index) in carriers\" :key=\"index\" :label=\"carrier\"\n                  :value=\"carrier\"></el-option>\n              </el-select>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <el-row>\n          <!-- 灾情分类 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情分类\">\n              <el-select size=\"small\" v-model=\"form.disasterType\" placeholder=\"请选择灾情分类\">\n                <el-option v-for=\"(type, index) in disasterTypes\" :key=\"index\" :label=\"type\" :value=\"type\"></el-option>\n              </el-select>\n            </el-form-item>\n          </el-col>\n\n          <!-- 灾情指标分类 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情指标分类\">\n              <el-select size=\"small\" v-model=\"form.indicator\" placeholder=\"请选择灾情指标分类\">\n                <el-option v-for=\"(indicator, index) in indicators\" :key=\"index\" :label=\"indicator\"\n                  :value=\"indicator\"></el-option>\n              </el-select>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <!-- 富文本框，放在编码部分 -->\n        <el-form-item label=\"灾情描述\" style=\"margin-top: 10px;\">\n          <el-input type=\"textarea\" size=\"small\" v-model=\"form.description\" placeholder=\"请输入灾情描述\" rows=\"4\"\n            style=\"resize: none; width: 100%;\"></el-input>\n        </el-form-item>\n\n        <!-- 生成灾情码按钮 -->\n        <el-form-item>\n          <el-button size=\"small\" type=\"primary\" @click=\"generateDisasterCode\">生成灾情码</el-button>\n        </el-form-item>\n      </el-form>\n\n      <div class=\"disaster-code-display\">\n        <el-input size=\"small\" :value=\"disasterCode\" placeholder=\"生成的灾情码\" readonly></el-input>\n      </div>\n    </el-card>\n\n    <!-- 解码部分 -->\n    <el-card class=\"form-card\" :body-style=\"{ padding: '20px' }\">\n      <div class=\"form-title\">灾情信息解码</div>\n      <el-form :model=\"form\" label-position=\"right\" label-width=\"120px\">\n        <el-form-item label=\"灾情码\">\n          <el-input size=\"small\" v-model=\"disasterCodeInput\" placeholder=\"请输入灾情码\"></el-input>\n        </el-form-item>\n\n        <el-form-item label=\"上传文件\">\n          <el-upload action=\"http://localhost:8080/files/upload\" ref=\"disasterFile\" :on-success=\"fileUploadSuccess\"\n            list-type=\"text\" style=\"width: 100%;\">\n            <el-button size=\"small\" type=\"success\">点击上传文件</el-button>\n          </el-upload>\n        </el-form-item>\n\n        <el-form-item style=\"margin-top: 15px;\">\n          <el-button size=\"small\" type=\"primary\" @click=\"decodeDisasterCode\">解码灾情码</el-button>\n        </el-form-item>\n\n        <el-row>\n          <!-- 解码后的地理位置 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情地理位置\">\n              <el-input size=\"small\" :value=\"decodedData.location\" readonly></el-input>\n            </el-form-item>\n          </el-col>\n\n          <!-- 解码后的时间 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情时间\">\n              <el-input size=\"small\" :value=\"decodedData.time\" readonly></el-input>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <el-row>\n          <!-- 解码后的来源 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情来源\">\n              <el-input size=\"small\" :value=\"decodedData.source\" readonly></el-input>\n            </el-form-item>\n          </el-col>\n\n          <!-- 解码后的载体类型 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情载体类型\">\n              <el-input size=\"small\" :value=\"decodedData.carrier\" readonly></el-input>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <el-row>\n          <!-- 解码后的灾情分类 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情分类\">\n              <el-input size=\"small\" :value=\"decodedData.disasterType\" readonly></el-input>\n            </el-form-item>\n          </el-col>\n\n          <!-- 解码后的灾情指标分类 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情指标分类\">\n              <el-input size=\"small\" :value=\"decodedData.indicator\" readonly></el-input>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <!-- 解码后的描述 -->\n        <el-form-item label=\"灾情描述\">\n          <el-input type=\"textarea\" size=\"small\" :value=\"decodedData.description\" readonly></el-input>\n        </el-form-item>\n      </el-form>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport request from \"@/utils/request\";  // 使用封装的 axios 实例\n\nexport default {\n  data() {\n    return {\n      form: {\n        location: [],\n        time: '',\n        source: '',\n        carrier: '',\n        disasterType: '',\n        indicator: '',\n        description: ''\n      },\n\n\n      disasterCode: '',\n      disasterCodeInput: '',\n      decodedData: {\n        location: '',\n        time: '',\n        source: '',\n        carrier: '',\n        disasterType: '',\n        indicator: '',\n        description: ''\n      },\n      locationOptions: [],  // 存储级联下拉框数据\n      cascaderProps: {\n        value: 'code', // 显示的数据绑定字段 \n        label: 'name', // 显示的名称字段 \n        children: 'children', // 子级数据字段 \n        lazy: true, // 启用懒加载 \n        lazyLoad: this.lazyLoad // 动态加载函数 \n      },\n      // 完整的地理位置数据\n      sources: [],\n      carriers: [],\n      disasterTypes: [],\n      indicators: [],\n\n    };\n  },\n  methods: {\n    // 懒加载函数，根据级别来加载不同的区域数据\n    lazyLoad(node, resolve) {\n      const { level, value } = node;  // 获取当前节点的级别和选中的值\n\n      let fetchData;\n\n      // 根据级别来判断加载哪个数据（省 -> 市 -> 县区 -> 乡镇 -> 村庄）\n      switch (level) {\n        case 0: // 省级\n          fetchData = this.fetchProvinces();\n          break;\n        case 1: // 市级\n          fetchData = this.fetchCities(value);\n          break;\n        case 2: // 区县级\n          fetchData = this.fetchCounties(value);\n          break;\n        case 3: // 乡镇级\n          fetchData = this.fetchTowns(value);\n          break;\n        case 4: // 村庄级\n          fetchData = this.fetchVillages(value);\n          break;\n        default:\n          resolve([]);\n          return;\n      }\n\n      // 获取数据后，通过 resolve 函数返回节点数据\n      fetchData.then(data => {\n        const children = data.map(item => ({\n          value: item.code,\n          label: item.name,\n          children: [] // 初始化子级为空\n        }));\n        resolve(children); // 返回数据\n      }).catch(error => {\n        console.error(error);\n        resolve([]); // 如果请求失败，返回空数组\n      });\n    },\n\n    // 获取省份数据\n    fetchProvinces() {\n      return request.get('http://localhost:8080/api/areas/getProvinces')\n        .then(response => response.data);\n    },\n\n    // 获取市级数据\n    fetchCities(provinceCode) {\n      return request.get(`http://localhost:8080/api/areas/getCities?provinceCode=${provinceCode}`)\n        .then(response => response.data);\n    },\n\n    // 获取区县级数据\n    fetchCounties(cityCode) {\n      return request.get(`http://localhost:8080/api/areas/getCounties?cityCode=${cityCode}`)\n        .then(response => response.data);\n    },\n\n    // 获取乡镇数据\n    fetchTowns(countyCode) {\n      return request.get(`http://localhost:8080/api/areas/getTowns?countyCode=${countyCode}`)\n        .then(response => response.data);\n    },\n\n    // 获取村庄数据\n    fetchVillages(townCode) {\n      return request.get(`http://localhost:8080/api/areas/getVillages?townCode=${townCode}`)\n        .then(response => response.data);\n    },\n\n    // 级联选择变化时的处理\n    handleCascaderChange(value) {\n      console.log('Selected Value:', value); // 输出选择的值\n    },\n\n    // // 获取省份数据\n    // async fetchProvinces() {\n    //   try {\n    //     const response = await request.get('http://localhost:8080/api/areas/getProvinces');\n    //     return response.data.map(province => ({\n    //       code: province.code,\n    //       name: province.name,\n    //       children: ['aaa']  // 初始化为空，后续会填充城市数据\n    //     }));\n    //   } catch (error) {\n    //     console.error('Error fetching provinces:', error);\n    //   }\n    // },\n\n    // // 获取城市数据\n    // async fetchCities(provinceCode) {\n    //   try {\n    //     const response = await request.get(`http://localhost:8080/api/areas/getCities?provinceCode=${provinceCode}`);\n    //     return response.data.map(city => ({\n    //       code: city.code,\n    //       name: city.name,\n    //       children: ['hahaha']  // 初始化为空，后续会填充县区数据\n    //     }));\n    //   } catch (error) {\n    //     console.error('Error fetching cities:', error);\n    //   }\n    // },\n\n    // // 获取县区数据\n    // async fetchCounties(cityCode) {\n    //   try {\n    //     const response = await request.get(`http://localhost:8080/api/areas/getCounties?cityCode=${cityCode}`);\n    //     return response.data.map(county => ({\n    //       code: county.code,\n    //       name: county.name,\n    //       children: []  // 初始化为空，后续会填充乡镇数据\n    //     }));\n    //   } catch (error) {\n    //     console.error('Error fetching counties:', error);\n    //   }\n    // },\n\n    // // 获取乡镇数据\n    // async fetchTowns(areaCode) {\n    //   try {\n    //     const response = await request.get(`http://localhost:8080/api/areas/getTowns?areaCode=${areaCode}`);\n    //     return response.data.map(town => ({\n    //       code: town.code,\n    //       name: town.name,\n    //       children: []  // 初始化为空，后续会填充村庄数据\n    //     }));\n    //   } catch (error) {\n    //     console.error('Error fetching towns:', error);\n    //   }\n    // },\n\n    // // 获取村庄数据\n    // async fetchVillages(streetCode) {\n    //   try {\n    //     const response = await request.get(`http://localhost:8080/api/areas/getVillages?streetCode=${streetCode}`);\n    //     return response.data.map(village => ({\n    //       code: village.code,\n    //       name: village.name\n    //     }));\n    //   } catch (error) {\n    //     console.error('Error fetching villages:', error);\n    //   }\n    // },\n\n    // // 级联选择变化时的处理\n    // async handleCascaderChange(value) {\n    //   console.log('Cascader value changed:', value);\n    //   const selectedData = this.getSelectedData(value, this.locationOptions);\n    //   console.log('Selected Data:', selectedData);\n    //   const [provinceCode, cityCode, countyCode, townCode, villageCode] = value;\n    //   // 打印传入的provinceCode\n    //   console.log('Selected Province Code:', provinceCode);\n\n    //   if (provinceCode) {\n    //     const cities = await this.fetchCities(provinceCode);\n    //     console.log('cities in Selected Province :', cities);\n    //     this.updateChildren(selectedData, cities);\n    //   }\n    //   if (cityCode) {\n    //     const counties = await this.fetchCounties(cityCode);\n    //     this.updateChildren(selectedData, counties);\n    //   }\n    //   if (countyCode) {\n    //     const towns = await this.fetchTowns(countyCode);\n    //     this.updateChildren(selectedData, towns);\n    //   }\n    //   if (townCode) {\n    //     const villages = await this.fetchVillages(townCode);\n    //     this.updateChildren(selectedData, villages);\n    //   }\n    // },\n    // // 递归解析选中路径的数据\n    // getSelectedData(value, options) {\n    //   let result = [];\n    //   let currentOptions = options;\n\n    //   for (let val of value) {\n    //     const current = currentOptions.find(option => option.value === val);\n    //     if (current) {\n    //       result.push(current);\n    //       currentOptions = current.children || []; // 如果有子节点，则继续递归\n    //     }\n    //   }\n\n    //   return result;\n    // },\n    // // 更新级联选项的子节点\n    // updateChildren(selectedData, children) {\n    //   console.log('Selected Data:', selectedData);\n    //   console.log('children:', children);\n\n    //   selectedData.forEach(data => {\n    //     console.log('data:', data); // 打印每个数据项 \n    //     console.log('selectedData:', selectedData); // 打印 selectedData 数组 \n    //     const lastSelectedCode = selectedData[selectedData.length - 1]?.code;\n    //     console.log('Last selected code:', lastSelectedCode); // 打印最后一个选中的 code\n    //     if (data.code === selectedData[selectedData.length - 1].code) {\n    //       data.children = children.map(children => ({\n    //         value: children.code,\n    //         label: children.name,\n    //         children: children.children || []\n\n    //       }));\n    //       console.log('Updated Data:', data);  // 看到更新后的数据\n    //     }\n    //   });\n    // },\n\n    // 获取后端的地理位置、灾情来源等数据\n    async fetchData() {\n      try {\n        const sourcesResponse = await request.get('http://localhost:8080/disaster/sources');\n        console.log('Selected Province Code:', provinceCode);\n\n        const carriersResponse = await request.get('http://localhost:8080/disaster/carriers');\n        const disasterTypesResponse = await request.get('http://localhost:8080/disaster/types');\n        const indicatorsResponse = await request.get('http://localhost:8080/disaster/indicators');\n\n        // 设置其他下拉选项数据\n        this.sources = sourcesResponse.data;\n        this.carriers = carriersResponse.data;\n        this.disasterTypes = disasterTypesResponse.data;\n        this.indicators = indicatorsResponse.data;\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n\n    // 生成灾情码\n    generateDisasterCode() {\n      const location = this.form.location.join('/');\n      const time = this.form.time;\n      const source = this.form.source;\n      const carrier = this.form.carrier;\n      const disasterType = this.form.disasterType;\n      const indicator = this.form.indicator;\n      const description = this.form.description;\n\n      this.disasterCode = `${location}|${time}|${source}|${carrier}|${disasterType}|${indicator}|${description}`;\n    },\n\n    // 解码灾情码\n    decodeDisasterCode() {\n      const codeParts = this.disasterCodeInput.split('|');\n      this.decodedData = {\n        location: codeParts[0],\n        time: codeParts[1],\n        source: codeParts[2],\n        carrier: codeParts[3],\n        disasterType: codeParts[4],\n        indicator: codeParts[5],\n        description: codeParts[6]\n      };\n    },\n\n    // 上传灾情信息\n    async submitDisasterInfo() {\n      const disasterInfo = {\n        location: this.form.location.join('/'),\n        time: this.form.time,\n        source: this.form.source,\n        carrier: this.form.carrier,\n        disasterType: this.form.disasterType,\n        indicator: this.form.indicator,\n        description: this.form.description\n      };\n\n      try {\n        const response = await request.post('http://localhost:8080/add', disasterInfo);\n        console.log('Disaster information uploaded successfully:', response);\n      } catch (error) {\n        console.error('Error uploading disaster information:', error);\n      }\n    },\n\n    // 获取所有灾情信息（解码）\n    async fetchAllDisasterInfo() {\n      try {\n        const response = await request.get(`http://localhost:8080/decode?disasterCode=${this.disasterCodeInput}`);\n        this.decodedData = response.data;\n        console.log('Decoded disaster information:', this.decodedData);\n      } catch (error) {\n        console.error('Error fetching all disaster information:', error);\n      }\n    },\n\n    fileUploadSuccess(response) {\n      console.log('File uploaded successfully:', response);\n    },\n  },\n\n\n\n  mounted() {\n    this.fetchProvinces().then(provinces => {\n      // 初始时加载省级数据\n      this.locationOptions = provinces.map(province => ({\n        value: province.code,\n        label: province.name,\n        children: [] // 初始化省级节点的子级为空\n      }));\n    });\n\n\n\n\n    this.fetchData().catch(error => {\n      console.error(\"Error fetching other data:\", error);\n    });\n  }\n}\n</script>\n\n\n<style scoped>\n.form-card {\n  margin-top: 20px;\n}\n\n.form-title {\n  font-size: 18px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.disaster-code-display {\n  margin-top: 20px;\n}\n</style>\n"],"mappings":"AAgKA,OAAAA,OAAA;;AAEA;EACAC,KAAA;IACA;MACAC,IAAA;QACAC,QAAA;QACAC,IAAA;QACAC,MAAA;QACAC,OAAA;QACAC,YAAA;QACAC,SAAA;QACAC,WAAA;MACA;MAGAC,YAAA;MACAC,iBAAA;MACAC,WAAA;QACAT,QAAA;QACAC,IAAA;QACAC,MAAA;QACAC,OAAA;QACAC,YAAA;QACAC,SAAA;QACAC,WAAA;MACA;MACAI,eAAA;MAAA;MACAC,aAAA;QACAC,KAAA;QAAA;QACAC,KAAA;QAAA;QACAC,QAAA;QAAA;QACAC,IAAA;QAAA;QACAC,QAAA,OAAAA,QAAA;MACA;MACA;MACAC,OAAA;MACAC,QAAA;MACAC,aAAA;MACAC,UAAA;IAEA;EACA;EACAC,OAAA;IACA;IACAL,SAAAM,IAAA,EAAAC,OAAA;MACA;QAAAC,KAAA;QAAAZ;MAAA,IAAAU,IAAA;;MAEA,IAAAG,SAAA;;MAEA;MACA,QAAAD,KAAA;QACA;UAAA;UACAC,SAAA,QAAAC,cAAA;UACA;QACA;UAAA;UACAD,SAAA,QAAAE,WAAA,CAAAf,KAAA;UACA;QACA;UAAA;UACAa,SAAA,QAAAG,aAAA,CAAAhB,KAAA;UACA;QACA;UAAA;UACAa,SAAA,QAAAI,UAAA,CAAAjB,KAAA;UACA;QACA;UAAA;UACAa,SAAA,QAAAK,aAAA,CAAAlB,KAAA;UACA;QACA;UACAW,OAAA;UACA;MACA;;MAEA;MACAE,SAAA,CAAAM,IAAA,CAAAjC,IAAA;QACA,MAAAgB,QAAA,GAAAhB,IAAA,CAAAkC,GAAA,CAAAC,IAAA;UACArB,KAAA,EAAAqB,IAAA,CAAAC,IAAA;UACArB,KAAA,EAAAoB,IAAA,CAAAE,IAAA;UACArB,QAAA;QACA;QACAS,OAAA,CAAAT,QAAA;MACA,GAAAsB,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,CAAAA,KAAA;QACAd,OAAA;MACA;IACA;IAEA;IACAG,eAAA;MACA,OAAA7B,OAAA,CAAA0C,GAAA,iDACAR,IAAA,CAAAS,QAAA,IAAAA,QAAA,CAAA1C,IAAA;IACA;IAEA;IACA6B,YAAAc,YAAA;MACA,OAAA5C,OAAA,CAAA0C,GAAA,2DAAAE,YAAA,IACAV,IAAA,CAAAS,QAAA,IAAAA,QAAA,CAAA1C,IAAA;IACA;IAEA;IACA8B,cAAAc,QAAA;MACA,OAAA7C,OAAA,CAAA0C,GAAA,yDAAAG,QAAA,IACAX,IAAA,CAAAS,QAAA,IAAAA,QAAA,CAAA1C,IAAA;IACA;IAEA;IACA+B,WAAAc,UAAA;MACA,OAAA9C,OAAA,CAAA0C,GAAA,wDAAAI,UAAA,IACAZ,IAAA,CAAAS,QAAA,IAAAA,QAAA,CAAA1C,IAAA;IACA;IAEA;IACAgC,cAAAc,QAAA;MACA,OAAA/C,OAAA,CAAA0C,GAAA,yDAAAK,QAAA,IACAb,IAAA,CAAAS,QAAA,IAAAA,QAAA,CAAA1C,IAAA;IACA;IAEA;IACA+C,qBAAAjC,KAAA;MACA0B,OAAA,CAAAQ,GAAA,oBAAAla,UAAA;MACA;QACA,MAAAsB,eAAA,SAAAlD,OAAA,CAAA0C,GAAA;QACAD,OAAA,CAAAQ,GAAA,4BAAAL,YAAA;QAEA,MAAAO,gBAAA,SAAAnD,OAAA,CAAA0C,GAAA;QACA,MAAAU,qBAAA,SAAApD,OAAA,CAAA0C,GAAA;QACA,MAAAW,kBAAA,SAAArD,OAAA,CAAA0C,GAAA;;QAEA;QACA,KAAAtB,OAAA,GAAA8B,eAAA,CAAAjD,IAAA;QACA,KAAAoB,QAAA,GAAA8B,gBAAA,CAAAlD,IAAA;QACA,KAAAqB,aAAA,GAAA8B,qBAAA,CAAAnD,IAAA;QACA,KAAAsB,UAAA,GAAA8B,kBAAA,CAAApD,IAAA;MACA,SAAAuC,KAAA;QACAC,OAAA,CAAAD,KAAA,yBAAAA,KAAA;MACA;IACA;IAEA;IACAc,qBAAA;MACA,MAAAnD,QAAA,QAAAD,IAAA,CAAAC,QAAA,CAAAoD,IAAA;MACA,MAAAnD,IAAA,QAAAF,IAAA,CAAAE,IAAA;MACA,MAAAC,MAAA,QAAAH,IAAA,CAAAG,MAAA;MACA,MAAAC,OAAA,QAAAJ,IAAA,CAAAI,OAAA;MACA,MAAAC,YAAA,QAAAL,IAAA,CAAAK,YAAA;MACA,MAAAC,SAAA,QAAAN,IAAA,CAAAM,SAAA;MACA,MAAAC,WAAA,QAAAP,IAAA,CAAAO,WAAA;MAEA,KAAAC,YAAA,MAAAP,QAAA,IAAAC,IAAA,IAAAC,MAAA,IAAAC,OAAA,IAAAC,YAAA,IAAAC,SAAA,IAAAC,WAAA;IACA;IAEA;IACA+C,mBAAA;MACA,MAAAC,SAAA,QAAA9C,iBAAA,CAAA+C,KAAA;MACA,KAAA9C,WAAA;QACAT,QAAA,EAAAsD,SAAA;QACArD,IAAA,EAAAqD,SAAA;QACApD,MAAA,EAAAoD,SAAA;QACAnD,OAAA,EAAAmD,SAAA;QACAlD,YAAA,EAAAkD,SAAA;QACAjD,SAAA,EAAAiD,SAAA;QACAhD,WAAA,EAAAgD,SAAA;MACA;IACA;IAEA;IACA,MAAAE,mBAAA;MACA,MAAAC,YAAA;QACAzD,QAAA,OAAAD,IAAA,CAAAC,QAAA,CAAAoD,IAAA;QACAnD,IAAA,OAAAF,IAAA,CAAAE,IAAA;QACAC,MAAA,OAAAH,IAAA,CAAAG,MAAA;QACAC,OAAA,OAAAJ,IAAA,CAAAI,OAAA;QACAC,YAAA,OAAAL,IAAA,CAAAK,YAAA;QACAC,SAAA,OAAAN,IAAA,CAAAM,SAAA;QACAC,WAAA,OAAAP,IAAA,CAAAO;MACA;MAEA;QACA,MAAAkC,QAAA,SAAA3C,OAAA,CAAA6D,IAAA,8BAAAD,YAAA;QACAnB,OAAA,CAAAQ,GAAA,gDAAAN,QAAA;MACA,SAAAH,KAAA;QACAC,OAAA,CAAAD,KAAA,0CAAAA,KAAA;MACA;IACA;IAEA;IACA,MAAAsB,qBAAA;MACA;QACA,MAAAnB,QAAA,SAAA3C,OAAA,CAAA0C,GAAA,mDAAA/B,iBAAA;QACA,KAAAC,WAAA,GAAA+B,QAAA,CAAA1C,IAAA;QACAwC,OAAA,CAAAQ,GAAA,uCAAArC,WAAA;MACA,SAAA4B,KAAA;QACAC,OAAA,CAAAD,KAAA,6CAAAA,KAAA;MACA;IACA;IAEAuB,kBAAApB,QAAA;MACAF,OAAA,CAAAQ,GAAA,gCAAAN,QAAA;IACA;EACA;EAIAqB,QAAA;IACA,KAAAnC,cAAA,GAAAK,IAAA,CAAA+B,SAAA;MACA;MACA,KAAApD,eAAA,GAAAoD,SAAA,CAAA9B,GAAA,CAAA+B,QAAA;QACAnD,KAAA,EAAAmD,QAAA,CAAA7B,IAAA;QACArB,KAAA,EAAAkD,QAAA,CAAA5B,IAAA;QACArB,QAAA;MACA;IACA;IAKA,KAAAW,SAAA,GAAAW,KAAA,CAAAC,KAAA;MACAC,OAAA,CAAAD,KAAA,+BAAAA,KAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}