{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport request from \"@/utils/request\"; // 使用封装的 axios 实例\n\nexport default {\n  data() {\n    return {\n      form: {\n        location: [],\n        time: '',\n        source: '',\n        carrier: '',\n        disasterType: '',\n        indicator: '',\n        description: ''\n      },\n      sourceValueLabelMap: [{\n        code: \"1\",\n        name: \"业务报送数据\"\n      }, {\n        code: \"2\",\n        name: \"泛在感知数据\"\n      }, {\n        code: \"3\",\n        name: \"其他数据\"\n      }, {\n        code: \"00\",\n        name: \"前方地震应急指挥部\",\n        sourceCode: \"1\"\n      }, {\n        code: \"01\",\n        name: \"后方地震应急指挥部\",\n        sourceCode: \"1\"\n      }, {\n        code: \"20\",\n        name: \"应急指挥技术系统\",\n        sourceCode: \"1\"\n      }, {\n        code: \"21\",\n        name: \"社会服务工程应急救援系统\",\n        sourceCode: \"1\"\n      }, {\n        code: \"40\",\n        name: \"危险区预评估工作组\",\n        sourceCode: \"1\"\n      }, {\n        code: \"41\",\n        name: \"地震应急指挥技术协调组\",\n        sourceCode: \"1\"\n      }, {\n        code: \"42\",\n        name: \"震后政府信息支持工作项目组\",\n        sourceCode: \"1\"\n      }, {\n        code: \"80\",\n        name: \"灾情快速上报接收处理系统\",\n        sourceCode: \"1\"\n      }, {\n        code: \"81\",\n        name: \"地方地震局应急信息服务相关技术系统\",\n        sourceCode: \"1\"\n      }, {\n        code: \"99\",\n        name: \"其他\",\n        sourceCode: \"1\"\n      }, {\n        code: \"00\",\n        name: \"互联网感知\",\n        sourceCode: \"2\"\n      }, {\n        code: \"01\",\n        name: \"通信网感知\",\n        sourceCode: \"2\"\n      }, {\n        code: \"02\",\n        name: \"舆情网感知\",\n        sourceCode: \"2\"\n      }, {\n        code: \"03\",\n        name: \"电力系统感知\",\n        sourceCode: \"2\"\n      }, {\n        code: \"04\",\n        name: \"交通系统感知\",\n        sourceCode: \"2\"\n      }, {\n        code: \"05\",\n        name: \"其他\",\n        sourceCode: \"2\"\n      }, {\n        code: \"03\",\n        name: \"  \",\n        sourceCode: \"3\"\n      }],\n      catagoryValueLabelMap: [{\n        code: \"1\",\n        name: \"震情\"\n      }, {\n        code: \"2\",\n        name: \"人员伤亡及失踪\"\n      }, {\n        code: \"3\",\n        name: \"房屋破坏\"\n      }, {\n        code: \"4\",\n        name: \"生命线工程灾情\"\n      }, {\n        code: \"5\",\n        name: \"次生灾害\"\n      }, {\n        code: \"01\",\n        name: \"震情信息\",\n        disasterCode: \"1\"\n      }, {\n        code: \"01\",\n        name: \"死亡\",\n        disasterCode: \"2\"\n      }, {\n        code: \"02\",\n        name: \"受伤\",\n        disasterCode: \"2\"\n      }, {\n        code: \"03\",\n        name: \"失踪\",\n        disasterCode: \"2\"\n      }, {\n        code: \"01\",\n        name: \"土木\",\n        disasterCode: \"3\"\n      }, {\n        code: \"02\",\n        name: \"砖木\",\n        disasterCode: \"3\"\n      }, {\n        code: \"03\",\n        name: \"砖混\",\n        disasterCode: \"3\"\n      }, {\n        code: \"04\",\n        name: \"框架\",\n        disasterCode: \"3\"\n      }, {\n        code: \"05\",\n        name: \"其他\",\n        disasterCode: \"3\"\n      }, {\n        code: \"01\",\n        name: \"交通\",\n        disasterCode: \"4\"\n      }, {\n        code: \"02\",\n        name: \"供水\",\n        disasterCode: \"4\"\n      }, {\n        code: \"03\",\n        name: \"输油\",\n        disasterCode: \"4\"\n      }, {\n        code: \"04\",\n        name: \"燃气\",\n        disasterCode: \"4\"\n      }, {\n        code: \"05\",\n        name: \"电力\",\n        disasterCode: \"4\"\n      }, {\n        code: \"06\",\n        name: \"通信\",\n        disasterCode: \"4\"\n      }, {\n        code: \"07\",\n        name: \"水利\",\n        disasterCode: \"4\"\n      }, {\n        code: \"01\",\n        name: \"崩塌\",\n        disasterCode: \"5\"\n      }, {\n        code: \"02\",\n        name: \"滑坡\",\n        disasterCode: \"5\"\n      }, {\n        code: \"03\",\n        name: \"泥石流\",\n        disasterCode: \"5\"\n      }, {\n        code: \"04\",\n        name: \"岩溶塌陷\",\n        disasterCode: \"5\"\n      }, {\n        code: \"05\",\n        name: \"地裂缝\",\n        disasterCode: \"5\"\n      }, {\n        code: \"06\",\n        name: \"地面沉降\",\n        disasterCode: \"5\"\n      }, {\n        code: \"07\",\n        name: \"其他\",\n        disasterCode: \"5\"\n      }],\n      disasterCode: '',\n      disasterCodeInput: '',\n      decodedData: {\n        location: '',\n        time: '',\n        source: '',\n        carrier: '',\n        disasterType: '',\n        indicator: '',\n        description: ''\n      },\n      locationOptions: [],\n      // 存储级联下拉框数据\n      uploadParams: {},\n      // 动态传递给后端的参数\n      filePath: '',\n      // 上传后的文件路径\n\n      // 完整的地理位置数据\n      sources: [],\n      carriers: [],\n      disasterTypes: [],\n      indicators: [],\n      cascaderProps: {\n        //value: 'code', // 显示的数据绑定字段\n        value: 'code',\n        // 显示的数据绑定字段\n        label: 'name',\n        // 显示的名称字段\n        children: 'children',\n        // 子级数据字段\n        lazy: true,\n        // 启用懒加载\n        lazyLoad: this.lazyLoadData // 动态加载函数\n      },\n      sourceProps: {\n        value: 'code',\n        // 显示的数据绑定字段\n        label: 'name',\n        // 显示的名称字段\n        children: 'children',\n        // 子级数据字段\n        lazy: true,\n        // 启用懒加载\n        lazyLoad: this.lazyLoadSourceData // 动态加载函数\n      },\n      disasterTypeProps: {\n        value: 'code',\n        // 显示的数据绑定字段\n        label: 'name',\n        // 显示的名称字段\n        children: 'children',\n        // 子级数据字段\n        lazy: true,\n        // 启用懒加载\n        lazyLoad: this.lazyLoadDisasterTypeData // 动态加载函数\n      }\n    };\n  },\n  watch: {\n    'form.location': function (newValue, oldValue) {\n      console.log('form.location 变化了：', newValue);\n      console.log('变化前的值：', oldValue);\n    }\n  },\n  methods: {\n    // 获取省份数据\n    async fetchProvinces() {\n      try {\n        const response = await request.get('http://localhost:8080/api/areas/getProvinces');\n        return response.data.map(province => ({\n          code: province.code,\n          name: province.name,\n          children: [] // 初始化为空，后续会填充城市数据\n        }));\n      } catch (error) {\n        console.error('Error fetching provinces:', error);\n      }\n    },\n    // 懒加载函数，根据级别来加载不同的区域数据\n    lazyLoadData(node, resolve) {\n      const {\n        level,\n        value\n      } = node; // 获取当前节点的级别和选中的值\n      let fetchData;\n      // 根据级别来判断加载哪个数据（省 -> 市 -> 县区 -> 乡镇 -> 村庄）\n      switch (level) {\n        case 0:\n          // 省级\n          fetchData = this.fetchProvinces();\n          break;\n        case 1:\n          // 市级\n          fetchData = this.fetchCities(value);\n          break;\n        case 2:\n          // 区县级\n          fetchData = this.fetchCounties(value);\n          break;\n        case 3:\n          // 乡镇级\n          fetchData = this.fetchTowns(value);\n          break;\n        case 4:\n          // 村庄级\n          fetchData = this.fetchVillages(value);\n          break;\n        default:\n          resolve([]);\n          return;\n      }\n\n      // 获取数据后，通过 resolve 函数返回节点数据\n      fetchData.then(data => {\n        resolve(data); // 返回数据\n      }).catch(error => {\n        console.error(error);\n        resolve([]); // 如果请求失败，返回空数组\n      });\n    },\n    lazyLoadSourceData(node, resolve) {\n      const {\n        level,\n        value\n      } = node; // 获取当前节点的级别和选中的值\n      let fetchData;\n      console.log(`Lazy load triggered for level: ${level}, value: ${value}`);\n      // 根据级别来判断加载哪个数据（大类 -> 子类）\n      switch (level) {\n        case 0:\n          // 大类\n          fetchData = this.fetchSources();\n          break;\n        case 1:\n          // 子类\n          fetchData = this.fetchSubSources(value);\n          break;\n        default:\n          resolve([]);\n          return;\n      }\n\n      // 获取数据后，通过 resolve 函数返回节点数据\n      fetchData.then(data => {\n        resolve(data); // 返回数据\n      }).catch(error => {\n        console.error(error);\n        resolve([]); // 如果请求失败，返回空数组\n      });\n    },\n    lazyLoadDisasterTypeData(node, resolve) {\n      const {\n        level,\n        value\n      } = node; // 获取当前节点的级别和选中的值\n      let fetchData;\n      // 根据级别来判断加载哪个数据（大类 -> 子类）\n      switch (level) {\n        case 0:\n          // 大类\n          fetchData = this.fetchDisasterTypes();\n          break;\n        case 1:\n          // 子类\n          fetchData = this.fetchSubDisasterTypes(value);\n          break;\n        default:\n          resolve([]);\n          return;\n      }\n\n      // 获取数据后，通过 resolve 函数返回节点数据\n      fetchData.then(data => {\n        resolve(data); // 返回数据\n      }).catch(error => {\n        console.error(error);\n        resolve([]); // 如果请求失败，返回空数组\n      });\n    },\n    // 获取城市数据\n    async fetchCities(provinceCode) {\n      try {\n        const response = await request.get(`http://localhost:8080/api/areas/getCities?provinceCode=${provinceCode}`);\n        console.log(\"!!!!!!!!!!\", response.data);\n        return response.data.map(city => ({\n          code: city.code,\n          name: city.name,\n          children: ['hahaha'] // 初始化为空，后续会填充县区数据\n        }));\n      } catch (error) {\n        console.error('Error fetching cities:', error);\n      }\n    },\n    // 根据编码查找对应的label\n    getLabelFromDisasterTypes(code, callback) {\n      // 假设 disasterTypes 是你所有灾情类型数据的集合，且每个项有 'code' 和 'name'\n      const foundItem = this.disasterTypes.find(item => item.code === code);\n      if (foundItem) {\n        callback(foundItem.name); // 调用回调函数返回 label\n      } else {\n        console.warn('找不到对应的灾情类型');\n      }\n    },\n    handleDisasterSubTypeChange(node) {\n      // 打印选中的节点数组\n      console.log('选中的子节点数组:', node);\n      if (node && node.length > 0) {\n        const selectedDisasterSubTypeCode = node[0]; // 获取选中的灾情子类型编码\n\n        console.log('灾情子类型编码:', selectedDisasterSubTypeCode);\n\n        // 只在选择灾情子类型时，更新灾情子类型编码\n        if (selectedDisasterSubTypeCode !== this.selectedDisasterSubTypeCode) {\n          this.selectedDisasterSubTypeCode = selectedDisasterSubTypeCode;\n          // 不请求灾情指标，只更新子类型编码\n          console.log('灾情子类型已更新:', selectedDisasterSubTypeCode);\n        }\n      } else {\n        console.warn('没有选择灾情子类型');\n      }\n    },\n    // 这个方法请求灾情指标，只有在选择灾情类型时触发\n    async fetchIndicators(disasterTypeCode) {\n      try {\n        console.log('请求灾情指标时传递的灾情类型编码:', disasterTypeCode);\n        const response = await request.get('http://localhost:8080/disaster/indicators', {\n          params: {\n            sourceCode: disasterTypeCode\n          }\n        });\n        if (response.data) {\n          // 获取到数据后，存储到 indicators 中\n          this.indicators = response.data;\n          console.log('已获取灾情指标:', this.indicators);\n        } else {\n          console.warn('没有获取到灾情指标数据');\n          this.indicators = []; // 如果没有数据，设置为空数组\n        }\n      } catch (error) {\n        console.error('获取灾情指标时出错:', error);\n        this.indicators = []; // 如果出现错误，设置为空数组\n      }\n    },\n    // 获取县区数据\n    async fetchCounties(cityCode) {\n      try {\n        const response = await request.get(`http://localhost:8080/api/areas/getCounties?cityCode=${cityCode}`);\n        return response.data.map(county => ({\n          code: county.code,\n          name: county.name,\n          children: [] // 初始化为空，后续会填充乡镇数据\n        }));\n      } catch (error) {\n        console.error('Error fetching counties:', error);\n      }\n    },\n    // 获取乡镇数据\n    async fetchTowns(areaCode) {\n      try {\n        const response = await request.get(`http://localhost:8080/api/areas/getTowns?areaCode=${areaCode}`);\n        return response.data.map(town => ({\n          code: town.code,\n          name: town.name,\n          children: [] // 初始化为空，后续会填充村庄数据\n        }));\n      } catch (error) {\n        console.error('Error fetching towns:', error);\n      }\n    },\n    // 获取村庄数据\n    async fetchVillages(streetCode) {\n      try {\n        const response = await request.get(`http://localhost:8080/api/areas/getVillages?streetCode=${streetCode}`);\n        return response.data.map(village => ({\n          code: village.code,\n          name: village.name\n        }));\n      } catch (error) {\n        console.error('Error fetching villages:', error);\n      }\n    },\n    // 级联选择变化时的处理\n    async handleCascaderChange(value) {\n      console.log('Cascader value changed:', value);\n      const selectedData = this.getSelectedData(value, this.locationOptions);\n      console.log('Selected Data:', selectedData);\n      const [provinceCode, cityCode, countyCode, townCode, villageCode] = value;\n      // 打印传入的provinceCode\n      console.log('Selected Province Code:', provinceCode);\n      if (provinceCode) {\n        const cities = await this.fetchCities(provinceCode);\n        console.log('cities in Selected Province :', cities);\n        this.updateChildren(selectedData, cities);\n      }\n      if (cityCode) {\n        const counties = await this.fetchCounties(cityCode);\n        this.updateChildren(selectedData, counties);\n      }\n      if (countyCode) {\n        const towns = await this.fetchTowns(countyCode);\n        this.updateChildren(selectedData, towns);\n      }\n      if (townCode) {\n        const villages = await this.fetchVillages(townCode);\n        this.updateChildren(selectedData, villages);\n      }\n    },\n    // 递归解析选中路径的数据\n    getSelectedData(value, options) {\n      let result = [];\n      let currentOptions = options;\n      for (let val of value) {\n        const current = currentOptions.find(option => option.value === val);\n        if (current) {\n          result.push(current);\n          currentOptions = current.children || []; // 如果有子节点，则继续递归\n        }\n      }\n      return result;\n    },\n    // 更新级联选项的子节点\n    updateChildren(selectedData, children) {\n      console.log('Selected Data:', selectedData);\n      console.log('children:', children);\n      selectedData.forEach(data => {\n        console.log('data:', data); // 打印每个数据项 \n        console.log('selectedData:', selectedData); // 打印 selectedData 数组 \n        const lastSelectedCode = selectedData[selectedData.length - 1]?.code;\n        console.log('Last selected code:', lastSelectedCode); // 打印最后一个选中的 code\n        if (data.code === selectedData[selectedData.length - 1].code) {\n          data.children = children.map(children => ({\n            value: children.code,\n            label: children.name,\n            children: children.children || []\n          }));\n          console.log('Updated Data:', data); // 看到更新后的数据\n        }\n      });\n    },\n    // 获取后端的地理位置、灾情来源等数据\n    async fetchData() {\n      try {\n        const sourcesResponse = await request.get('http://localhost:8080/disaster/sources');\n        //console.log('Selected Province Code:', provinceCode);\n\n        const carriersResponse = await request.get('http://localhost:8080/disaster/carriers');\n        const disasterTypesResponse = await request.get('http://localhost:8080/disaster/types');\n        const indicatorsResponse = await request.get('http://localhost:8080/disaster/indicators');\n        console.log('载体', carriersResponse);\n        console.log('灾情类型', disasterTypesResponse);\n        console.log('指标', indicatorsResponse);\n\n        // 设置其他下拉选项数据\n        this.sources = sourcesResponse.data;\n        this.carriers = carriersResponse.data;\n        this.disasterTypes = disasterTypesResponse.data;\n        this.indicators = indicatorsResponse.data;\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    // 生成灾情码并生成符合格式的数据\n    generateDisasterCode() {\n      const location = this.form.location.join('/'); // 获取省市区县的组合\n      const time = this.form.time.toISOString().split('T')[0].replace(/-/g, '');\n      const source = this.form.source;\n      const carrier = this.form.carrier;\n      const disasterType = this.form.disasterType;\n      const indicator = this.form.indicator;\n      const description = this.form.description;\n      console.log(\"地理位置\", Location);\n\n      // 生成字典\n      const dict = this.valueLabelMap.reduce((acc, item) => {\n        acc[item.code] = item.name;\n        return acc;\n      }, {});\n      const catadict = this.catagoryValueLabelMap.reduce((acc, item) => {\n        acc[item.code] = item.name;\n        return acc;\n      }, {});\n      const catadict2 = this.catagoryValueLabelMap.reduce((acc, item) => {\n        const key = `${item.code}_${item.disasterCode}`; // 合并 code 和 name\n        acc[key] = item; // 将 item 本身作为值\n        return acc;\n      }, {});\n      const sourcedict = this.sourceValueLabelMap.reduce((acc, item) => {\n        acc[item.code] = item.name;\n        return acc;\n      }, {});\n      console.log(\"来源\", catadict2[`${disasterType[1]}_${disasterType[0]}`]['name']);\n      console.log(\"来源222\", `${disasterType[1]}_${disasterType[0]}`);\n      const disasterData = {\n        province: dict[location.split('/')[0]],\n        // 北京\n        city: dict[location.split('/')[1]],\n        // 北京市\n        country: dict[location.split('/')[2]],\n        // 门头沟区\n        town: dict[location.split('/')[3]],\n        // 永定路街道\n        village: dict[location.split('/')[4]],\n        // 采石路7号社区居委会\n        category: null,\n        // 房屋破坏\n        date: time,\n        // 2024-12-24T14:00:00\n        location: location.split('/')[1],\n        // 北京市\n        detail: description,\n        // 发生山洪\n        reportingUnit: null,\n        // 门头沟地质局\n        sourceCategory: sourcedict[source[0]],\n        // 业务报送数据\n        sourceSubCategory: sourcedict[source[1]],\n        // 灾情快速上报接收处理系统\n        carrierForm: carrier,\n        // 图像\n        link: null,\n        // 传输数据链接\n        disasterMajorCategory: catadict[disasterType[0]],\n        // 房屋破坏\n        disasterSubCategory: catadict2[`${disasterType[1]}_${disasterType[0]}`]['name'],\n        // 固定示例，若有其他信息可以动态填充\n        disasterIndicator: indicator // 一般损坏面积\n      };\n      this.sendDisasterData(disasterData); // 调用发送接口方法\n    },\n    // 生成灾情码\n    generateDisasterCode() {\n      const location = this.form.location.join('/');\n      const time = this.form.time;\n      const source = this.form.source;\n      const carrier = this.form.carrier;\n      const disasterType = this.form.disasterType;\n      const indicator = this.form.indicator;\n      const description = this.form.description;\n      this.disasterCode = `${location}|${time}|${source}|${carrier}|${disasterType}|${indicator}|${description}`;\n    },\n    // 上传灾情信息\n    async submitDisasterInfo() {\n      const disasterInfo = {\n        location: this.form.location.join('/'),\n        time: this.form.time,\n        source: this.form.source,\n        carrier: this.form.carrier,\n        disasterType: this.form.disasterType,\n        indicator: this.form.indicator,\n        description: this.form.description\n      };\n      try {\n        const response = await request.post('http://localhost:8080/add', disasterInfo);\n        console.log('Disaster information uploaded successfully:', response);\n      } catch (error) {\n        console.error('Error uploading disaster information:', error);\n      }\n    },\n    async fetchAllDisasterInfo() {\n      try {\n        const requestData = {\n          disasterCode: this.disasterCodeInput\n        };\n\n        // 发送 POST 请求\n        const response = await request.post('http://localhost:8080/decode', requestData, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log(\"Response from backend:\", response);\n        console.log(\"Response data:\", response.data);\n        console.log(\"Response data type:\", response.data.code);\n        if (response && response.data) {\n          // 后端返回的 `data` 是 JSON 对象，直接解析\n          const disasterInfo = response.data;\n\n          // 将解析后的字段赋值到 `decodedData`\n          this.decodedData = {\n            location: disasterInfo.location || \"\",\n            time: disasterInfo.date || \"\",\n            source: `${disasterInfo.sourceCategory || \"\"} - ${disasterInfo.sourceSubCategory || \"\"}`,\n            carrier: disasterInfo.carrierForm || \"\",\n            disasterType: `${disasterInfo.disasterMajorCategory || \"\"} - ${disasterInfo.disasterSubCategory || \"\"}`,\n            indicator: disasterInfo.disasterIndicator || \"\",\n            description: disasterInfo.detail || \"\"\n          };\n          console.log(\"Decoded disaster information:\", this.decodedData);\n        } else {\n          console.error(\"No response data received from backend.\");\n          this.$notify.error(\"未从后端接收到数据，请检查服务器！\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching all disaster information:\", error);\n        this.$notify.error(\"请求失败，请检查网络或后端服务！\");\n      }\n    },\n    // 自定义上传请求逻辑\n    async customUploadRequest({\n      file\n    }) {\n      // 获取灾情码\n      const disasterCode = this.disasterCodeInput;\n      if (!disasterCode) {\n        this.$notify.error(\"请先输入灾情码！\");\n        return;\n      }\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      formData.append(\"disasterCode\", disasterCode);\n      try {\n        // 调用后端上传接口\n        const response = await request.post(\"http://localhost:8080/files/upload\", formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        });\n        if (response.data.code === \"0\") {\n          // 保存文件路径\n          this.filePath = response.data.data.link || \"\";\n          this.$notify.success(\"文件上传成功！\");\n          // 调用文件解码接口\n          this.decodeFile();\n        } else {\n          this.$notify.error(response.data.msg || \"文件上传失败！\");\n        }\n      } catch (error) {\n        console.error(\"File upload failed:\", error);\n        this.$notify.error(\"文件上传失败，请检查后端服务！\");\n      }\n    },\n    // 文件解码方法\n    async decodeFile() {\n      try {\n        const decodeResponse = await request.post(\"http://localhost:8080/decodeFromFile\", {\n          disasterCode: this.disasterCodeInput,\n          fileLink: this.filePath\n        });\n        if (decodeResponse.data.code === \"0\") {\n          this.$notify.success(\"解码并存储灾情信息成功！\");\n        } else {\n          this.$notify.error(decodeResponse.data.msg || \"解码失败！\");\n        }\n      } catch (error) {\n        console.error(\"Error decoding and storing disaster info:\", error);\n        this.$notify.error(\"解码失败，请检查后端服务！\");\n      }\n    },\n    // 在上传文件前动态设置参数\n    beforeFileUpload(file) {\n      const fileName = file.name;\n      const fileParts = fileName.split(\".\"); // 拆分文件名\n      const disasterCode = fileParts[0]; // 假定文件名格式为: 灾情编码.文件格式\n\n      if (!disasterCode) {\n        this.$notify.error('文件名格式错误，请确保文件名为 \"灾情编码.文件格式\"');\n        return false; // 取消上传\n      }\n\n      // 保存灾情编码到变量\n      this.disasterCodeInput = disasterCode;\n      return true; // 允许上传\n    }\n  },\n  mounted() {\n    // 获取初始的省份数据\n    this.fetchProvinces().then(provinces => {\n      this.locationOptions = provinces;\n    }).catch(error => {\n      console.error(\"Error fetching provinces:\", error);\n    });\n    this.fetchData().catch(error => {\n      console.error(\"Error fetching other data:\", error);\n    });\n  }\n};","map":{"version":3,"names":["request","data","form","location","time","source","carrier","disasterType","indicator","description","sourceValueLabelMap","code","name","sourceCode","catagoryValueLabelMap","disasterCode","disasterCodeInput","decodedData","locationOptions","uploadParams","filePath","sources","carriers","disasterTypes","indicators","cascaderProps","value","label","children","lazy","lazyLoad","lazyLoadData","sourceProps","lazyLoadSourceData","disasterTypeProps","lazyLoadDisasterTypeData","watch","form.location","newValue","oldValue","console","log","methods","fetchProvinces","response","get","map","province","error","node","resolve","level","fetchData","fetchCities","fetchCounties","fetchTowns","fetchVillages","then","catch","fetchSources","fetchSubSources","fetchDisasterTypes","fetchSubDisasterTypes","provinceCode","city","getLabelFromDisasterTypes","callback","foundItem","find","item","warn","handleDisasterSubTypeChange","length","selectedDisasterSubTypeCode","fetchIndicators","disasterTypeCode","params","cityCode","county","areaCode","town","streetCode","village","handleCascaderChange","selectedData","getSelectedData","countyCode","townCode","villageCode","cities","updateChildren","counties","towns","villages","options","result","currentOptions","val","current","option","push","forEach","lastSelectedCode","sourcesResponse","carriersResponse","disasterTypesResponse","indicatorsResponse","generateDisasterCode","join","toISOString","split","replace","Location","dict","valueLabelMap","reduce","acc","catadict","catadict2","key","sourcedict","disasterData","country","category","date","detail","reportingUnit","sourceCategory","sourceSubCategory","carrierForm","link","disasterMajorCategory","disasterSubCategory","disasterIndicator","sendDisasterData","submitDisasterInfo","disasterInfo","post","fetchAllDisasterInfo","requestData","headers","$notify","customUploadRequest","file","formData","FormData","append","success","decodeFile","msg","decodeResponse","fileLink","beforeFileUpload","fileName","fileParts","mounted","provinces"],"sources":["src/views/manager/Upload.vue"],"sourcesContent":["<template>\n  <div class=\"main-body-content\">\n    <div class=\"main-body-header\">灾情信息上传</div>\n\n    <!-- 编码部分 -->\n    <el-card class=\"form-card\" :body-style=\"{ padding: '20px' }\">\n      <div class=\"form-title\">灾情信息编码</div>\n      <el-form :model=\"form\" label-position=\"right\" label-width=\"120px\">\n        <el-row>\n          <!-- 地理位置 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情地理位置\">\n              <el-cascader size=\"small\" v-model=\"form.location\" :options=\"locationOptions\" :props=\"cascaderProps\"\n                placeholder=\"请选择完整的地理位置\" @change=\"(value, selectedData) => handleCascaderChange(value, selectedData)\"\n                change-on-select></el-cascader></el-form-item>\n          </el-col>\n\n\n\n          <!-- 时间 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情时间\">\n              <el-date-picker v-model=\"form.time\" type=\"datetime\" placeholder=\"请选择灾情时间\" size=\"small\"></el-date-picker>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <el-row>\n          <!-- 来源 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情来源\">\n              <el-select size=\"small\" v-model=\"form.source\" placeholder=\"请选择灾情来源\">\n                <el-option v-for=\"(source, index) in sources\" :key=\"index\" :label=\"source\" :value=\"source\"></el-option>\n              </el-select>\n            </el-form-item>\n          </el-col>\n\n          <!-- 载体类型 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情载体类型\">\n              <el-select size=\"small\" v-model=\"form.carrier\" placeholder=\"请选择灾情载体类型\">\n                <el-option v-for=\"(carrier, index) in carriers\" :key=\"index\" :label=\"carrier\"\n                  :value=\"carrier\"></el-option>\n              </el-select>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <el-row>\n          <!-- 灾情分类 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情分类\">\n              <el-select size=\"small\" v-model=\"form.disasterType\" placeholder=\"请选择灾情分类\">\n                <el-option v-for=\"(type, index) in disasterTypes\" :key=\"index\" :label=\"type\" :value=\"type\"></el-option>\n              </el-select>\n            </el-form-item>\n          </el-col>\n\n          <!-- 灾情指标分类 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情指标分类\">\n              <el-select size=\"small\" v-model=\"form.indicator\" placeholder=\"请选择灾情指标分类\">\n                <el-option v-for=\"(indicator, index) in indicators\" :key=\"index\" :label=\"indicator\"\n                  :value=\"indicator\"></el-option>\n              </el-select>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <!-- 富文本框，放在编码部分 -->\n        <el-form-item label=\"灾情描述\" style=\"margin-top: 10px;\">\n          <el-input type=\"textarea\" size=\"small\" v-model=\"form.description\" placeholder=\"请输入灾情描述\" rows=\"4\"\n            style=\"resize: none; width: 100%;\"></el-input>\n        </el-form-item>\n\n        <!-- 生成灾情码按钮 -->\n        <el-form-item>\n          <el-button size=\"small\" type=\"primary\" @click=\"generateDisasterCode\">生成灾情码</el-button>\n        </el-form-item>\n      </el-form>\n\n      <div class=\"disaster-code-display\">\n        <el-input size=\"small\" :value=\"disasterCode\" placeholder=\"生成的灾情码\" readonly></el-input>\n      </div>\n    </el-card>\n\n    <el-card class=\"form-card\" :body-style=\"{ padding: '20px' }\">\n      <div class=\"form-title\">灾情信息解码</div>\n      <el-form :model=\"form\" label-position=\"right\" label-width=\"120px\">\n        <el-form-item label=\"灾情码\">\n          <el-input size=\"small\" v-model=\"disasterCodeInput\" placeholder=\"请输入灾情码\"></el-input>\n        </el-form-item>\n\n\n\n\n        <el-form-item label=\"上传文件\">\n          <el-upload :http-request=\"customUploadRequest\" :before-upload=\"beforeFileUpload\" list-type=\"text\"\n            style=\"width: 100%;\">\n            <el-button size=\"small\" type=\"success\">点击上传文件</el-button>\n          </el-upload>\n        </el-form-item>\n        >\n\n\n        <el-form-item style=\"margin-top: 15px;\">\n          <el-button size=\"small\" type=\"primary\" @click=\"fetchAllDisasterInfo\">解码灾情码</el-button>\n        </el-form-item>\n\n        <el-row>\n          <!-- 解码后的地理位置 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情地理位置\">\n              <el-input size=\"small\" v-model=\"decodedData.location\" readonly></el-input>\n            </el-form-item>\n          </el-col>\n\n          <!-- 解码后的时间 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情时间\">\n              <el-input size=\"small\" v-model=\"decodedData.time\" readonly></el-input>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <el-row>\n          <!-- 解码后的来源 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情来源\">\n              <el-input size=\"small\" v-model=\"decodedData.source\" readonly></el-input>\n            </el-form-item>\n          </el-col>\n\n          <!-- 解码后的载体类型 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情载体类型\">\n              <el-input size=\"small\" v-model=\"decodedData.carrier\" readonly></el-input>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <el-row>\n          <!-- 解码后的灾情分类 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情分类\">\n              <el-input size=\"small\" v-model=\"decodedData.disasterType\" readonly></el-input>\n            </el-form-item>\n          </el-col>\n\n          <!-- 解码后的灾情指标分类 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情指标分类\">\n              <el-input size=\"small\" v-model=\"decodedData.indicator\" readonly></el-input>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <!-- 解码后的描述 -->\n        <el-form-item label=\"灾情描述\">\n          <el-input type=\"textarea\" size=\"small\" v-model=\"decodedData.description\" readonly></el-input>\n        </el-form-item>\n      </el-form>\n    </el-card>\n\n  </div>\n</template>\n\n<script>\nimport request from \"@/utils/request\";  // 使用封装的 axios 实例\n\nexport default {\n  data() {\n    return {\n      form: {\n        location: [],\n        time: '',\n        source: '',\n        carrier: '',\n        disasterType: '',\n        indicator: '',\n        description: ''\n      },\n      sourceValueLabelMap: [\n        { code: \"1\", name: \"业务报送数据\" },\n        { code: \"2\", name: \"泛在感知数据\" },\n        { code: \"3\", name: \"其他数据\" },\n        { code: \"00\", name: \"前方地震应急指挥部\", sourceCode: \"1\" },\n        { code: \"01\", name: \"后方地震应急指挥部\", sourceCode: \"1\" },\n        { code: \"20\", name: \"应急指挥技术系统\", sourceCode: \"1\" },\n        { code: \"21\", name: \"社会服务工程应急救援系统\", sourceCode: \"1\" },\n        { code: \"40\", name: \"危险区预评估工作组\", sourceCode: \"1\" },\n        { code: \"41\", name: \"地震应急指挥技术协调组\", sourceCode: \"1\" },\n        { code: \"42\", name: \"震后政府信息支持工作项目组\", sourceCode: \"1\" },\n        { code: \"80\", name: \"灾情快速上报接收处理系统\", sourceCode: \"1\" },\n        { code: \"81\", name: \"地方地震局应急信息服务相关技术系统\", sourceCode: \"1\" },\n        { code: \"99\", name: \"其他\", sourceCode: \"1\" },\n        { code: \"00\", name: \"互联网感知\", sourceCode: \"2\" },\n        { code: \"01\", name: \"通信网感知\", sourceCode: \"2\" },\n        { code: \"02\", name: \"舆情网感知\", sourceCode: \"2\" },\n        { code: \"03\", name: \"电力系统感知\", sourceCode: \"2\" },\n        { code: \"04\", name: \"交通系统感知\", sourceCode: \"2\" },\n        { code: \"05\", name: \"其他\", sourceCode: \"2\" },\n        { code: \"03\", name: \"  \", sourceCode: \"3\" }\n\n      ],\n      catagoryValueLabelMap: [\n        { code: \"1\", name: \"震情\" },\n        { code: \"2\", name: \"人员伤亡及失踪\" },\n        { code: \"3\", name: \"房屋破坏\" },\n        { code: \"4\", name: \"生命线工程灾情\" },\n        { code: \"5\", name: \"次生灾害\" },\n        { code: \"01\", name: \"震情信息\", disasterCode: \"1\" },\n        { code: \"01\", name: \"死亡\", disasterCode: \"2\" },\n        { code: \"02\", name: \"受伤\", disasterCode: \"2\" },\n        { code: \"03\", name: \"失踪\", disasterCode: \"2\" },\n        { code: \"01\", name: \"土木\", disasterCode: \"3\" },\n        { code: \"02\", name: \"砖木\", disasterCode: \"3\" },\n        { code: \"03\", name: \"砖混\", disasterCode: \"3\" },\n        { code: \"04\", name: \"框架\", disasterCode: \"3\" },\n        { code: \"05\", name: \"其他\", disasterCode: \"3\" },\n        { code: \"01\", name: \"交通\", disasterCode: \"4\" },\n        { code: \"02\", name: \"供水\", disasterCode: \"4\" },\n        { code: \"03\", name: \"输油\", disasterCode: \"4\" },\n        { code: \"04\", name: \"燃气\", disasterCode: \"4\" },\n        { code: \"05\", name: \"电力\", disasterCode: \"4\" },\n        { code: \"06\", name: \"通信\", disasterCode: \"4\" },\n        { code: \"07\", name: \"水利\", disasterCode: \"4\" },\n        { code: \"01\", name: \"崩塌\", disasterCode: \"5\" },\n        { code: \"02\", name: \"滑坡\", disasterCode: \"5\" },\n        { code: \"03\", name: \"泥石流\", disasterCode: \"5\" },\n        { code: \"04\", name: \"岩溶塌陷\", disasterCode: \"5\" },\n        { code: \"05\", name: \"地裂缝\", disasterCode: \"5\" },\n        { code: \"06\", name: \"地面沉降\", disasterCode: \"5\" },\n        { code: \"07\", name: \"其他\", disasterCode: \"5\" }\n      ],\n\n      disasterCode: '',\n      disasterCodeInput: '',\n      decodedData: {\n        location: '',\n        time: '',\n        source: '',\n        carrier: '',\n        disasterType: '',\n        indicator: '',\n        description: ''\n      },\n      locationOptions: [],  // 存储级联下拉框数据\n      uploadParams: {}, // 动态传递给后端的参数\n      filePath: '', // 上传后的文件路径\n\n\n      // 完整的地理位置数据\n      sources: [],\n      carriers: [],\n      disasterTypes: [],\n      indicators: [],\n      cascaderProps: {\n        //value: 'code', // 显示的数据绑定字段\n        value: 'code', // 显示的数据绑定字段\n        label: 'name', // 显示的名称字段\n        children: 'children', // 子级数据字段\n        lazy: true, // 启用懒加载\n        lazyLoad: this.lazyLoadData // 动态加载函数\n      },\n      sourceProps: {\n        value: 'code', // 显示的数据绑定字段\n        label: 'name', // 显示的名称字段\n        children: 'children', // 子级数据字段\n        lazy: true, // 启用懒加载\n        lazyLoad: this.lazyLoadSourceData // 动态加载函数\n      },\n      disasterTypeProps: {\n        value: 'code', // 显示的数据绑定字段\n        label: 'name', // 显示的名称字段\n        children: 'children', // 子级数据字段\n        lazy: true, // 启用懒加载\n        lazyLoad: this.lazyLoadDisasterTypeData // 动态加载函数\n      }\n\n\n    };\n  },\n  watch: {\n    'form.location': function (newValue, oldValue) {\n      console.log('form.location 变化了：', newValue);\n      console.log('变化前的值：', oldValue);\n    }\n  },\n\n  methods: {\n    // 获取省份数据\n    async fetchProvinces() {\n      try {\n        const response = await request.get('http://localhost:8080/api/areas/getProvinces');\n        return response.data.map(province => ({\n          code: province.code,\n          name: province.name,\n          children: []  // 初始化为空，后续会填充城市数据\n        }));\n      } catch (error) {\n        console.error('Error fetching provinces:', error);\n      }\n    },\n    // 懒加载函数，根据级别来加载不同的区域数据\n    lazyLoadData(node, resolve) {\n      const { level, value } = node;  // 获取当前节点的级别和选中的值\n      let fetchData;\n      // 根据级别来判断加载哪个数据（省 -> 市 -> 县区 -> 乡镇 -> 村庄）\n      switch (level) {\n        case 0: // 省级\n          fetchData = this.fetchProvinces();\n          break;\n        case 1: // 市级\n          fetchData = this.fetchCities(value);\n          break;\n        case 2: // 区县级\n          fetchData = this.fetchCounties(value);\n          break;\n        case 3: // 乡镇级\n          fetchData = this.fetchTowns(value);\n          break;\n        case 4: // 村庄级\n          fetchData = this.fetchVillages(value);\n          break;\n        default:\n          resolve([]);\n          return;\n      }\n\n      // 获取数据后，通过 resolve 函数返回节点数据\n      fetchData.then(data => {\n        resolve(data); // 返回数据\n      }).catch(error => {\n        console.error(error);\n        resolve([]); // 如果请求失败，返回空数组\n      });\n    },\n    lazyLoadSourceData(node, resolve) {\n      const { level, value } = node;  // 获取当前节点的级别和选中的值\n      let fetchData;\n      console.log(`Lazy load triggered for level: ${level}, value: ${value}`);\n      // 根据级别来判断加载哪个数据（大类 -> 子类）\n      switch (level) {\n        case 0: // 大类\n          fetchData = this.fetchSources();\n          break;\n        case 1: // 子类\n          fetchData = this.fetchSubSources(value);\n          break;\n        default:\n          resolve([]);\n          return;\n      }\n\n      // 获取数据后，通过 resolve 函数返回节点数据\n      fetchData.then(data => {\n        resolve(data); // 返回数据\n      }).catch(error => {\n        console.error(error);\n        resolve([]); // 如果请求失败，返回空数组\n      });\n    },\n    lazyLoadDisasterTypeData(node, resolve) {\n      const { level, value } = node;  // 获取当前节点的级别和选中的值\n      let fetchData;\n      // 根据级别来判断加载哪个数据（大类 -> 子类）\n      switch (level) {\n        case 0: // 大类\n          fetchData = this.fetchDisasterTypes();\n          break;\n        case 1: // 子类\n          fetchData = this.fetchSubDisasterTypes(value);\n          break;\n        default:\n          resolve([]);\n          return;\n      }\n\n      // 获取数据后，通过 resolve 函数返回节点数据\n      fetchData.then(data => {\n        resolve(data); // 返回数据\n      }).catch(error => {\n        console.error(error);\n        resolve([]); // 如果请求失败，返回空数组\n      });\n    },\n\n    // 获取城市数据\n    async fetchCities(provinceCode) {\n      try {\n        const response = await request.get(`http://localhost:8080/api/areas/getCities?provinceCode=${provinceCode}`);\n        console.log(\"!!!!!!!!!!\", response.data);\n        return response.data.map(city => ({\n          code: city.code,\n          name: city.name,\n          children: ['hahaha']  // 初始化为空，后续会填充县区数据\n        }));\n      } catch (error) {\n        console.error('Error fetching cities:', error);\n      }\n    },\n    // 根据编码查找对应的label\n    getLabelFromDisasterTypes(code, callback) {\n      // 假设 disasterTypes 是你所有灾情类型数据的集合，且每个项有 'code' 和 'name'\n      const foundItem = this.disasterTypes.find(item => item.code === code);\n      if (foundItem) {\n        callback(foundItem.name);  // 调用回调函数返回 label\n      } else {\n        console.warn('找不到对应的灾情类型');\n      }\n    },\n    handleDisasterSubTypeChange(node) {\n      // 打印选中的节点数组\n      console.log('选中的子节点数组:', node);\n\n      if (node && node.length > 0) {\n        const selectedDisasterSubTypeCode = node[0];  // 获取选中的灾情子类型编码\n\n        console.log('灾情子类型编码:', selectedDisasterSubTypeCode);\n\n        // 只在选择灾情子类型时，更新灾情子类型编码\n        if (selectedDisasterSubTypeCode !== this.selectedDisasterSubTypeCode) {\n          this.selectedDisasterSubTypeCode = selectedDisasterSubTypeCode;\n          // 不请求灾情指标，只更新子类型编码\n          console.log('灾情子类型已更新:', selectedDisasterSubTypeCode);\n        }\n      } else {\n        console.warn('没有选择灾情子类型');\n      }\n    },\n\n    // 这个方法请求灾情指标，只有在选择灾情类型时触发\n    async fetchIndicators(disasterTypeCode) {\n      try {\n        console.log('请求灾情指标时传递的灾情类型编码:', disasterTypeCode);\n        const response = await request.get('http://localhost:8080/disaster/indicators', {\n          params: { sourceCode: disasterTypeCode }\n        });\n\n        if (response.data) {\n          // 获取到数据后，存储到 indicators 中\n          this.indicators = response.data;\n          console.log('已获取灾情指标:', this.indicators);\n        } else {\n          console.warn('没有获取到灾情指标数据');\n          this.indicators = [];  // 如果没有数据，设置为空数组\n        }\n      } catch (error) {\n        console.error('获取灾情指标时出错:', error);\n        this.indicators = [];  // 如果出现错误，设置为空数组\n      }\n    },\n\n    // 获取县区数据\n    async fetchCounties(cityCode) {\n      try {\n        const response = await request.get(`http://localhost:8080/api/areas/getCounties?cityCode=${cityCode}`);\n        return response.data.map(county => ({\n          code: county.code,\n          name: county.name,\n          children: []  // 初始化为空，后续会填充乡镇数据\n        }));\n      } catch (error) {\n        console.error('Error fetching counties:', error);\n      }\n    },\n\n    // 获取乡镇数据\n    async fetchTowns(areaCode) {\n      try {\n        const response = await request.get(`http://localhost:8080/api/areas/getTowns?areaCode=${areaCode}`);\n        return response.data.map(town => ({\n          code: town.code,\n          name: town.name,\n          children: []  // 初始化为空，后续会填充村庄数据\n        }));\n      } catch (error) {\n        console.error('Error fetching towns:', error);\n      }\n    },\n\n    // 获取村庄数据\n    async fetchVillages(streetCode) {\n      try {\n        const response = await request.get(`http://localhost:8080/api/areas/getVillages?streetCode=${streetCode}`);\n        return response.data.map(village => ({\n          code: village.code,\n          name: village.name\n        }));\n      } catch (error) {\n        console.error('Error fetching villages:', error);\n      }\n    },\n\n    // 级联选择变化时的处理\n    async handleCascaderChange(value) {\n      console.log('Cascader value changed:', value);\n      const selectedData = this.getSelectedData(value, this.locationOptions);\n      console.log('Selected Data:', selectedData);\n      const [provinceCode, cityCode, countyCode, townCode, villageCode] = value;\n      // 打印传入的provinceCode\n      console.log('Selected Province Code:', provinceCode);\n\n      if (provinceCode) {\n        const cities = await this.fetchCities(provinceCode);\n        console.log('cities in Selected Province :', cities);\n        this.updateChildren(selectedData, cities);\n      }\n      if (cityCode) {\n        const counties = await this.fetchCounties(cityCode);\n        this.updateChildren(selectedData, counties);\n      }\n      if (countyCode) {\n        const towns = await this.fetchTowns(countyCode);\n        this.updateChildren(selectedData, towns);\n      }\n      if (townCode) {\n        const villages = await this.fetchVillages(townCode);\n        this.updateChildren(selectedData, villages);\n      }\n    },\n    // 递归解析选中路径的数据\n    getSelectedData(value, options) {\n      let result = [];\n      let currentOptions = options;\n\n      for (let val of value) {\n        const current = currentOptions.find(option => option.value === val);\n        if (current) {\n          result.push(current);\n          currentOptions = current.children || []; // 如果有子节点，则继续递归\n        }\n      }\n\n      return result;\n    },\n    // 更新级联选项的子节点\n    updateChildren(selectedData, children) {\n      console.log('Selected Data:', selectedData);\n      console.log('children:', children);\n\n      selectedData.forEach(data => {\n        console.log('data:', data); // 打印每个数据项 \n        console.log('selectedData:', selectedData); // 打印 selectedData 数组 \n        const lastSelectedCode = selectedData[selectedData.length - 1]?.code;\n        console.log('Last selected code:', lastSelectedCode); // 打印最后一个选中的 code\n        if (data.code === selectedData[selectedData.length - 1].code) {\n          data.children = children.map(children => ({\n            value: children.code,\n            label: children.name,\n            children: children.children || []\n\n          }));\n          console.log('Updated Data:', data);  // 看到更新后的数据\n        }\n      });\n    },\n\n    // 获取后端的地理位置、灾情来源等数据\n    async fetchData() {\n      try {\n        const sourcesResponse = await request.get('http://localhost:8080/disaster/sources');\n        //console.log('Selected Province Code:', provinceCode);\n\n        const carriersResponse = await request.get('http://localhost:8080/disaster/carriers');\n        const disasterTypesResponse = await request.get('http://localhost:8080/disaster/types');\n        const indicatorsResponse = await request.get('http://localhost:8080/disaster/indicators');\n        console.log('载体', carriersResponse);\n        console.log('灾情类型', disasterTypesResponse);\n        console.log('指标', indicatorsResponse);\n\n        // 设置其他下拉选项数据\n        this.sources = sourcesResponse.data;\n        this.carriers = carriersResponse.data;\n        this.disasterTypes = disasterTypesResponse.data;\n        this.indicators = indicatorsResponse.data;\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    // 生成灾情码并生成符合格式的数据\n    generateDisasterCode() {\n      const location = this.form.location.join('/');  // 获取省市区县的组合\n      const time = this.form.time.toISOString().split('T')[0].replace(/-/g, '');\n      const source = this.form.source;\n      const carrier = this.form.carrier;\n      const disasterType = this.form.disasterType;\n      const indicator = this.form.indicator;\n      const description = this.form.description;\n      console.log(\"地理位置\", Location);\n\n      // 生成字典\n      const dict = this.valueLabelMap.reduce((acc, item) => {\n        acc[item.code] = item.name;\n        return acc;\n      }, {});\n      const catadict = this.catagoryValueLabelMap.reduce((acc, item) => {\n        acc[item.code] = item.name;\n        return acc;\n      }, {});\n      const catadict2 = this.catagoryValueLabelMap.reduce((acc, item) => {\n        const key = `${item.code}_${item.disasterCode}`;  // 合并 code 和 name\n        acc[key] = item;  // 将 item 本身作为值\n        return acc;\n      }, {});\n      const sourcedict = this.sourceValueLabelMap.reduce((acc, item) => {\n        acc[item.code] = item.name;\n        return acc;\n      }, {});\n      console.log(\"来源\", catadict2[`${disasterType[1]}_${disasterType[0]}`]['name']);\n      console.log(\"来源222\", `${disasterType[1]}_${disasterType[0]}`);\n      const disasterData = {\n        province: dict[location.split('/')[0]],  // 北京\n        city: dict[location.split('/')[1]],     // 北京市\n        country: dict[location.split('/')[2]],  // 门头沟区\n        town: dict[location.split('/')[3]], // 永定路街道\n        village: dict[location.split('/')[4]],   // 采石路7号社区居委会\n        category: null,  // 房屋破坏\n        date: time,  // 2024-12-24T14:00:00\n        location: location.split('/')[1],  // 北京市\n        detail: description,  // 发生山洪\n        reportingUnit: null,  // 门头沟地质局\n        sourceCategory: sourcedict[source[0]],  // 业务报送数据\n        sourceSubCategory: sourcedict[source[1]],  // 灾情快速上报接收处理系统\n        carrierForm: carrier,  // 图像\n        link: null,  // 传输数据链接\n        disasterMajorCategory: catadict[disasterType[0]],  // 房屋破坏\n        disasterSubCategory: catadict2[`${disasterType[1]}_${disasterType[0]}`]['name'],  // 固定示例，若有其他信息可以动态填充\n        disasterIndicator: indicator  // 一般损坏面积\n      };\n\n\n      this.sendDisasterData(disasterData);  // 调用发送接口方法\n    },\n\n    // 生成灾情码\n    generateDisasterCode() {\n      const location = this.form.location.join('/');\n      const time = this.form.time;\n      const source = this.form.source;\n      const carrier = this.form.carrier;\n      const disasterType = this.form.disasterType;\n      const indicator = this.form.indicator;\n      const description = this.form.description;\n\n      this.disasterCode = `${location}|${time}|${source}|${carrier}|${disasterType}|${indicator}|${description}`;\n    },\n\n\n\n    // 上传灾情信息\n    async submitDisasterInfo() {\n      const disasterInfo = {\n        location: this.form.location.join('/'),\n        time: this.form.time,\n        source: this.form.source,\n        carrier: this.form.carrier,\n        disasterType: this.form.disasterType,\n        indicator: this.form.indicator,\n        description: this.form.description\n      };\n\n      try {\n        const response = await request.post('http://localhost:8080/add', disasterInfo);\n        console.log('Disaster information uploaded successfully:', response);\n      } catch (error) {\n        console.error('Error uploading disaster information:', error);\n      }\n    },\n    async fetchAllDisasterInfo() {\n      try {\n        const requestData = {\n          disasterCode: this.disasterCodeInput\n        };\n\n        // 发送 POST 请求\n        const response = await request.post('http://localhost:8080/decode', requestData, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        console.log(\"Response from backend:\", response);\n        console.log(\"Response data:\", response.data);\n        console.log(\"Response data type:\", response.data.code);\n\n        if (response && response.data) {\n\n          // 后端返回的 `data` 是 JSON 对象，直接解析\n          const disasterInfo = response.data;\n\n          // 将解析后的字段赋值到 `decodedData`\n          this.decodedData = {\n            location: disasterInfo.location || \"\",\n            time: disasterInfo.date || \"\",\n            source: `${disasterInfo.sourceCategory || \"\"} - ${disasterInfo.sourceSubCategory || \"\"}`,\n            carrier: disasterInfo.carrierForm || \"\",\n            disasterType: `${disasterInfo.disasterMajorCategory || \"\"} - ${disasterInfo.disasterSubCategory || \"\"}`,\n            indicator: disasterInfo.disasterIndicator || \"\",\n            description: disasterInfo.detail || \"\"\n          };\n\n          console.log(\"Decoded disaster information:\", this.decodedData);\n\n        } else {\n          console.error(\"No response data received from backend.\");\n          this.$notify.error(\"未从后端接收到数据，请检查服务器！\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching all disaster information:\", error);\n        this.$notify.error(\"请求失败，请检查网络或后端服务！\");\n      }\n    },\n\n    // 自定义上传请求逻辑\n    async customUploadRequest({ file }) {\n      // 获取灾情码\n      const disasterCode = this.disasterCodeInput;\n\n      if (!disasterCode) {\n        this.$notify.error(\"请先输入灾情码！\");\n        return;\n      }\n\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      formData.append(\"disasterCode\", disasterCode);\n\n      try {\n        // 调用后端上传接口\n        const response = await request.post(\"http://localhost:8080/files/upload\", formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\",\n          },\n        });\n\n        if (response.data.code === \"0\") {\n          // 保存文件路径\n          this.filePath = response.data.data.link || \"\";\n          this.$notify.success(\"文件上传成功！\");\n          // 调用文件解码接口\n          this.decodeFile();\n        } else {\n          this.$notify.error(response.data.msg || \"文件上传失败！\");\n        }\n      } catch (error) {\n        console.error(\"File upload failed:\", error);\n        this.$notify.error(\"文件上传失败，请检查后端服务！\");\n      }\n    },\n\n    // 文件解码方法\n    async decodeFile() {\n      try {\n        const decodeResponse = await request.post(\"http://localhost:8080/decodeFromFile\", {\n          disasterCode: this.disasterCodeInput,\n          fileLink: this.filePath,\n        });\n\n        if (decodeResponse.data.code === \"0\") {\n          this.$notify.success(\"解码并存储灾情信息成功！\");\n        } else {\n          this.$notify.error(decodeResponse.data.msg || \"解码失败！\");\n        }\n      } catch (error) {\n        console.error(\"Error decoding and storing disaster info:\", error);\n        this.$notify.error(\"解码失败，请检查后端服务！\");\n      }\n    },\n\n    // 在上传文件前动态设置参数\n    beforeFileUpload(file) {\n      const fileName = file.name;\n      const fileParts = fileName.split(\".\"); // 拆分文件名\n      const disasterCode = fileParts[0]; // 假定文件名格式为: 灾情编码.文件格式\n\n      if (!disasterCode) {\n        this.$notify.error('文件名格式错误，请确保文件名为 \"灾情编码.文件格式\"');\n        return false; // 取消上传\n      }\n\n      // 保存灾情编码到变量\n      this.disasterCodeInput = disasterCode;\n\n      return true; // 允许上传\n    },\n\n\n  },\n\n  mounted() {\n    // 获取初始的省份数据\n    this.fetchProvinces()\n      .then(provinces => {\n        this.locationOptions = provinces;\n      })\n      .catch(error => {\n        console.error(\"Error fetching provinces:\", error);\n      });\n\n    this.fetchData().catch(error => {\n      console.error(\"Error fetching other data:\", error);\n    });\n  }\n}\n</script>\n\n\n<style scoped>\n.form-card {\n  margin-top: 20px;\n}\n\n.form-title {\n  font-size: 18px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.disaster-code-display {\n  margin-top: 20px;\n}\n</style>\n"],"mappings":";AAwKA,OAAAA,OAAA;;AAEA;EACAC,KAAA;IACA;MACAC,IAAA;QACAC,QAAA;QACAC,IAAA;QACAC,MAAA;QACAC,OAAA;QACAC,YAAA;QACAC,SAAA;QACAC,WAAA;MACA;MACAC,mBAAA,GACA;QAAAC,IAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,IAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,IAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,IAAA;QAAAC,IAAA;QAAAC,UAAA;MAAA,GACA;QAAAF,IAAA;QAAAC,IAAA;QAAAC,UAAA;MAAA,GACA;QAAAF,IAAA;QAAAC,IAAA;QAAAC,UAAA;MAAA,GACA;QAAAF,IAAA;QAAAC,IAAA;QAAAC,UAAA;MAAA,GACA;QAAAF,IAAA;QAAAC,IAAA;QAAAC,UAAA;MAAA,GACA;QAAAF,IAAA;QAAAC,IAAA;QAAAC,UAAA;MAAA,GACA;QAAAF,IAAA;QAAAC,IAAA;QAAAC,UAAA;MAAA,GACA;QAAAF,IAAA;QAAAC,IAAA;QAAAC,UAAA;MAAA,GACA;QAAAF,IAAA;QAAAC,IAAA;QAAAC,UAAA;MAAA,GACA;QAAAF,IAAA;QAAAC,IAAA;QAAAC,UAAA;MAAA,GACA;QAAAF,IAAA;QAAAC,IAAA;QAAAC,UAAA;MAAA,GACA;QAAAF,IAAA;QAAAC,IAAA;QAAAC,UAAA;MAAA,GACA;QAAAF,IAAA;QAAAC,IAAA;QAAAC,UAAA;MAAA,GACA;QAAAF,IAAA;QAAAC,IAAA;QAAAC,UAAA;MAAA,GACA;QAAAF,IAAA;QAAAC,IAAA;QAAAC,UAAA;MAAA,GACA;QAAAF,IAAA;QAAAC,IAAA;QAAAC,UAAA;MAAA,GACA;QAAAF,IAAA;QAAAC,IAAA;QAAAC,UAAA;MAAA,EAEA;MACAC,qBAAA,GACA;QAAAH,IAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,IAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,IAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,IAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,IAAA;QAAAC,IAAA;MAAA,GACA;QAAAD,IAAA;QAAAC,IAAA;QAAAG,YAAA;MAAA,GACA;QAAAJ,IAAA;QAAAC,IAAA;QAAAG,YAAA;MAAA,GACA;QAAAJ,IAAA;QAAAC,IAAA;QAAAG,YAAA;MAAA,GACA;QAAAJ,IAAA;QAAAC,IAAA;QAAAG,YAAA;MAAA,GACA;QAAAJ,IAAA;QAAAC,IAAA;QAAAG,YAAA;MAAA,GACA;QAAAJ,IAAA;QAAAC,IAAA;QAAAG,YAAA;MAAA,GACA;QAAAJ,IAAA;QAAAC,IAAA;QAAAG,YAAA;MAAA,GACA;QAAAJ,IAAA;QAAAC,IAAA;QAAAG,YAAA;MAAA,GACA;QAAAJ,IAAA;QAAAC,IAAA;QAAAG,YAAA;MAAA,GACA;QAAAJ,IAAA;QAAAC,IAAA;QAAAG,YAAA;MAAA,GACA;QAAAJ,IAAA;QAAAC,IAAA;QAAAG,YAAA;MAAA,GACA;QAAAJ,IAAA;QAAAC,IAAA;QAAAG,YAAA;MAAA,GACA;QAAAJ,IAAA;QAAAC,IAAA;QAAAG,YAAA;MAAA,GACA;QAAAJ,IAAA;QAAAC,IAAA;QAAAG,YAAA;MAAA,GACA;QAAAJ,IAAA;QAAAC,IAAA;QAAAG,YAAA;MAAA,GACA;QAAAJ,IAAA;QAAAC,IAAA;QAAAG,YAAA;MAAA,GACA;QAAAJ,IAAA;QAAAC,IAAA;QAAAG,YAAA;MAAA,GACA;QAAAJ,IAAA;QAAAC,IAAA;QAAAG,YAAA;MAAA,GACA;QAAAJ,IAAA;QAAAC,IAAA;QAAAG,YAAA;MAAA,GACA;QAAAJ,IAAA;QAAAC,IAAA;QAAAG,YAAA;MAAA,GACA;QAAAJ,IAAA;QAAAC,IAAA;QAAAG,YAAA;MAAA,GACA;QAAAJ,IAAA;QAAAC,IAAA;QAAAG,YAAA;MAAA,GACA;QAAAJ,IAAA;QAAAC,IAAA;QAAAG,YAAA;MAAA,EACA;MAEAA,YAAA;MACAC,iBAAA;MACAC,WAAA;QACAd,QAAA;QACAC,IAAA;QACAC,MAAA;QACAC,OAAA;QACAC,YAAA;QACAC,SAAA;QACAC,WAAA;MACA;MACAS,eAAA;MAAA;MACAC,YAAA;MAAA;MACAC,QAAA;MAAA;;MAGA;MACAC,OAAA;MACAC,QAAA;MACAC,aAAA;MACAC,UAAA;MACAC,aAAA;QACA;QACAC,KAAA;QAAA;QACAC,KAAA;QAAA;QACAC,QAAA;QAAA;QACAC,IAAA;QAAA;QACAC,QAAA,OAAAC,YAAA;MACA;MACAC,WAAA;QACAN,KAAA;QAAA;QACAC,KAAA;QAAA;QACAC,QAAA;QAAA;QACAC,IAAA;QAAA;QACAC,QAAA,OAAAG,kBAAA;MACA;MACAC,iBAAA;QACAR,KAAA;QAAA;QACAC,KAAA;QAAA;QACAC,QAAA;QAAA;QACAC,IAAA;QAAA;QACAC,QAAA,OAAAK,wBAAA;MACA;IAGA;EACA;EACAC,KAAA;IACA,0BAAAC,CAAAC,QAAA,EAAAC,QAAA;MACAC,OAAA,CAAAC,GAAA,uBAAAH,QAAA;MACAE,OAAA,CAAAC,GAAA,WAAAF,QAAA;IACA;EACA;EAEAG,OAAA;IACA;IACA,MAAAC,eAAA;MACA;QACA,MAAAC,QAAA,SAAA5C,OAAA,CAAA6C,GAAA;QACA,OAAAD,QAAA,CAAA3C,IAAA,CAAA6C,GAAA,CAAAC,QAAA;UACApC,IAAA,EAAAoC,QAAA,CAAApC,IAAA;UACAC,IAAA,EAAAmC,QAAA,CAAAnC,IAAA;UACAgB,QAAA;QACA;MACA,SAAAoB,KAAA;QACAR,OAAA,CAAAQ,KAAA,8BAAAA,KAAA;MACA;IACA;IACA;IACAjB,aAAAkB,IAAA,EAAAC,OAAA;MACA;QAAAC,KAAA;QAAAzB;MAAA,IAAAuB,IAAA;MACA,IAAAG,SAAA;MACA;MACA,QAAAD,KAAA;QACA;UAAA;UACAC,SAAA,QAAAT,cAAA;UACA;QACA;UAAA;UACAS,SAAA,QAAAC,WAAA,CAAA3B,KAAA;UACA;QACA;UAAA;UACA0B,SAAA,QAAAE,aAAA,CAAA5B,KAAA;UACA;QACA;UAAA;UACA0B,SAAA,QAAAG,UAAA,CAAA7B,KAAA;UACA;QACA;UAAA;UACA0B,SAAA,QAAAI,aAAA,CAAA9B,KAAA;UACA;QACA;UACAwB,OAAA;UACA;MACA;;MAEA;MACAE,SAAA,CAAAK,IAAA,CAAAxD,IAAA;QACAiD,OAAA,CAAAjD,IAAA;MACA,GAAAyD,KAAA,CAAAV,KAAA;QACAR,OAAA,CAAAQ,KAAA,CAAAA,KAAA;QACAE,OAAA;MACA;IACA;IACAjB,mBAAAgB,IAAA,EAAAC,OAAA;MACA;QAAAC,KAAA;QAAAzB;MAAA,IAAAuB,IAAA;MACA,IAAAG,SAAA;MACAZ,OAAA,CAAAC,GAAA,mCAAAU,KAAA,YAAAzB,KAAA;MACA;MACA,QAAAyB,KAAA;QACA;UAAA;UACAC,SAAA,QAAAO,YAAA;UACA;QACA;UAAA;UACAP,SAAA,QAAAQ,eAAA,CAAAlC,KAAA;UACA;QACA;UACAwB,OAAA;UACA;MACA;;MAEA;MACAE,SAAA,CAAAK,IAAA,CAAAxD,IAAA;QACAiD,OAAA,CAAAjD,IAAA;MACA,GAAAyD,KAAA,CAAAV,KAAA;QACAR,OAAA,CAAAQ,KAAA,CAAAA,KAAA;QACAE,OAAA;MACA;IACA;IACAf,yBAAAc,IAAA,EAAAC,OAAA;MACA;QAAAC,KAAA;QAAAzB;MAAA,IAAAuB,IAAA;MACA,IAAAG,SAAA;MACA;MACA,QAAAD,KAAA;QACA;UAAA;UACAC,SAAA,QAAAS,kBAAA;UACA;QACA;UAAA;UACAT,SAAA,QAAAU,qBAAA,CAAApC,KAAA;UACA;QACA;UACAwB,OAAA;UACA;MACA;;MAEA;MACAE,SAAA,CAAAK,IAAA,CAAAxD,IAAA;QACAiD,OAAA,CAAAjD,IAAA;MACA,GAAAyD,KAAA,CAAAV,KAAA;QACAR,OAAA,CAAAQ,KAAA,CAAAA,KAAA;QACAE,OAAA;MACA;IACA;IAEA;IACA,MAAAG,YAAAU,YAAA;MACA;QACA,MAAAnB,QAAA,SAAA5C,OAAA,CAAA6C,GAAA,2DAAAkB,YAAA;QACAvB,OAAA,CAAAC,GAAA,eAAAG,QAAA,CAAA3C,IAAA;QACA,OAAA2C,QAAA,CAAA3C,IAAA,CAAA6C,GAAA,CAAAkB,IAAA;UACArD,IAAA,EAAAqD,IAAA,CAAArD,IAAA;UACAC,IAAA,EAAAoD,IAAA,CAAApD,IAAA;UACAgB,QAAA;QACA;MACA,SAAAoB,KAAA;QACAR,OAAA,CAAAQ,KAAA,2BAAAA,KAAA;MACA;IACA;IACA;IACAiB,0BAAAtD,IAAA,EAAAuD,QAAA;MACA;MACA,MAAAC,SAAA,QAAA5C,aAAA,CAAA6C,IAAA,CAAAC,IAAA,IAAAA,IAAA,CAAA1D,IAAA,KAAAA,IAAA;MACA,IAAAwD,SAAA;QACAD,QAAA,CAAAC,SAAA,CAAAvD,IAAA;MACA;QACA4B,OAAA,CAAA8B,IAAA;MACA;IACA;IACAC,4BAAAtB,IAAA;MACA;MACAT,OAAA,CAAAC,GAAA,cAAAQ,IAAA;MAEA,IAAAA,IAAA,IAAAA,IAAA,CAAAuB,MAAA;QACA,MAAAC,2BAAA,GAAAxB,IAAA;;QAEAT,OAAA,CAAAC,GAAA,aAAAgC,2BAAA;;QAEA;QACA,IAAAA,2BAAA,UAAAA,2BAAA;UACA,KAAAA,2BAAA,GAAAA,2BAAA;UACA;UACAjC,OAAA,CAAAC,GAAA,cAAAgC,2BAAA;QACA;MACA;QACAjC,OAAA,CAAA8B,IAAA;MACA;IACA;IAEA;IACA,MAAAI,gBAAAC,gBAAA;MACA;QACAnC,OAAA,CAAAC,GAAA,sBAAAkC,gBAAA;QACA,MAAA/B,QAAA,SAAA5C,OAAA,CAAA6C,GAAA;UACA+B,MAAA;YAAA/D,UAAA,EAAA8D;UAAA;QACA;QAEA,IAAA/B,QAAA,CAAA3C,IAAA;UACA;UACA,KAAAuB,UAAA,GAAAoB,QAAA,CAAA3C,IAAA;UACAuC,OAAA,CAAAC,GAAA,kBAAAjB,UAAA;QACA;UACAgB,OAAA,CAAA8B,IAAA;UACA,KAAA9C,UAAA;QACA;MACA,SAAAwB,KAAA;QACAR,OAAA,CAAAQ,KAAA,eAAAA,KAAA;QACA,KAAAxB,UAAA;MACA;IACA;IAEA;IACA,MAAA8B,cAAAuB,QAAA;MACA;QACA,MAAAjC,QAAA,SAAA5C,OAAA,CAAA6C,GAAA,yDAAAgC,QAAA;QACA,OAAAjC,QAAA,CAAA3C,IAAA,CAAA6C,GAAA,CAAAgC,MAAA;UACAnE,IAAA,EAAAmE,MAAA,CAAAnE,IAAA;UACAC,IAAA,EAAAkE,MAAA,CAAAlE,IAAA;UACAgB,QAAA;QACA;MACA,SAAAoB,KAAA;QACAR,OAAA,CAAAQ,KAAA,6BAAAA,KAAA;MACA;IACA;IAEA;IACA,MAAAO,WAAAwB,QAAA;MACA;QACA,MAAAnC,QAAA,SAAA5C,OAAA,CAAA6C,GAAA,sDAAAkC,QAAA;QACA,OAAAnC,QAAA,CAAA3C,IAAA,CAAA6C,GAAA,CAAAkC,IAAA;UACArE,IAAA,EAAAqE,IAAA,CAAArE,IAAA;UACAC,IAAA,EAAAoE,IAAA,CAAApE,IAAA;UACAgB,QAAA;QACA;MACA,SAAAoB,KAAA;QACAR,OAAA,CAAAQ,KAAA,0BAAAA,KAAA;MACA;IACA;IAEA;IACA,MAAAQ,cAAAyB,UAAA;MACA;QACA,MAAArC,QAAA,SAAA5C,OAAA,CAAA6C,GAAA,2DAAAoC,UAAA;QACA,OAAArC,QAAA,CAAA3C,IAAA,CAAA6C,GAAA,CAAAoC,OAAA;UACAvE,IAAA,EAAAuE,OAAA,CAAAvE,IAAA;UACAC,IAAA,EAAAsE,OAAA,CAAAtE;QACA;MACA,SAAAoC,KAAA;QACAR,OAAA,CAAAQ,KAAA,6BAAAA,KAAA;MACA;IACA;IAEA;IACA,MAAAmC,qBAAAzD,KAAA;MACAc,OAAA,CAAAC,GAAA,4BAAAf,KAAA;MACA,MAAA0D,YAAA,QAAAC,eAAA,CAAA3D,KAAA,OAAAR,eAAA;MACAsB,OAAA,CAAAC,GAAA,mBAAA2C,YAAA;MACA,OAAArB,YAAA,EAAAc,QAAA,EAAAS,UAAA,EAAAC,QAAA,EAAAC,WAAA,IAAA9D,KAAA;MACA;MACAc,OAAA,CAAAC,GAAA,4BAAAsB,YAAA;MAEA,IAAAA,YAAA;QACA,MAAA0B,MAAA,cAAApC,WAAA,CAAAU,YAAA;QACAvB,OAAA,CAAAC,GAAA,kCAAAgD,MAAA;QACA,KAAAC,cAAA,CAAAN,YAAA,EAAAK,MAAA;MACA;MACA,IAAAZ,QAAA;QACA,MAAAc,QAAA,cAAArC,aAAA,CAAAuB,QAAA;QACA,KAAAa,cAAA,CAAAN,YAAA,EAAAO,QAAA;MACA;MACA,IAAAL,UAAA;QACA,MAAAM,KAAA,cAAArC,UAAA,CAAA+B,UAAA;QACA,KAAAI,cAAA,CAAAN,YAAA,EAAAQ,KAAA;MACA;MACA,IAAAL,QAAA;QACA,MAAAM,QAAA,cAAArC,aAAA,CAAA+B,QAAA;QACA,KAAAG,cAAA,CAAAN,YAAA,EAAAS,QAAA;MACA;IACA;IACA;IACAR,gBAAA3D,KAAA,EAAAoE,OAAA;MACA,IAAAC,MAAA;MACA,IAAAC,cAAA,GAAAF,OAAA;MAEA,SAAAG,GAAA,IAAAvE,KAAA;QACA,MAAAwE,OAAA,GAAAF,cAAA,CAAA5B,IAAA,CAAA+B,MAAA,IAAAA,MAAA,CAAAzE,KAAA,KAAAuE,GAAA;QACA,IAAAC,OAAA;UACAH,MAAA,CAAAK,IAAA,CAAAF,OAAA;UACAF,cAAA,GAAAE,OAAA,CAAAtE,QAAA;QACA;MACA;MAEA,OAAAmE,MAAA;IACA;IACA;IACAL,eAAAN,YAAA,EAAAxD,QAAA;MACAY,OAAA,CAAAC,GAAA,mBAAA2C,YAAA;MACA5C,OAAA,CAAAC,GAAA,cAAAb,QAAA;MAEAwD,YAAA,CAAAiB,OAAA,CAAApG,IAAA;QACAuC,OAAA,CAAAC,GAAA,UAAAxC,IAAA;QACAuC,OAAA,CAAAC,GAAA,kBAAA2C,YAAA;QACA,MAAAkB,gBAAA,GAAAlB,YAAA,CAAAA,YAAA,CAAAZ,MAAA,OAAA7D,IAAA;QACA6B,OAAA,CAAAC,GAAA,wBAAA6D,gBAAA;QACA,IAAArG,IAAA,CAAAU,IAAA,KAAAyE,YAAA,CAAAA,YAAA,CAAAZ,MAAA,MAAA7D,IAAA;UACAV,IAAA,CAAA2B,QAAA,GAAAA,QAAA,CAAAkB,GAAA,CAAAlB,QAAA;YACAF,KAAA,EAAAE,QAAA,CAAAjB,IAAA;YACAgB,KAAA,EAAAC,QAAA,CAAAhB,IAAA;YACAgB,QAAA,EAAAA,QAAA,CAAAA,QAAA;UAEA;UACAY,OAAA,CAAAC,GAAA,kBAAAxC,IAAA;QACA;MACA;IACA;IAEA;IACA,MAAAmD,UAAA;MACA;QACA,MAAAmD,eAAA,SAAAvG,OAAA,CAAA6C,GAAA;QACA;;QAEA,MAAA2D,gBAAA,SAAAxG,OAAA,CAAA6C,GAAA;QACA,MAAA4D,qBAAA,SAAAzG,OAAA,CAAA6C,GAAA;QACA,MAAA6D,kBAAA,SAAA1G,OAAA,CAAA6C,GAAA;QACAL,OAAA,CAAAC,GAAA,OAAA+D,gBAAA;QACAhE,OAAA,CAAAC,GAAA,SAAAgE,qBAAA;QACAjE,OAAA,CAAAC,GAAA,OAAAiE,kBAAA;;QAEA;QACA,KAAArF,OAAA,GAAAkF,eAAA,CAAAtG,IAAA;QACA,KAAAqB,QAAA,GAAAkF,gBAAA,CAAAvG,IAAA;QACA,KAAAsB,aAAA,GAAAkF,qBAAA,CAAAxG,IAAA;QACA,KAAAuB,UAAA,GAAAkF,kBAAA,CAAAzG,IAAA;MACA,SAAA+C,KAAA;QACAR,OAAA,CAAAQ,KAAA,yBAAAA,KAAA;MACA;IACA;IACA;IACA2D,qBAAA;MACA,MAAAxG,QAAA,QAAAD,IAAA,CAAAC,QAAA,CAAAyG,IAAA;MACA,MAAAxG,IAAA,QAAAF,IAAA,CAAAE,IAAA,CAAAyG,WAAA,GAAAC,KAAA,SAAAC,OAAA;MACA,MAAA1G,MAAA,QAAAH,IAAA,CAAAG,MAAA;MACA,MAAAC,OAAA,QAAAJ,IAAA,CAAAI,OAAA;MACA,MAAAC,YAAA,QAAAL,IAAA,CAAAK,YAAA;MACA,MAAAC,SAAA,QAAAN,IAAA,CAAAM,SAAA;MACA,MAAAC,WAAA,QAAAP,IAAA,CAAAO,WAAA;MACA+B,OAAA,CAAAC,GAAA,SAAAuE,QAAA;;MAEA;MACA,MAAAC,IAAA,QAAAC,aAAA,CAAAC,MAAA,EAAAC,GAAA,EAAA/C,IAAA;QACA+C,GAAA,CAAA/C,IAAA,CAAA1D,IAAA,IAAA0D,IAAA,CAAAzD,IAAA;QACA,OAAAwG,GAAA;MACA;MACA,MAAAC,QAAA,QAAAvG,qBAAA,CAAAqG,MAAA,EAAAC,GAAA,EAAA/C,IAAA;QACA+C,GAAA,CAAA/C,IAAA,CAAA1D,IAAA,IAAA0D,IAAA,CAAAzD,IAAA;QACA,OAAAwG,GAAA;MACA;MACA,MAAAE,SAAA,QAAAxG,qBAAA,CAAAqG,MAAA,EAAAC,GAAA,EAAA/C,IAAA;QACA,MAAAkD,GAAA,MAAAlD,IAAA,CAAA1D,IAAA,IAAA0D,IAAA,CAAAtD,YAAA;QACAqG,GAAA,CAAAG,GAAA,IAAAlD,IAAA;QACA,OAAA+C,GAAA;MACA;MACA,MAAAI,UAAA,QAAA9G,mBAAA,CAAAyG,MAAA,EAAAC,GAAA,EAAA/C,IAAA;QACA+C,GAAA,CAAA/C,IAAA,CAAA1D,IAAA,IAAA0D,IAAA,CAAAzD,IAAA;QACA,OAAAwG,GAAA;MACA;MACA5E,OAAA,CAAAC,GAAA,OAAA6E,SAAA,IAAA/G,YAAA,OAAAA,YAAA;MACAiC,OAAA,CAAAC,GAAA,aAAAlC,YAAA,OAAAA,YAAA;MACA,MAAAkH,YAAA;QACA1E,QAAA,EAAAkE,IAAA,CAAA9G,QAAA,CAAA2G,KAAA;QAAA;QACA9C,IAAA,EAAAiD,IAAA,CAAA9G,QAAA,CAAA2G,KAAA;QAAA;QACAY,OAAA,EAAAT,IAAA,CAAA9G,QAAA,CAAA2G,KAAA;QAAA;QACA9B,IAAA,EAAAiC,IAAA,CAAA9G,QAAA,CAAA2G,KAAA;QAAA;QACA5B,OAAA,EAAA+B,IAAA,CAAA9G,QAAA,CAAA2G,KAAA;QAAA;QACAa,QAAA;QAAA;QACAC,IAAA,EAAAxH,IAAA;QAAA;QACAD,QAAA,EAAAA,QAAA,CAAA2G,KAAA;QAAA;QACAe,MAAA,EAAApH,WAAA;QAAA;QACAqH,aAAA;QAAA;QACAC,cAAA,EAAAP,UAAA,CAAAnH,MAAA;QAAA;QACA2H,iBAAA,EAAAR,UAAA,CAAAnH,MAAA;QAAA;QACA4H,WAAA,EAAA3H,OAAA;QAAA;QACA4H,IAAA;QAAA;QACAC,qBAAA,EAAAd,QAAA,CAAA9G,YAAA;QAAA;QACA6H,mBAAA,EAAAd,SAAA,IAAA/G,YAAA,OAAAA,YAAA;QAAA;QACA8H,iBAAA,EAAA7H,SAAA;MACA;MAGA,KAAA8H,gBAAA,CAAAb,YAAA;IACA;IAEA;IACAd,qBAAA;MACA,MAAAxG,QAAA,QAAAD,IAAA,CAAAC,QAAA,CAAAyG,IAAA;MACA,MAAAxG,IAAA,QAAAF,IAAA,CAAAE,IAAA;MACA,MAAAC,MAAA,QAAAH,IAAA,CAAAG,MAAA;MACA,MAAAC,OAAA,QAAAJ,IAAA,CAAAI,OAAA;MACA,MAAAC,YAAA,QAAAL,IAAA,CAAAK,YAAA;MACA,MAAAC,SAAA,QAAAN,IAAA,CAAAM,SAAA;MACA,MAAAC,WAAA,QAAAP,IAAA,CAAAO,WAAA;MAEA,KAAAM,YAAA,MAAAZ,QAAA,IAAAC,IAAA,IAAAC,MAAA,IAAAC,OAAA,IAAAC,YAAA,IAAAC,SAAA,IAAAC,WAAA;IACA;IAIA;IACA,MAAA8H,mBAAA;MACA,MAAAC,YAAA;QACArI,QAAA,OAAAD,IAAA,CAAAC,QAAA,CAAAyG,IAAA;QACAxG,IAAA,OAAAF,IAAA,CAAAE,IAAA;QACAC,MAAA,OAAAH,IAAA,CAAAG,MAAA;QACAC,OAAA,OAAAJ,IAAA,CAAAI,OAAA;QACAC,YAAA,OAAAL,IAAA,CAAAK,YAAA;QACAC,SAAA,OAAAN,IAAA,CAAAM,SAAA;QACAC,WAAA,OAAAP,IAAA,CAAAO;MACA;MAEA;QACA,MAAAmC,QAAA,SAAA5C,OAAA,CAAAyI,IAAA,8BAAAD,YAAA;QACAhG,OAAA,CAAAC,GAAA,gDAAAG,QAAA;MACA,SAAAI,KAAA;QACAR,OAAA,CAAAQ,KAAA,0CAAAA,KAAA;MACA;IACA;IACA,MAAA0F,qBAAA;MACA;QACA,MAAAC,WAAA;UACA5H,YAAA,OAAAC;QACA;;QAEA;QACA,MAAA4B,QAAA,SAAA5C,OAAA,CAAAyI,IAAA,iCAAAE,WAAA;UACAC,OAAA;YACA;UACA;QACA;QAEApG,OAAA,CAAAC,GAAA,2BAAAG,QAAA;QACAJ,OAAA,CAAAC,GAAA,mBAAAG,QAAA,CAAA3C,IAAA;QACAuC,OAAA,CAAAC,GAAA,wBAAAG,QAAA,CAAA3C,IAAA,CAAAU,IAAA;QAEA,IAAAiC,QAAA,IAAAA,QAAA,CAAA3C,IAAA;UAEA;UACA,MAAAuI,YAAA,GAAA5F,QAAA,CAAA3C,IAAA;;UAEA;UACA,KAAAgB,WAAA;YACAd,QAAA,EAAAqI,YAAA,CAAArI,QAAA;YACAC,IAAA,EAAAoI,YAAA,CAAAZ,IAAA;YACAvH,MAAA,KAAAmI,YAAA,CAAAT,cAAA,YAAAS,YAAA,CAAAR,iBAAA;YACA1H,OAAA,EAAAkI,YAAA,CAAAP,WAAA;YACA1H,YAAA,KAAAiI,YAAA,CAAAL,qBAAA,YAAAK,YAAA,CAAAJ,mBAAA;YACA5H,SAAA,EAAAgI,YAAA,CAAAH,iBAAA;YACA5H,WAAA,EAAA+H,YAAA,CAAAX,MAAA;UACA;UAEArF,OAAA,CAAAC,GAAA,uCAAAxB,WAAA;QAEA;UACAuB,OAAA,CAAAQ,KAAA;UACA,KAAA6F,OAAA,CAAA7F,KAAA;QACA;MACA,SAAAA,KAAA;QACAR,OAAA,CAAAQ,KAAA,6CAAAA,KAAA;QACA,KAAA6F,OAAA,CAAA7F,KAAA;MACA;IACA;IAEA;IACA,MAAA8F,oBAAA;MAAAC;IAAA;MACA;MACA,MAAAhI,YAAA,QAAAC,iBAAA;MAEA,KAAAD,YAAA;QACA,KAAA8H,OAAA,CAAA7F,KAAA;QACA;MACA;MAEA,MAAAgG,QAAA,OAAAC,QAAA;MACAD,QAAA,CAAAE,MAAA,SAAAH,IAAA;MACAC,QAAA,CAAAE,MAAA,iBAAAnI,YAAA;MAEA;QACA;QACA,MAAA6B,QAAA,SAAA5C,OAAA,CAAAyI,IAAA,uCAAAO,QAAA;UACAJ,OAAA;YACA;UACA;QACA;QAEA,IAAAhG,QAAA,CAAA3C,IAAA,CAAAU,IAAA;UACA;UACA,KAAAS,QAAA,GAAAwB,QAAA,CAAA3C,IAAA,CAAAA,IAAA,CAAAiI,IAAA;UACA,KAAAW,OAAA,CAAAM,OAAA;UACA;UACA,KAAAC,UAAA;QACA;UACA,KAAAP,OAAA,CAAA7F,KAAA,CAAAJ,QAAA,CAAA3C,IAAA,CAAAoJ,GAAA;QACA;MACA,SAAArG,KAAA;QACAR,OAAA,CAAAQ,KAAA,wBAAAA,KAAA;QACA,KAAA6F,OAAA,CAAA7F,KAAA;MACA;IACA;IAEA;IACA,MAAAoG,WAAA;MACA;QACA,MAAAE,cAAA,SAAAtJ,OAAA,CAAAyI,IAAA;UACA1H,YAAA,OAAAC,iBAAA;UACAuI,QAAA,OAAAnI;QACA;QAEA,IAAAkI,cAAA,CAAArJ,IAAA,CAAAU,IAAA;UACA,KAAAkI,OAAA,CAAAM,OAAA;QACA;UACA,KAAAN,OAAA,CAAA7F,KAAA,CAAAsG,cAAA,CAAArJ,IAAA,CAAAoJ,GAAA;QACA;MACA,SAAArG,KAAA;QACAR,OAAA,CAAAQ,KAAA,8CAAAA,KAAA;QACA,KAAA6F,OAAA,CAAA7F,KAAA;MACA;IACA;IAEA;IACAwG,iBAAAT,IAAA;MACA,MAAAU,QAAA,GAAAV,IAAA,CAAAnI,IAAA;MACA,MAAA8I,SAAA,GAAAD,QAAA,CAAA3C,KAAA;MACA,MAAA/F,YAAA,GAAA2I,SAAA;;MAEA,KAAA3I,YAAA;QACA,KAAA8H,OAAA,CAAA7F,KAAA;QACA;MACA;;MAEA;MACA,KAAAhC,iBAAA,GAAAD,YAAA;MAEA;IACA;EAGA;EAEA4I,QAAA;IACA;IACA,KAAAhH,cAAA,GACAc,IAAA,CAAAmG,SAAA;MACA,KAAA1I,eAAA,GAAA0I,SAAA;IACA,GACAlG,KAAA,CAAAV,KAAA;MACAR,OAAA,CAAAQ,KAAA,8BAAAA,KAAA;IACA;IAEA,KAAAI,SAAA,GAAAM,KAAA,CAAAV,KAAA;MACAR,OAAA,CAAAQ,KAAA,+BAAAA,KAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}