{"ast":null,"code":"import request from \"@/utils/request\";\nimport * as echarts from \"echarts\";\nimport \"echarts/map/js/china\";\nexport default {\n  name: \"IndexView\",\n  data() {\n    return {\n      activeName: \"\",\n      notices: [],\n      disasterData: []\n    };\n  },\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    fetchData() {\n      request.get(\"/all\").then(res => {\n        if (res.code === \"0\") {\n          this.disasterData = res.data;\n          this.initCharts();\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    initCharts() {\n      this.initPieChart();\n      this.initMapChart();\n      this.initRankingChart();\n      this.initBarChart();\n      this.initLineChart();\n      this.initStackedBarChart();\n      this.initRadarChart();\n      this.initDataFormatChart();\n    },\n    initPieChart() {\n      const pieChart = echarts.init(document.getElementById(\"pieChart\"));\n      const categoryData = {};\n      this.disasterData.forEach(item => {\n        const category = item.sourceCategory || \"其他\";\n        categoryData[category] = (categoryData[category] || 0) + 1;\n      });\n      const chartData = Object.entries(categoryData).map(([name, value]) => ({\n        name,\n        value\n      }));\n      pieChart.setOption({\n        title: {\n          text: \"不同灾情大类信息占比\",\n          left: \"center\",\n          textStyle: {\n            color: \"#003366\",\n            fontSize: 16\n          }\n        },\n        tooltip: {\n          trigger: \"item\"\n        },\n        legend: {\n          bottom: \"3%\",\n          left: \"center\",\n          textStyle: {\n            color: \"#003366\",\n            fontSize: 10\n          }\n        },\n        series: [{\n          name: \"灾情类型\",\n          type: \"pie\",\n          radius: [\"30%\", \"50%\"],\n          label: {\n            formatter: \"{b}\\n{d}%\",\n            color: \"#003366\",\n            fontSize: 8\n          },\n          data: chartData,\n          color: [\"#5470c6\", \"#91cc75\", \"#fac858\"]\n        }]\n      });\n    },\n    initMapChart() {\n      const mapChart = echarts.init(document.getElementById(\"mapChart\"));\n      const provinceMapping = {\n        北京市: \"北京\",\n        天津市: \"天津\",\n        上海市: \"上海\",\n        重庆市: \"重庆\",\n        河北省: \"河北\",\n        山西省: \"山西\",\n        辽宁省: \"辽宁\",\n        吉林省: \"吉林\",\n        黑龙江省: \"黑龙江\",\n        江苏省: \"江苏\",\n        浙江省: \"浙江\",\n        安徽省: \"安徽\",\n        福建省: \"福建\",\n        江西省: \"江西\",\n        山东省: \"山东\",\n        河南省: \"河南\",\n        湖北省: \"湖北\",\n        湖南省: \"湖南\",\n        广东省: \"广东\",\n        海南省: \"海南\",\n        四川省: \"四川\",\n        贵州省: \"贵州\",\n        云南省: \"云南\",\n        陕西省: \"陕西\",\n        甘肃省: \"甘肃\",\n        青海省: \"青海\",\n        台湾省: \"台湾\",\n        内蒙古自治区: \"内蒙古\",\n        广西壮族自治区: \"广西\",\n        西藏自治区: \"西藏\",\n        宁夏回族自治区: \"宁夏\",\n        新疆维吾尔自治区: \"新疆\",\n        香港特别行政区: \"香港\",\n        澳门特别行政区: \"澳门\"\n      };\n      const provinceData = {};\n      this.disasterData.forEach(item => {\n        const rawProvince = item.province || \"未知\";\n        const province = provinceMapping[rawProvince] || rawProvince;\n        provinceData[province] = (provinceData[province] || 0) + 1;\n      });\n      const chartData = Object.entries(provinceData).map(([name, value]) => ({\n        name,\n        value\n      }));\n      const maxValue = Math.max(...chartData.map(d => d.value));\n      mapChart.setOption({\n        title: {\n          text: \"各省灾情分布情况\",\n          left: \"center\",\n          textStyle: {\n            color: \"#003366\",\n            fontSize: 16\n          }\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{b}<br/>灾情数量: {c}\"\n        },\n        visualMap: {\n          min: 0,\n          max: maxValue,\n          left: \"left\",\n          textStyle: {\n            color: \"#003366\"\n          },\n          inRange: {\n            color: [\"#d7f0fa\", \"#005bb5\"]\n          }\n        },\n        geo: {\n          map: \"china\",\n          label: {\n            emphasis: {\n              show: false\n            }\n          },\n          itemStyle: {\n            normal: {\n              areaColor: \"#f9f9f9\",\n              borderColor: \"#ccc\"\n            },\n            emphasis: {\n              areaColor: \"#d1ecff\"\n            }\n          }\n        },\n        series: [{\n          name: \"灾情数量\",\n          type: \"map\",\n          map: \"china\",\n          data: chartData\n        }]\n      });\n    }\n    // 其他图表的代码省略，和之前一致\n  }\n};","map":{"version":3,"names":["request","echarts","name","data","activeName","notices","disasterData","mounted","fetchData","methods","get","then","res","code","initCharts","$message","error","msg","initPieChart","initMapChart","initRankingChart","initBarChart","initLineChart","initStackedBarChart","initRadarChart","initDataFormatChart","pieChart","init","document","getElementById","categoryData","forEach","item","category","sourceCategory","chartData","Object","entries","map","value","setOption","title","text","left","textStyle","color","fontSize","tooltip","trigger","legend","bottom","series","type","radius","label","formatter","mapChart","provinceMapping","北京市","天津市","上海市","重庆市","河北省","山西省","辽宁省","吉林省","黑龙江省","江苏省","浙江省","安徽省","福建省","江西省","山东省","河南省","湖北省","湖南省","广东省","海南省","四川省","贵州省","云南省","陕西省","甘肃省","青海省","台湾省","内蒙古自治区","广西壮族自治区","西藏自治区","宁夏回族自治区","新疆维吾尔自治区","香港特别行政区","澳门特别行政区","provinceData","rawProvince","province","maxValue","Math","max","d","visualMap","min","inRange","geo","emphasis","show","itemStyle","normal","areaColor","borderColor"],"sources":["src/views/manager/Index.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"main-body-header\">欢迎进入多源灾情数据管理服务系统</div>\n    <div class=\"main-body-content\">\n      <div style=\"margin-bottom: 100px; width: 100%\">\n        <el-collapse v-model=\"activeName\" accordion>\n          <el-collapse-item v-for=\"item in notices\" :key=\"item.id\" :title=\"item.name\" :name=\"item.id\">\n            <div style=\"padding: 0 20px\">{{ item.content }}</div>\n          </el-collapse-item>\n        </el-collapse>\n      </div>\n      <div>\n        <!-- 使用 el-row 和 el-col，将每行设置为四个图表 -->\n        <el-row :gutter=\"20\">\n          <el-col :span=\"6\">\n            <div id=\"pieChart\" style=\"height: 400px\"></div>\n          </el-col>\n          <el-col :span=\"6\">\n            <div id=\"mapChart\" style=\"height: 400px\"></div>\n          </el-col>\n          <el-col :span=\"6\">\n            <div id=\"rankingChart\" style=\"height: 400px\"></div>\n          </el-col>\n          <el-col :span=\"6\">\n            <div id=\"barChart\" style=\"height: 400px\"></div>\n          </el-col>\n        </el-row>\n        <el-row :gutter=\"20\">\n          <el-col :span=\"6\">\n            <div id=\"lineChart\" style=\"height: 400px\"></div>\n          </el-col>\n          <el-col :span=\"6\">\n            <div id=\"stackedBarChart\" style=\"height: 400px\"></div>\n          </el-col>\n          <el-col :span=\"6\">\n            <div id=\"radarChart\" style=\"height: 400px\"></div>\n          </el-col>\n          <el-col :span=\"6\">\n            <div id=\"dataFormatChart\" style=\"height: 400px\"></div>\n          </el-col>\n        </el-row>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport request from \"@/utils/request\";\nimport * as echarts from \"echarts\";\nimport \"echarts/map/js/china\";\n\nexport default {\n  name: \"IndexView\",\n  data() {\n    return {\n      activeName: \"\",\n      notices: [],\n      disasterData: [],\n    };\n  },\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    fetchData() {\n      request.get(\"/all\").then((res) => {\n        if (res.code === \"0\") {\n          this.disasterData = res.data;\n          this.initCharts();\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    initCharts() {\n      this.initPieChart();\n      this.initMapChart();\n      this.initRankingChart();\n      this.initBarChart();\n      this.initLineChart();\n      this.initStackedBarChart();\n      this.initRadarChart();\n      this.initDataFormatChart();\n    },\n    initPieChart() {\n      const pieChart = echarts.init(document.getElementById(\"pieChart\"));\n      const categoryData = {};\n      this.disasterData.forEach((item) => {\n        const category = item.sourceCategory || \"其他\";\n        categoryData[category] = (categoryData[category] || 0) + 1;\n      });\n      const chartData = Object.entries(categoryData).map(([name, value]) => ({\n        name,\n        value,\n      }));\n\n      pieChart.setOption({\n        title: {\n          text: \"不同灾情大类信息占比\",\n          left: \"center\",\n          textStyle: { color: \"#003366\", fontSize: 16 },\n        },\n        tooltip: { trigger: \"item\" },\n        legend: {\n          bottom: \"3%\",\n          left: \"center\",\n          textStyle: { color: \"#003366\", fontSize: 10 },\n        },\n        series: [\n          {\n            name: \"灾情类型\",\n            type: \"pie\",\n            radius: [\"30%\", \"50%\"],\n            label: {\n              formatter: \"{b}\\n{d}%\",\n              color: \"#003366\",\n              fontSize: 8,\n            },\n            data: chartData,\n            color: [\"#5470c6\", \"#91cc75\", \"#fac858\"],\n          },\n        ],\n      });\n    },\n    initMapChart() {\n      const mapChart = echarts.init(document.getElementById(\"mapChart\"));\n\n      const provinceMapping = {\n        北京市: \"北京\",\n        天津市: \"天津\",\n        上海市: \"上海\",\n        重庆市: \"重庆\",\n        河北省: \"河北\",\n        山西省: \"山西\",\n        辽宁省: \"辽宁\",\n        吉林省: \"吉林\",\n        黑龙江省: \"黑龙江\",\n        江苏省: \"江苏\",\n        浙江省: \"浙江\",\n        安徽省: \"安徽\",\n        福建省: \"福建\",\n        江西省: \"江西\",\n        山东省: \"山东\",\n        河南省: \"河南\",\n        湖北省: \"湖北\",\n        湖南省: \"湖南\",\n        广东省: \"广东\",\n        海南省: \"海南\",\n        四川省: \"四川\",\n        贵州省: \"贵州\",\n        云南省: \"云南\",\n        陕西省: \"陕西\",\n        甘肃省: \"甘肃\",\n        青海省: \"青海\",\n        台湾省: \"台湾\",\n        内蒙古自治区: \"内蒙古\",\n        广西壮族自治区: \"广西\",\n        西藏自治区: \"西藏\",\n        宁夏回族自治区: \"宁夏\",\n        新疆维吾尔自治区: \"新疆\",\n        香港特别行政区: \"香港\",\n        澳门特别行政区: \"澳门\",\n      };\n\n      const provinceData = {};\n      this.disasterData.forEach((item) => {\n        const rawProvince = item.province || \"未知\";\n        const province = provinceMapping[rawProvince] || rawProvince;\n        provinceData[province] = (provinceData[province] || 0) + 1;\n      });\n\n      const chartData = Object.entries(provinceData).map(([name, value]) => ({\n        name,\n        value,\n      }));\n\n      const maxValue = Math.max(...chartData.map((d) => d.value));\n\n      mapChart.setOption({\n        title: {\n          text: \"各省灾情分布情况\",\n          left: \"center\",\n          textStyle: { color: \"#003366\", fontSize: 16 },\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{b}<br/>灾情数量: {c}\",\n        },\n        visualMap: {\n          min: 0,\n          max: maxValue,\n          left: \"left\",\n          textStyle: { color: \"#003366\" },\n          inRange: { color: [\"#d7f0fa\", \"#005bb5\"] },\n        },\n        geo: {\n          map: \"china\",\n          label: {\n            emphasis: { show: false },\n          },\n          itemStyle: {\n            normal: {\n              areaColor: \"#f9f9f9\",\n              borderColor: \"#ccc\",\n            },\n            emphasis: {\n              areaColor: \"#d1ecff\",\n            },\n          },\n        },\n        series: [\n          {\n            name: \"灾情数量\",\n            type: \"map\",\n            map: \"china\",\n            data: chartData,\n          },\n        ],\n      });\n    },\n    // 其他图表的代码省略，和之前一致\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}