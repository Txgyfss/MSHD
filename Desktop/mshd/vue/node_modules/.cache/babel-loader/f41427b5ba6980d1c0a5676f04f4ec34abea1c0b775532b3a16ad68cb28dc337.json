{"ast":null,"code":"import \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport request from \"@/utils/request\";\nimport * as echarts from \"echarts\";\nimport \"echarts/map/js/china\";\nexport default {\n  name: \"IndexView\",\n  data() {\n    return {\n      activeName: \"\",\n      notices: [],\n      disasterData: []\n    };\n  },\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    fetchData() {\n      request.get(\"/all\").then(res => {\n        if (res.code === \"0\") {\n          this.disasterData = res.data;\n          this.initCharts();\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    initCharts() {\n      this.initPieChart();\n      this.initMapChart();\n      this.initRankingChart();\n      this.initBarChart();\n      this.initLineChart();\n      this.initStackedBarChart();\n      this.initRadarChart();\n      this.initDataFormatChart();\n    },\n    initPieChart() {\n      const pieChart = echarts.init(document.getElementById(\"pieChart\"));\n      const categoryData = {};\n      this.disasterData.forEach(item => {\n        const category = item.sourceCategory || \"其他\";\n        categoryData[category] = (categoryData[category] || 0) + 1;\n      });\n      const chartData = Object.entries(categoryData).map(([name, value]) => ({\n        name,\n        value\n      }));\n      pieChart.setOption({\n        title: {\n          text: \"不同灾情大类信息占比\",\n          left: \"center\",\n          textStyle: {\n            color: \"#003366\",\n            fontSize: 16\n          }\n        },\n        tooltip: {\n          trigger: \"item\"\n        },\n        legend: {\n          bottom: \"3%\",\n          left: \"center\",\n          textStyle: {\n            color: \"#003366\",\n            fontSize: 10\n          }\n        },\n        series: [{\n          name: \"灾情类型\",\n          type: \"pie\",\n          radius: [\"30%\", \"50%\"],\n          label: {\n            formatter: \"{b}\\n{d}%\",\n            color: \"#003366\",\n            fontSize: 8\n          },\n          data: chartData,\n          color: [\"#5470c6\", \"#91cc75\", \"#fac858\"]\n        }]\n      });\n    },\n    initMapChart() {\n      const mapChart = echarts.init(document.getElementById(\"mapChart\"));\n\n      // 定义一个映射表，将\"北京市\"等名称转换为ECharts内置地图可以识别的名称\n      const provinceMapping = {\n        北京市: \"北京\",\n        天津市: \"天津\",\n        上海市: \"上海\",\n        重庆市: \"重庆\",\n        河北省: \"河北\",\n        山西省: \"山西\",\n        辽宁省: \"辽宁\",\n        吉林省: \"吉林\",\n        黑龙江省: \"黑龙江\",\n        江苏省: \"江苏\",\n        浙江省: \"浙江\",\n        安徽省: \"安徽\",\n        福建省: \"福建\",\n        江西省: \"江西\",\n        山东省: \"山东\",\n        河南省: \"河南\",\n        湖北省: \"湖北\",\n        湖南省: \"湖南\",\n        广东省: \"广东\",\n        海南省: \"海南\",\n        四川省: \"四川\",\n        贵州省: \"贵州\",\n        云南省: \"云南\",\n        陕西省: \"陕西\",\n        甘肃省: \"甘肃\",\n        青海省: \"青海\",\n        台湾省: \"台湾\",\n        内蒙古自治区: \"内蒙古\",\n        广西壮族自治区: \"广西\",\n        西藏自治区: \"西藏\",\n        宁夏回族自治区: \"宁夏\",\n        新疆维吾尔自治区: \"新疆\",\n        香港特别行政区: \"香港\",\n        澳门特别行政区: \"澳门\"\n      };\n\n      // 将原始数据转换为标准名称\n      const provinceData = {};\n      this.disasterData.forEach(item => {\n        const rawProvince = item.province || \"未知\";\n        const province = provinceMapping[rawProvince] || rawProvince; // 映射到标准名称\n        provinceData[province] = (provinceData[province] || 0) + 1;\n      });\n      console.log(\"映射后的省份数据：\", provinceData);\n\n      // 转换为 ECharts 可识别的格式\n      const chartData = Object.entries(provinceData).map(([name, value]) => ({\n        name,\n        value\n      }));\n\n      // 计算最大值，用于视觉映射\n      const maxValue = Math.max(...chartData.map(d => d.value));\n\n      // 配置 ECharts 地图\n      mapChart.setOption({\n        title: {\n          text: \"各省灾情分布情况\",\n          left: \"center\",\n          textStyle: {\n            color: \"#003366\",\n            fontSize: 16\n          }\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{b}<br/>灾情数量: {c}\"\n        },\n        visualMap: {\n          min: 0,\n          max: maxValue,\n          left: \"left\",\n          textStyle: {\n            color: \"#003366\"\n          },\n          inRange: {\n            color: [\"#d7f0fa\", \"#005bb5\"]\n          }\n        },\n        geo: {\n          map: \"china\",\n          label: {\n            emphasis: {\n              show: false\n            }\n          },\n          itemStyle: {\n            normal: {\n              areaColor: \"#f9f9f9\",\n              borderColor: \"#ccc\"\n            },\n            emphasis: {\n              areaColor: \"#d1ecff\"\n            }\n          }\n        },\n        series: [{\n          name: \"灾情数量\",\n          type: \"map\",\n          map: \"china\",\n          data: chartData\n        }]\n      });\n    },\n    initRankingChart() {\n      const rankingChart = echarts.init(document.getElementById(\"rankingChart\"));\n      const cityData = {};\n      this.disasterData.forEach(item => {\n        const city = item.city || \"未知\";\n        cityData[city] = (cityData[city] || 0) + 1;\n      });\n      const sortedData = Object.entries(cityData).sort((a, b) => b[1] - a[1]).slice(0, 5); // 显示前五名\n\n      rankingChart.setOption({\n        title: {\n          text: \"按城市灾情数量排名\",\n          left: \"center\",\n          textStyle: {\n            color: \"#003366\",\n            fontSize: 16\n          }\n        },\n        tooltip: {\n          trigger: \"axis\"\n        },\n        yAxis: {\n          type: \"category\",\n          data: sortedData.map(([name]) => name),\n          axisLabel: {\n            color: \"#003366\",\n            fontSize: 8\n          }\n        },\n        xAxis: {\n          type: \"value\",\n          axisLabel: {\n            color: \"#003366\",\n            fontSize: 8\n          }\n        },\n        series: [{\n          type: \"bar\",\n          data: sortedData.map(([, value]) => value),\n          itemStyle: {\n            color: \"#40a9ff\"\n          }\n        }]\n      });\n    },\n    initBarChart() {\n      const barChart = echarts.init(document.getElementById(\"barChart\"));\n      const subCategoryData = {};\n      this.disasterData.forEach(item => {\n        const subCategory = item.disasterSubCategory || \"其他\";\n        subCategoryData[subCategory] = (subCategoryData[subCategory] || 0) + 1;\n      });\n      const chartData = Object.entries(subCategoryData);\n      barChart.setOption({\n        title: {\n          text: \"灾情类型分布\",\n          left: \"center\",\n          textStyle: {\n            color: \"#003366\",\n            fontSize: 16\n          }\n        },\n        tooltip: {\n          trigger: \"axis\"\n        },\n        xAxis: {\n          type: \"category\",\n          data: chartData.map(([name]) => name),\n          axisLabel: {\n            color: \"#003366\",\n            fontSize: 7\n          }\n        },\n        yAxis: {\n          type: \"value\",\n          axisLabel: {\n            color: \"#003366\",\n            fontSize: 8\n          }\n        },\n        series: [{\n          type: \"bar\",\n          data: chartData.map(([, value]) => value),\n          itemStyle: {\n            color: \"#91cc75\"\n          }\n        }]\n      });\n    },\n    initLineChart() {\n      const lineChart = echarts.init(document.getElementById(\"lineChart\"));\n      const timeData = {};\n      this.disasterData.forEach(item => {\n        const date = item.date || \"未知\";\n        timeData[date] = (timeData[date] || 0) + 1;\n      });\n      const sortedDates = Object.keys(timeData).sort();\n      lineChart.setOption({\n        title: {\n          text: \"灾情时段分布\",\n          left: \"center\",\n          textStyle: {\n            color: \"#003366\"\n          }\n        },\n        tooltip: {\n          trigger: \"axis\"\n        },\n        xAxis: {\n          type: \"category\",\n          data: sortedDates,\n          axisLabel: {\n            color: \"#003366\"\n          }\n        },\n        yAxis: {\n          type: \"value\",\n          axisLabel: {\n            color: \"#003366\"\n          }\n        },\n        series: [{\n          type: \"line\",\n          data: sortedDates.map(date => timeData[date]),\n          itemStyle: {\n            color: \"#5470c6\"\n          }\n        }]\n      });\n    },\n    initStackedBarChart() {\n      const stackedBarChart = echarts.init(document.getElementById(\"stackedBarChart\"));\n      const stackedData = {};\n      this.disasterData.forEach(item => {\n        const date = item.date || \"未知\";\n        const type = item.disasterMajorCategory || \"其他\";\n        if (!stackedData[date]) stackedData[date] = {};\n        stackedData[date][type] = (stackedData[date][type] || 0) + 1;\n      });\n      const dates = Object.keys(stackedData).sort();\n      const categories = [...new Set(this.disasterData.map(item => item.disasterMajorCategory || \"其他\"))];\n      const series = categories.map(category => ({\n        name: category,\n        type: \"bar\",\n        stack: \"总量\",\n        data: dates.map(date => stackedData[date][category] || 0)\n      }));\n      stackedBarChart.setOption({\n        title: {\n          text: \"灾情数量统计\",\n          left: \"center\"\n        },\n        tooltip: {\n          trigger: \"axis\"\n        },\n        yAxis: {\n          type: \"category\",\n          data: dates\n        },\n        xAxis: {\n          type: \"value\"\n        },\n        series\n      });\n    },\n    initRadarChart() {\n      const radarChart = echarts.init(document.getElementById(\"radarChart\"));\n      const categoryData = {};\n      this.disasterData.forEach(item => {\n        const category = item.disasterMajorCategory || \"其他\";\n        categoryData[category] = (categoryData[category] || 0) + 1;\n      });\n      const indicators = Object.keys(categoryData).map(name => ({\n        name,\n        max: Math.max(...Object.values(categoryData)) + 10\n      }));\n      radarChart.setOption({\n        title: {\n          text: \"灾情类型雷达分布\",\n          left: \"center\"\n        },\n        radar: {\n          indicator: indicators\n        },\n        series: [{\n          type: \"radar\",\n          data: [{\n            value: Object.values(categoryData),\n            name: \"灾情类型\"\n          }]\n        }]\n      });\n    },\n    initDataFormatChart() {\n      const dataFormatChart = echarts.init(document.getElementById(\"dataFormatChart\"));\n      const formatData = {};\n      this.disasterData.forEach(item => {\n        const format = item.carrierForm || \"其他\";\n        formatData[format] = (formatData[format] || 0) + 1;\n      });\n      const chartData = Object.entries(formatData).map(([name, value]) => ({\n        name,\n        value\n      }));\n      dataFormatChart.setOption({\n        title: {\n          text: \"数据格式统计\",\n          left: \"center\",\n          textStyle: {\n            color: \"#003366\",\n            fontSize: 16\n          }\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{b}: {c}%\"\n        },\n        series: [{\n          type: \"treemap\",\n          data: chartData,\n          label: {\n            show: true,\n            formatter: \"{b}\\n{c}%\",\n            color: \"#ffffff\",\n            fontSize: 12\n          },\n          breadcrumb: {\n            show: false\n          },\n          roam: false\n        }]\n      });\n    }\n  }\n};","map":{"version":3,"names":["request","echarts","name","data","activeName","notices","disasterData","mounted","fetchData","methods","get","then","res","code","initCharts","$message","error","msg","initPieChart","initMapChart","initRankingChart","initBarChart","initLineChart","initStackedBarChart","initRadarChart","initDataFormatChart","pieChart","init","document","getElementById","categoryData","forEach","item","category","sourceCategory","chartData","Object","entries","map","value","setOption","title","text","left","textStyle","color","fontSize","tooltip","trigger","legend","bottom","series","type","radius","label","formatter","mapChart","provinceMapping","北京市","天津市","上海市","重庆市","河北省","山西省","辽宁省","吉林省","黑龙江省","江苏省","浙江省","安徽省","福建省","江西省","山东省","河南省","湖北省","湖南省","广东省","海南省","四川省","贵州省","云南省","陕西省","甘肃省","青海省","台湾省","内蒙古自治区","广西壮族自治区","西藏自治区","宁夏回族自治区","新疆维吾尔自治区","香港特别行政区","澳门特别行政区","provinceData","rawProvince","province","console","log","maxValue","Math","max","d","visualMap","min","inRange","geo","emphasis","show","itemStyle","normal","areaColor","borderColor","rankingChart","cityData","city","sortedData","sort","a","b","slice","yAxis","axisLabel","xAxis","barChart","subCategoryData","subCategory","disasterSubCategory","lineChart","timeData","date","sortedDates","keys","stackedBarChart","stackedData","disasterMajorCategory","dates","categories","Set","stack","radarChart","indicators","values","radar","indicator","dataFormatChart","formatData","format","carrierForm","breadcrumb","roam"],"sources":["src/views/manager/Index.vue"],"sourcesContent":["<template>\n  <div>\n    <div class=\"main-body-header\">欢迎进入多源灾情数据管理服务系统</div>\n    <div class=\"main-body-content\">\n      <div style=\"margin-bottom: 100px; width: 100%\">\n        <el-collapse v-model=\"activeName\" accordion>\n          <el-collapse-item v-for=\"item in notices\" :key=\"item.id\" :title=\"item.name\" :name=\"item.id\">\n            <div style=\"padding: 0 20px\">{{ item.content }}</div>\n          </el-collapse-item>\n        </el-collapse>\n      </div>\n      <div>\n        <el-row :gutter=\"20\">\n          <el-col :span=\"12\">\n            <div id=\"pieChart\" style=\"height: 400px\"></div>\n          </el-col>\n          <el-col :span=\"12\">\n            <div id=\"mapChart\" style=\"height: 400px\"></div>\n          </el-col>\n        </el-row>\n        <el-row :gutter=\"20\">\n          <el-col :span=\"12\">\n            <div id=\"rankingChart\" style=\"height: 400px\"></div>\n          </el-col>\n          <el-col :span=\"12\">\n            <div id=\"barChart\" style=\"height: 400px\"></div>\n          </el-col>\n        </el-row>\n        <el-row :gutter=\"20\">\n          <el-col :span=\"24\">\n            <div id=\"lineChart\" style=\"height: 400px\"></div>\n          </el-col>\n        </el-row>\n        <el-row :gutter=\"20\">\n          <el-col :span=\"24\">\n            <div id=\"stackedBarChart\" style=\"height: 400px\"></div>\n          </el-col>\n        </el-row>\n        <el-row :gutter=\"20\">\n          <el-col :span=\"24\">\n            <div id=\"radarChart\" style=\"height: 400px\"></div>\n          </el-col>\n        </el-row>\n        <el-row :gutter=\"20\">\n          <el-col :span=\"24\">\n            <div id=\"dataFormatChart\" style=\"height: 400px\"></div>\n          </el-col>\n        </el-row>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport request from \"@/utils/request\";\nimport * as echarts from \"echarts\";\nimport \"echarts/map/js/china\";\n\nexport default {\n  name: \"IndexView\",\n  data() {\n    return {\n      activeName: \"\",\n      notices: [],\n      disasterData: [],\n    };\n  },\n  mounted() {\n    this.fetchData();\n  },\n  methods: {\n    fetchData() {\n      request.get(\"/all\").then((res) => {\n        if (res.code === \"0\") {\n          this.disasterData = res.data;\n          this.initCharts();\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    initCharts() {\n      this.initPieChart();\n      this.initMapChart();\n      this.initRankingChart();\n      this.initBarChart();\n      this.initLineChart();\n      this.initStackedBarChart();\n      this.initRadarChart();\n      this.initDataFormatChart();\n    },\n    initPieChart() {\n      const pieChart = echarts.init(document.getElementById(\"pieChart\"));\n      const categoryData = {};\n      this.disasterData.forEach((item) => {\n        const category = item.sourceCategory || \"其他\";\n        categoryData[category] = (categoryData[category] || 0) + 1;\n      });\n      const chartData = Object.entries(categoryData).map(([name, value]) => ({\n        name,\n        value,\n      }));\n\n      pieChart.setOption({\n        title: {\n          text: \"不同灾情大类信息占比\",\n          left: \"center\",\n          textStyle: { color: \"#003366\", fontSize: 16 },\n        },\n        tooltip: { trigger: \"item\" },\n        legend: {\n          bottom: \"3%\",\n          left: \"center\",\n          textStyle: { color: \"#003366\", fontSize: 10 },\n        },\n        series: [\n          {\n            name: \"灾情类型\",\n            type: \"pie\",\n            radius: [\"30%\", \"50%\"],\n            label: {\n              formatter: \"{b}\\n{d}%\",\n              color: \"#003366\",\n              fontSize: 8,\n            },\n            data: chartData,\n            color: [\"#5470c6\", \"#91cc75\", \"#fac858\"],\n          },\n        ],\n      });\n    },\n    initMapChart() {\n      const mapChart = echarts.init(document.getElementById(\"mapChart\"));\n\n      // 定义一个映射表，将\"北京市\"等名称转换为ECharts内置地图可以识别的名称\n      const provinceMapping = {\n        北京市: \"北京\",\n        天津市: \"天津\",\n        上海市: \"上海\",\n        重庆市: \"重庆\",\n        河北省: \"河北\",\n        山西省: \"山西\",\n        辽宁省: \"辽宁\",\n        吉林省: \"吉林\",\n        黑龙江省: \"黑龙江\",\n        江苏省: \"江苏\",\n        浙江省: \"浙江\",\n        安徽省: \"安徽\",\n        福建省: \"福建\",\n        江西省: \"江西\",\n        山东省: \"山东\",\n        河南省: \"河南\",\n        湖北省: \"湖北\",\n        湖南省: \"湖南\",\n        广东省: \"广东\",\n        海南省: \"海南\",\n        四川省: \"四川\",\n        贵州省: \"贵州\",\n        云南省: \"云南\",\n        陕西省: \"陕西\",\n        甘肃省: \"甘肃\",\n        青海省: \"青海\",\n        台湾省: \"台湾\",\n        内蒙古自治区: \"内蒙古\",\n        广西壮族自治区: \"广西\",\n        西藏自治区: \"西藏\",\n        宁夏回族自治区: \"宁夏\",\n        新疆维吾尔自治区: \"新疆\",\n        香港特别行政区: \"香港\",\n        澳门特别行政区: \"澳门\",\n      };\n\n      // 将原始数据转换为标准名称\n      const provinceData = {};\n      this.disasterData.forEach((item) => {\n        const rawProvince = item.province || \"未知\";\n        const province = provinceMapping[rawProvince] || rawProvince; // 映射到标准名称\n        provinceData[province] = (provinceData[province] || 0) + 1;\n      });\n\n      console.log(\"映射后的省份数据：\", provinceData);\n\n      // 转换为 ECharts 可识别的格式\n      const chartData = Object.entries(provinceData).map(([name, value]) => ({\n        name,\n        value,\n      }));\n\n      // 计算最大值，用于视觉映射\n      const maxValue = Math.max(...chartData.map((d) => d.value));\n\n      // 配置 ECharts 地图\n      mapChart.setOption({\n        title: {\n          text: \"各省灾情分布情况\",\n          left: \"center\",\n          textStyle: { color: \"#003366\", fontSize: 16 },\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{b}<br/>灾情数量: {c}\",\n        },\n        visualMap: {\n          min: 0,\n          max: maxValue,\n          left: \"left\",\n          textStyle: { color: \"#003366\" },\n          inRange: { color: [\"#d7f0fa\", \"#005bb5\"] },\n        },\n        geo: {\n          map: \"china\",\n          label: {\n            emphasis: { show: false },\n          },\n          itemStyle: {\n            normal: {\n              areaColor: \"#f9f9f9\",\n              borderColor: \"#ccc\",\n            },\n            emphasis: {\n              areaColor: \"#d1ecff\",\n            },\n          },\n        },\n        series: [\n          {\n            name: \"灾情数量\",\n            type: \"map\",\n            map: \"china\",\n            data: chartData,\n          },\n        ],\n      });\n    },\n\n    initRankingChart() {\n      const rankingChart = echarts.init(document.getElementById(\"rankingChart\"));\n      const cityData = {};\n      this.disasterData.forEach((item) => {\n        const city = item.city || \"未知\";\n        cityData[city] = (cityData[city] || 0) + 1;\n      });\n      const sortedData = Object.entries(cityData)\n        .sort((a, b) => b[1] - a[1])\n        .slice(0, 5); // 显示前五名\n\n      rankingChart.setOption({\n        title: {\n          text: \"按城市灾情数量排名\",\n          left: \"center\",\n          textStyle: { color: \"#003366\", fontSize: 16 },\n        },\n        tooltip: { trigger: \"axis\" },\n        yAxis: {\n          type: \"category\",\n          data: sortedData.map(([name]) => name),\n          axisLabel: { color: \"#003366\", fontSize: 8 },\n        },\n        xAxis: { type: \"value\", axisLabel: { color: \"#003366\", fontSize: 8 } },\n        series: [\n          {\n            type: \"bar\",\n            data: sortedData.map(([, value]) => value),\n            itemStyle: { color: \"#40a9ff\" },\n          },\n        ],\n      });\n    },\n    initBarChart() {\n      const barChart = echarts.init(document.getElementById(\"barChart\"));\n      const subCategoryData = {};\n      this.disasterData.forEach((item) => {\n        const subCategory = item.disasterSubCategory || \"其他\";\n        subCategoryData[subCategory] =\n          (subCategoryData[subCategory] || 0) + 1;\n      });\n      const chartData = Object.entries(subCategoryData);\n\n      barChart.setOption({\n        title: {\n          text: \"灾情类型分布\",\n          left: \"center\",\n          textStyle: { color: \"#003366\", fontSize: 16 },\n        },\n        tooltip: { trigger: \"axis\" },\n        xAxis: {\n          type: \"category\",\n          data: chartData.map(([name]) => name),\n          axisLabel: { color: \"#003366\", fontSize: 7 },\n        },\n        yAxis: {\n          type: \"value\",\n          axisLabel: { color: \"#003366\", fontSize: 8 },\n        },\n        series: [\n          {\n            type: \"bar\",\n            data: chartData.map(([, value]) => value),\n            itemStyle: { color: \"#91cc75\" },\n          },\n        ],\n      });\n    },\n    initLineChart() {\n      const lineChart = echarts.init(document.getElementById(\"lineChart\"));\n      const timeData = {};\n      this.disasterData.forEach((item) => {\n        const date = item.date || \"未知\";\n        timeData[date] = (timeData[date] || 0) + 1;\n      });\n      const sortedDates = Object.keys(timeData).sort();\n\n      lineChart.setOption({\n        title: {\n          text: \"灾情时段分布\",\n          left: \"center\",\n          textStyle: { color: \"#003366\" },\n        },\n        tooltip: { trigger: \"axis\" },\n        xAxis: {\n          type: \"category\",\n          data: sortedDates,\n          axisLabel: { color: \"#003366\" },\n        },\n        yAxis: { type: \"value\", axisLabel: { color: \"#003366\" } },\n        series: [\n          {\n            type: \"line\",\n            data: sortedDates.map((date) => timeData[date]),\n            itemStyle: { color: \"#5470c6\" },\n          },\n        ],\n      });\n    },\n    initStackedBarChart() {\n      const stackedBarChart = echarts.init(\n        document.getElementById(\"stackedBarChart\")\n      );\n      const stackedData = {};\n      this.disasterData.forEach((item) => {\n        const date = item.date || \"未知\";\n        const type = item.disasterMajorCategory || \"其他\";\n        if (!stackedData[date]) stackedData[date] = {};\n        stackedData[date][type] =\n          (stackedData[date][type] || 0) + 1;\n      });\n      const dates = Object.keys(stackedData).sort();\n      const categories = [\n        ...new Set(\n          this.disasterData.map((item) => item.disasterMajorCategory || \"其他\")\n        ),\n      ];\n      const series = categories.map((category) => ({\n        name: category,\n        type: \"bar\",\n        stack: \"总量\",\n        data: dates.map((date) => stackedData[date][category] || 0),\n      }));\n\n      stackedBarChart.setOption({\n        title: { text: \"灾情数量统计\", left: \"center\" },\n        tooltip: { trigger: \"axis\" },\n        yAxis: { type: \"category\", data: dates },\n        xAxis: { type: \"value\" },\n        series,\n      });\n    },\n    initRadarChart() {\n      const radarChart = echarts.init(document.getElementById(\"radarChart\"));\n      const categoryData = {};\n      this.disasterData.forEach((item) => {\n        const category = item.disasterMajorCategory || \"其他\";\n        categoryData[category] = (categoryData[category] || 0) + 1;\n      });\n      const indicators = Object.keys(categoryData).map((name) => ({\n        name,\n        max: Math.max(...Object.values(categoryData)) + 10,\n      }));\n\n      radarChart.setOption({\n        title: { text: \"灾情类型雷达分布\", left: \"center\" },\n        radar: { indicator: indicators },\n        series: [\n          {\n            type: \"radar\",\n            data: [\n              {\n                value: Object.values(categoryData),\n                name: \"灾情类型\",\n              },\n            ],\n          },\n        ],\n      });\n    },\n    initDataFormatChart() {\n      const dataFormatChart = echarts.init(\n        document.getElementById(\"dataFormatChart\")\n      );\n      const formatData = {};\n      this.disasterData.forEach((item) => {\n        const format = item.carrierForm || \"其他\";\n        formatData[format] = (formatData[format] || 0) + 1;\n      });\n      const chartData = Object.entries(formatData).map(([name, value]) => ({\n        name,\n        value,\n      }));\n\n      dataFormatChart.setOption({\n        title: {\n          text: \"数据格式统计\",\n          left: \"center\",\n          textStyle: { color: \"#003366\", fontSize: 16 },\n        },\n        tooltip: {\n          trigger: \"item\",\n          formatter: \"{b}: {c}%\",\n        },\n        series: [\n          {\n            type: \"treemap\",\n            data: chartData,\n            label: {\n              show: true,\n              formatter: \"{b}\\n{c}%\",\n              color: \"#ffffff\",\n              fontSize: 12,\n            },\n            breadcrumb: { show: false },\n            roam: false,\n          },\n        ],\n      });\n    },\n  },\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}