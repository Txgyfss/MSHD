{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport request from \"@/utils/request\"; // 使用封装的 axios 实例\n\nexport default {\n  data() {\n    return {\n      form: {\n        location: [],\n        time: '',\n        source: [],\n        carrier: '',\n        disasterType: [],\n        indicator: '',\n        description: ''\n      },\n      locationOptions: [],\n      // 存储级联下拉框数据\n      uploadParams: {},\n      // 动态传递给后端的参数\n      filePath: '',\n      // 上传后的文件路径\n      disasterCode: '',\n      disasterCodeInput: '',\n      // 用户输入的灾情码\n      decodedData: {\n        location: '',\n        // 地点\n        time: '',\n        // 时间\n        source: '',\n        // 来源\n        carrier: '',\n        // 承载形式\n        disasterType: '',\n        // 灾情类型\n        indicator: '',\n        // 灾情指标\n        description: '',\n        // 描述\n        province: '',\n        // 省\n        city: '',\n        // 市\n        country: '',\n        // 区县\n        town: '',\n        // 镇\n        village: '',\n        // 村\n        disasterMajorCategory: '',\n        // 灾情主类别\n        disasterSubCategory: '',\n        // 灾情子类别\n        disasterIndicator: '',\n        // 灾情指标\n        date: '',\n        // 日期\n        reportingUnit: '',\n        // 上报单位\n        sourceCategory: '',\n        // 来源分类\n        sourceSubCategory: '',\n        // 来源子分类\n        carrierForm: '',\n        // 承载形式\n        link: '' // 数据链接\n      },\n      sourceValueLabelMap: [{\n        code: \"1\",\n        name: \"业务报送数据\"\n      }, {\n        code: \"2\",\n        name: \"泛在感知数据\"\n      }, {\n        code: \"3\",\n        name: \"其他数据\"\n      }, {\n        code: \"00\",\n        name: \"前方地震应急指挥部\",\n        sourceCode: \"1\"\n      }, {\n        code: \"01\",\n        name: \"后方地震应急指挥部\",\n        sourceCode: \"1\"\n      }, {\n        code: \"20\",\n        name: \"应急指挥技术系统\",\n        sourceCode: \"1\"\n      }, {\n        code: \"21\",\n        name: \"社会服务工程应急救援系统\",\n        sourceCode: \"1\"\n      }, {\n        code: \"40\",\n        name: \"危险区预评估工作组\",\n        sourceCode: \"1\"\n      }, {\n        code: \"41\",\n        name: \"地震应急指挥技术协调组\",\n        sourceCode: \"1\"\n      }, {\n        code: \"42\",\n        name: \"震后政府信息支持工作项目组\",\n        sourceCode: \"1\"\n      }, {\n        code: \"80\",\n        name: \"灾情快速上报接收处理系统\",\n        sourceCode: \"1\"\n      }, {\n        code: \"81\",\n        name: \"地方地震局应急信息服务相关技术系统\",\n        sourceCode: \"1\"\n      }, {\n        code: \"99\",\n        name: \"其他\",\n        sourceCode: \"1\"\n      }, {\n        code: \"00\",\n        name: \"互联网感知\",\n        sourceCode: \"2\"\n      }, {\n        code: \"01\",\n        name: \"通信网感知\",\n        sourceCode: \"2\"\n      }, {\n        code: \"02\",\n        name: \"舆情网感知\",\n        sourceCode: \"2\"\n      }, {\n        code: \"03\",\n        name: \"电力系统感知\",\n        sourceCode: \"2\"\n      }, {\n        code: \"04\",\n        name: \"交通系统感知\",\n        sourceCode: \"2\"\n      }, {\n        code: \"05\",\n        name: \"其他\",\n        sourceCode: \"2\"\n      }, {\n        code: \"03\",\n        name: \"  \",\n        sourceCode: \"3\"\n      }],\n      catagoryValueLabelMap: [{\n        code: \"1\",\n        name: \"震情\"\n      }, {\n        code: \"2\",\n        name: \"人员伤亡及失踪\"\n      }, {\n        code: \"3\",\n        name: \"房屋破坏\"\n      }, {\n        code: \"4\",\n        name: \"生命线工程灾情\"\n      }, {\n        code: \"5\",\n        name: \"次生灾害\"\n      }, {\n        code: \"01\",\n        name: \"震情信息\",\n        disasterCode: \"1\"\n      }, {\n        code: \"01\",\n        name: \"死亡\",\n        disasterCode: \"2\"\n      }, {\n        code: \"02\",\n        name: \"受伤\",\n        disasterCode: \"2\"\n      }, {\n        code: \"03\",\n        name: \"失踪\",\n        disasterCode: \"2\"\n      }, {\n        code: \"01\",\n        name: \"土木\",\n        disasterCode: \"3\"\n      }, {\n        code: \"02\",\n        name: \"砖木\",\n        disasterCode: \"3\"\n      }, {\n        code: \"03\",\n        name: \"砖混\",\n        disasterCode: \"3\"\n      }, {\n        code: \"04\",\n        name: \"框架\",\n        disasterCode: \"3\"\n      }, {\n        code: \"05\",\n        name: \"其他\",\n        disasterCode: \"3\"\n      }, {\n        code: \"01\",\n        name: \"交通\",\n        disasterCode: \"4\"\n      }, {\n        code: \"02\",\n        name: \"供水\",\n        disasterCode: \"4\"\n      }, {\n        code: \"03\",\n        name: \"输油\",\n        disasterCode: \"4\"\n      }, {\n        code: \"04\",\n        name: \"燃气\",\n        disasterCode: \"4\"\n      }, {\n        code: \"05\",\n        name: \"电力\",\n        disasterCode: \"4\"\n      }, {\n        code: \"06\",\n        name: \"通信\",\n        disasterCode: \"4\"\n      }, {\n        code: \"07\",\n        name: \"水利\",\n        disasterCode: \"4\"\n      }, {\n        code: \"01\",\n        name: \"崩塌\",\n        disasterCode: \"5\"\n      }, {\n        code: \"02\",\n        name: \"滑坡\",\n        disasterCode: \"5\"\n      }, {\n        code: \"03\",\n        name: \"泥石流\",\n        disasterCode: \"5\"\n      }, {\n        code: \"04\",\n        name: \"岩溶塌陷\",\n        disasterCode: \"5\"\n      }, {\n        code: \"05\",\n        name: \"地裂缝\",\n        disasterCode: \"5\"\n      }, {\n        code: \"06\",\n        name: \"地面沉降\",\n        disasterCode: \"5\"\n      }, {\n        code: \"07\",\n        name: \"其他\",\n        disasterCode: \"5\"\n      }],\n      valueLabelMap: [],\n      SourcesName: '',\n      subSourcesName: '',\n      carriers: [],\n      disasterTypes: [],\n      indicators: [],\n      selectedDisasterTypeCode: '',\n      // 用于记录当前选中的灾情类型编码\n      selectedDisasterSubTypeCode: '',\n      // 用于记录当前选中的灾情子类型编码\n      isSelectingDisasterType: true,\n      // 用于标记是否在选择灾情类型\n\n      cascaderProps: {\n        //value: 'code', // 显示的数据绑定字段\n        value: 'code',\n        // 显示的数据绑定字段\n        label: 'name',\n        // 显示的名称字段\n        children: 'children',\n        // 子级数据字段\n        lazy: true,\n        // 启用懒加载\n        lazyLoad: this.lazyLoadData // 动态加载函数\n      },\n      sourceProps: {\n        value: 'code',\n        // 显示的数据绑定字段\n        label: 'name',\n        // 显示的名称字段\n        children: 'children',\n        // 子级数据字段\n        lazy: true,\n        // 启用懒加载\n        lazyLoad: this.lazyLoadSourceData // 动态加载函数\n      },\n      disasterTypeProps: {\n        value: 'code',\n        // 显示的数据绑定字段\n        label: 'name',\n        // 显示的名称字段\n        children: 'children',\n        // 子级数据字段\n        lazy: true,\n        // 启用懒加载\n        lazyLoad: this.lazyLoadDisasterTypeData // 动态加载函数\n      }\n    };\n  },\n  watch: {\n    'form.location': function (newValue, oldValue) {\n      console.log('form.location 变化了：', newValue);\n      console.log('变化前的值：', oldValue);\n    }\n  },\n  methods: {\n    // 懒加载函数，根据级别来加载不同的区域数据\n    lazyLoadData(node, resolve) {\n      const {\n        level,\n        value\n      } = node; // 获取当前节点的级别和选中的值\n      let fetchData;\n      // 根据级别来判断加载哪个数据（省 -> 市 -> 县区 -> 乡镇 -> 村庄）\n      switch (level) {\n        case 0:\n          // 省级\n          fetchData = this.fetchProvinces();\n          break;\n        case 1:\n          // 市级\n          fetchData = this.fetchCities(value);\n          break;\n        case 2:\n          // 区县级\n          fetchData = this.fetchCounties(value);\n          break;\n        case 3:\n          // 乡镇级\n          fetchData = this.fetchTowns(value);\n          break;\n        case 4:\n          // 村庄级\n          fetchData = this.fetchVillages(value);\n          break;\n        default:\n          resolve([]);\n          return;\n      }\n\n      // 获取数据后，通过 resolve 函数返回节点数据\n      fetchData.then(data => {\n        resolve(data); // 返回数据\n      }).catch(error => {\n        console.error(error);\n        resolve([]); // 如果请求失败，返回空数组\n      });\n    },\n    lazyLoadSourceData(node, resolve) {\n      const {\n        level,\n        value\n      } = node; // 获取当前节点的级别和选中的值\n      let fetchData;\n      console.log(`Lazy load triggered for level: ${level}, value: ${value}`);\n      // 根据级别来判断加载哪个数据（大类 -> 子类）\n      switch (level) {\n        case 0:\n          // 大类\n          fetchData = this.fetchSources();\n          break;\n        case 1:\n          // 子类\n          fetchData = this.fetchSubSources(value);\n          break;\n        default:\n          resolve([]);\n          return;\n      }\n\n      // 获取数据后，通过 resolve 函数返回节点数据\n      fetchData.then(data => {\n        resolve(data); // 返回数据\n      }).catch(error => {\n        console.error(error);\n        resolve([]); // 如果请求失败，返回空数组\n      });\n    },\n    lazyLoadDisasterTypeData(node, resolve) {\n      const {\n        level,\n        value\n      } = node; // 获取当前节点的级别和选中的值\n      let fetchData;\n      // 根据级别来判断加载哪个数据（大类 -> 子类）\n      switch (level) {\n        case 0:\n          // 大类\n          fetchData = this.fetchDisasterTypes();\n          break;\n        case 1:\n          // 子类\n          fetchData = this.fetchSubDisasterTypes(value);\n          break;\n        default:\n          resolve([]);\n          return;\n      }\n\n      // 获取数据后，通过 resolve 函数返回节点数据\n      fetchData.then(data => {\n        resolve(data); // 返回数据\n      }).catch(error => {\n        console.error(error);\n        resolve([]); // 如果请求失败，返回空数组\n      });\n    },\n    // 获取省份数据\n    async fetchProvinces() {\n      try {\n        const response = await request.get('http://localhost:8080/api/areas/getProvinces');\n        console.log(response.data);\n        const provinces = response.data;\n        if (provinces && Array.isArray(provinces)) {\n          // 将每个省份的数据添加到 valueLabelMap 数组\n          provinces.forEach(province => {\n            this.valueLabelMap.push({\n              code: province.code,\n              name: province.name\n            });\n          });\n        }\n        console.log(\"Provinces added to valueLabelMap:\", this.valueLabelMap);\n        return response.data;\n      } catch (error) {\n        console.error('Error fetching provinces:', error);\n      }\n    },\n    // 获取城市数据\n    async fetchCities(provinceCode) {\n      try {\n        const response = await request.get(`http://localhost:8080/api/areas/getCities?provinceCode=${provinceCode}`);\n        const cities = response.data;\n        if (cities && Array.isArray(cities)) {\n          // 将每个数据添加到 valueLabelMap 数组\n          cities.forEach(city => {\n            this.valueLabelMap.push({\n              code: city.code,\n              name: city.name\n            });\n          });\n        }\n        console.log(\"Cities added to valueLabelMap:\", this.valueLabelMap);\n        return response.data;\n      } catch (error) {\n        console.error('Error fetching cities:', error);\n      }\n    },\n    // 获取县区数据\n    async fetchCounties(cityCode) {\n      try {\n        // 调用后端接口获取县区数据\n        const response = await request.get(`http://localhost:8080/api/areas/getCounties?cityCode=${cityCode}`);\n        const counties = response.data;\n        if (counties && Array.isArray(counties)) {\n          // 将每个省份的数据添加到 valueLabelMap 数组\n          counties.forEach(county => {\n            this.valueLabelMap.push({\n              code: county.code,\n              name: county.name\n            });\n          });\n        }\n        console.log(\"Counties added to valueLabelMap:\", this.valueLabelMap);\n        return response.data; // 返回后端的数据，格式与后端一致\n      } catch (error) {\n        console.error('Error fetching counties:', error);\n      }\n    },\n    // 获取乡镇数据\n    async fetchTowns(areaCode) {\n      try {\n        // 调用后端接口获取乡镇数据\n        const response = await request.get(`http://localhost:8080/api/areas/getTowns?areaCode=${areaCode}`);\n        const towns = response.data;\n        if (towns && Array.isArray(towns)) {\n          // 将每个省份的数据添加到 valueLabelMap 数组\n          towns.forEach(town => {\n            this.valueLabelMap.push({\n              code: town.code,\n              name: town.name\n            });\n          });\n        }\n        console.log(\"Towns added to valueLabelMap:\", this.valueLabelMap);\n        return response.data; // 返回后端的数据，格式与后端一致\n      } catch (error) {\n        console.error('Error fetching towns:', error);\n      }\n    },\n    // 获取村庄数据\n    async fetchVillages(streetCode) {\n      try {\n        // 调用后端接口获取乡镇数据\n        console.log(\"streetcode\", streetCode);\n        const response = await request.get(`http://localhost:8080/api/areas/getVillages?streetCode=${streetCode}`);\n        const villages = response.data;\n        if (villages && Array.isArray(villages)) {\n          // 将每个省份的数据添加到 valueLabelMap 数组\n          villages.forEach(village => {\n            this.valueLabelMap.push({\n              code: village.code,\n              name: village.name\n            });\n          });\n        }\n        console.log(\"Villages added to valueLabelMap:\", this.valueLabelMap);\n        return response.data; // 返回后端的数据，格式与后端一致\n      } catch (error) {\n        console.error('Error fetching towns:', error);\n      }\n    },\n    // 获取来源大类\n    async fetchSources() {\n      try {\n        const sourcesResponse = await request.get('http://localhost:8080/disaster/sources');\n        console.log(\"Source:\", sourcesResponse.data);\n        console.log(\"SourceName\", this.SourcesName);\n        return sourcesResponse.data; // 从后端获取数据\n        console.log(\"Source:\", sourcesResponse.data);\n      } catch (error) {\n        console.error('Error fetching sources:', error);\n      }\n    },\n    // 获取来源子类\n    async fetchSubSources(sourceCode) {\n      try {\n        const subSourcesResponse = await request.get('http://localhost:8080/disaster/subSources', {\n          params: {\n            sourceCode\n          } // 确保传递了正确的 sourceCode\n        });\n        return subSourcesResponse.data; // 从后端获取数据\n      } catch (error) {\n        console.error('Error fetching sub-sources:', error);\n      }\n    },\n    // 获取灾情类型大类\n    async fetchDisasterTypes() {\n      try {\n        const disasterTypesResponse = await request.get('http://localhost:8080/disaster/types');\n        this.disasterTypes = disasterTypesResponse.data; // 更新 disasterTypes\n        return disasterTypesResponse.data; // 从后端获取数据\n      } catch (error) {\n        console.error('Error fetching disaster types:', error);\n      }\n    },\n    // 获取子灾情类型大类\n    async fetchSubDisasterTypes(disasterCode) {\n      try {\n        const subDisasterTypesResponse = await request.get('http://localhost:8080/disaster/subTypes', {\n          params: {\n            disasterCode\n          } // 传递 disasterCode 作为查询参数\n        });\n        return subDisasterTypesResponse.data; // 从后端获取数据\n      } catch (error) {\n        console.error('Error fetching sub-disaster types:', error);\n      }\n    },\n    // 级联选择变化时的处理\n    handleCascadeChange(node) {\n      // 此处获取的是最后一级选中的数据\n      // this.form.location = node[node.length - 1];\n      console.log('选中的地理位置:', this.form.location);\n      const selectedData = node[node.length - 1];\n      console.log(selectedData);\n    },\n    handleSourceChange(node) {\n      // 此处获取的是最后一级选中的数据\n      // this.form.source = node[node.length - 1];\n      const selectedData = node[node.length - 1];\n      console.log(selectedData);\n    },\n    handleDisasterTypeChange(node) {\n      console.log('选中的节点数组:', node);\n      console.log('灾情类型数据:', this.disasterTypes);\n      if (node && node.length > 0) {\n        // 假设你只需要第一个选中的节点的 label\n        const selectedDisasterTypeCode = node[0]; // 获取第一个选中的值\n\n        console.log('灾情类型编码:', selectedDisasterTypeCode);\n        // 根据 selectedDisasterTypeCode 获取对应的 label\n        let selectedLabel = '';\n        this.getLabelFromDisasterTypes(selectedDisasterTypeCode, label => {\n          selectedLabel = label;\n          console.log('灾情类型的 label:', selectedLabel);\n        });\n        if (this.isSelectingDisasterType) {\n          // 如果需要继续其他操作\n          if (selectedDisasterTypeCode !== this.selectedDisasterTypeCode) {\n            this.selectedDisasterTypeCode = selectedDisasterTypeCode;\n            this.fetchIndicators(selectedDisasterTypeCode);\n          }\n        } else {\n          console.log('当前是选择灾情子类型，不请求灾情指标');\n        }\n      } else {\n        console.warn('没有选择灾情类型');\n      }\n    },\n    // 根据编码查找对应的label\n    getLabelFromDisasterTypes(code, callback) {\n      // 假设 disasterTypes 是你所有灾情类型数据的集合，且每个项有 'code' 和 'name'\n      const foundItem = this.disasterTypes.find(item => item.code === code);\n      if (foundItem) {\n        callback(foundItem.name); // 调用回调函数返回 label\n      } else {\n        console.warn('找不到对应的灾情类型');\n      }\n    },\n    handleDisasterSubTypeChange(node) {\n      // 打印选中的节点数组\n      console.log('选中的子节点数组:', node);\n      if (node && node.length > 0) {\n        const selectedDisasterSubTypeCode = node[0]; // 获取选中的灾情子类型编码\n\n        console.log('灾情子类型编码:', selectedDisasterSubTypeCode);\n\n        // 只在选择灾情子类型时，更新灾情子类型编码\n        if (selectedDisasterSubTypeCode !== this.selectedDisasterSubTypeCode) {\n          this.selectedDisasterSubTypeCode = selectedDisasterSubTypeCode;\n          // 不请求灾情指标，只更新子类型编码\n          console.log('灾情子类型已更新:', selectedDisasterSubTypeCode);\n        }\n      } else {\n        console.warn('没有选择灾情子类型');\n      }\n    },\n    // 这个方法请求灾情指标，只有在选择灾情类型时触发\n    async fetchIndicators(disasterTypeCode) {\n      try {\n        console.log('请求灾情指标时传递的灾情类型编码:', disasterTypeCode);\n        const response = await request.get('http://localhost:8080/disaster/indicators', {\n          params: {\n            sourceCode: disasterTypeCode\n          }\n        });\n        if (response.data) {\n          // 获取到数据后，存储到 indicators 中\n          this.indicators = response.data;\n          console.log('已获取灾情指标:', this.indicators);\n        } else {\n          console.warn('没有获取到灾情指标数据');\n          this.indicators = []; // 如果没有数据，设置为空数组\n        }\n      } catch (error) {\n        console.error('获取灾情指标时出错:', error);\n        this.indicators = []; // 如果出现错误，设置为空数组\n      }\n    },\n    // 获取后端的地理位置、灾情来源等数据\n    async initData() {\n      try {\n        const carriersResponse = await request.get('http://localhost:8080/disaster/carriers');\n        //const indicatorsResponse = await request.get('http://localhost:8080/disaster/indicators');\n\n        // 设置其他下拉选项数据\n        this.carriers = carriersResponse.data;\n        //this.indicators = indicatorsResponse.data;\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n    // 生成灾情码并生成符合格式的数据\n    generateDisasterCode() {\n      const location = this.form.location.join('/'); // 获取省市区县的组合\n      const time = this.form.time.toISOString().split('.')[0];\n      const source = this.form.source;\n      const carrier = this.form.carrier;\n      const disasterType = this.form.disasterType;\n      const indicator = this.form.indicator;\n      const description = this.form.description;\n      console.log(\"地理位置\", Location);\n\n      // 生成字典\n      const dict = this.valueLabelMap.reduce((acc, item) => {\n        acc[item.code] = item.name;\n        return acc;\n      }, {});\n      const catadict = this.catagoryValueLabelMap.reduce((acc, item) => {\n        acc[item.code] = item.name;\n        return acc;\n      }, {});\n      const catadict2 = this.catagoryValueLabelMap.reduce((acc, item) => {\n        const key = `${item.code}_${item.disasterCode}`; // 合并 code 和 name\n        acc[key] = item; // 将 item 本身作为值\n        return acc;\n      }, {});\n      const sourcedict = this.sourceValueLabelMap.reduce((acc, item) => {\n        acc[item.code] = item.name;\n        return acc;\n      }, {});\n      console.log(\"灾情分类\", catadict2[`${disasterType[1]}_${disasterType[0]}`]['name']);\n      console.log(\"灾情来源\", `${source[1]}_${source[0]}`);\n      const disasterData = {\n        province: dict[location.split('/')[0]],\n        // 北京\n        city: dict[location.split('/')[1]],\n        // 北京市\n        country: dict[location.split('/')[2]],\n        // 门头沟区\n        town: dict[location.split('/')[3]],\n        // 永定路街道\n        village: dict[location.split('/')[4]],\n        // 采石路7号社区居委会\n        category: null,\n        // 房屋破坏\n        date: time,\n        // 2024-12-24T14:00:00\n        location: location.split('/')[1],\n        // 北京市\n        detail: description,\n        // 发生山洪\n        reportingUnit: null,\n        // 门头沟地质局\n        sourceCategory: sourcedict[source[0]],\n        // 业务报送数据\n        sourceSubCategory: sourcedict[source[1]],\n        // 灾情快速上报接收处理系统\n        carrierForm: carrier,\n        // 图像\n        link: null,\n        // 传输数据链接\n        disasterMajorCategory: catadict[disasterType[0]],\n        // 房屋破坏\n        disasterSubCategory: catadict2[`${disasterType[1]}_${disasterType[0]}`]['name'],\n        // 固定示例，若有其他信息可以动态填充\n        disasterIndicator: indicator // 一般损坏面积\n      };\n      console.log(\"disasterData\", disasterData);\n      this.sendDisasterData(disasterData); // 调用发送接口方法\n    },\n    // 发送数据到后端接口\n    async sendDisasterData(data) {\n      try {\n        // 发送 POST 请求到后端接口\n        const response = await request.post('http://localhost:8080/add', data);\n        console.log('数据发送成功:', response);\n        console.log(\"发送的灾情信息：\", data);\n        console.log(\"返回的数据：\", response.data);\n        // 检查 response.data 是否有效并且是成功的响应\n        if (response && response.data) {\n          const {\n            code,\n            msg,\n            data: disasterInfo\n          } = response.data;\n          console.log(\"返回的code：\", response.code);\n          // 如果返回的 code 是 \"0\"，则表示成功\n          if (code === \"0\") {\n            // 直接从 disasterInfo 提取灾情码\n            // 灾情码为 disasterInfo 字符串中 \"编码后的灾情码: \" 后面的部分\n            this.disasterCode = disasterInfo.split('编码后的灾情码: ')[1] || '无灾情码返回';\n            console.log('生成的灾情码:', this.disasterCode);\n          } else {\n            // 如果 code 不是 \"0\"，显示错误信息\n            console.error('错误:', msg || '未知错误');\n          }\n        } else {\n          console.error('响应数据无效');\n        }\n      } catch (error) {\n        // 捕获并打印错误信息\n        console.error('数据发送失败:', error);\n      }\n    },\n    // 上传灾情信息\n    async submitDisasterInfo() {\n      const disasterInfo = {\n        location: this.form.location.join('/'),\n        time: this.form.time,\n        source: this.form.source,\n        carrier: this.form.carrier,\n        disasterType: this.form.disasterType,\n        indicator: this.form.indicator,\n        description: this.form.description\n      };\n      try {\n        const response = await request.post('http://localhost:8080/add', disasterInfo);\n        console.log('Disaster information uploaded successfully:', response);\n      } catch (error) {\n        console.error('Error uploading disaster information:', error);\n      }\n    },\n    async fetchAllDisasterInfo() {\n      try {\n        const requestData = {\n          disasterCode: this.disasterCodeInput\n        };\n\n        // 发送 POST 请求\n        const response = await request.post('http://localhost:8080/decode', requestData, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        console.log(\"Response from backend:\", response);\n        console.log(\"Response data:\", response.data);\n        console.log(\"Response data type:\", response.data.code);\n        if (response && response.data) {\n          // 后端返回的 `data` 是 JSON 对象，直接解析\n          const disasterInfo = response.data;\n\n          // 将解析后的字段赋值到 `decodedData`\n          this.decodedData = {\n            location: disasterInfo.location || \"\",\n            time: disasterInfo.date || \"\",\n            source: `${disasterInfo.sourceCategory || \"\"} - ${disasterInfo.sourceSubCategory || \"\"}`,\n            carrier: disasterInfo.carrierForm || \"\",\n            disasterType: `${disasterInfo.disasterMajorCategory || \"\"} - ${disasterInfo.disasterSubCategory || \"\"}`,\n            indicator: disasterInfo.disasterIndicator || \"\",\n            description: disasterInfo.detail || \"\"\n          };\n          console.log(\"Decoded disaster information:\", this.decodedData);\n        } else {\n          console.error(\"No response data received from backend.\");\n          this.$notify.error(\"未从后端接收到数据，请检查服务器！\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching all disaster information:\", error);\n        this.$notify.error(\"请求失败，请检查网络或后端服务！\");\n      }\n    },\n    // 自定义上传请求逻辑\n    async customUploadRequest({\n      file\n    }) {\n      // 获取灾情码\n      const disasterCode = this.disasterCodeInput;\n      if (!disasterCode) {\n        this.$notify.error(\"请先输入灾情码！\");\n        return;\n      }\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      formData.append(\"disasterCode\", disasterCode);\n      try {\n        // 调用后端上传接口\n        const response = await request.post(\"http://localhost:8080/files/upload\", formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        });\n        if (response.data.code === \"0\") {\n          // 保存文件路径\n          this.filePath = response.data.data.link || \"\";\n          this.$notify.success(\"文件上传成功！\");\n          // 调用文件解码接口\n          this.decodeFile();\n        } else {\n          this.$notify.error(response.data.msg || \"文件上传失败！\");\n        }\n      } catch (error) {\n        console.error(\"File upload failed:\", error);\n        this.$notify.error(\"文件上传失败，请检查后端服务！\");\n      }\n    },\n    // 文件解码方法\n    async decodeFile() {\n      try {\n        const decodeResponse = await request.post(\"http://localhost:8080/decodeFromFile\", {\n          disasterCode: this.disasterCodeInput,\n          fileLink: this.filePath\n        });\n        if (decodeResponse.data.code === \"0\") {\n          this.$notify.success(\"解码并存储灾情信息成功！\");\n        } else {\n          this.$notify.error(decodeResponse.data.msg || \"解码失败！\");\n        }\n      } catch (error) {\n        console.error(\"Error decoding and storing disaster info:\", error);\n        this.$notify.error(\"解码失败，请检查后端服务！\");\n      }\n    },\n    // 在上传文件前动态设置参数\n    beforeFileUpload(file) {\n      const fileName = file.name;\n      const fileParts = fileName.split(\".\"); // 拆分文件名\n      const disasterCode = fileParts[0]; // 假定文件名格式为: 灾情编码.文件格式\n\n      if (!disasterCode) {\n        this.$notify.error('文件名格式错误，请确保文件名为 \"灾情编码.文件格式\"');\n        return false; // 取消上传\n      }\n\n      // 保存灾情编码到变量\n      this.disasterCodeInput = disasterCode;\n      return true; // 允许上传\n    }\n  },\n  mounted() {\n    this.initData();\n  }\n};","map":{"version":3,"names":["request","data","form","location","time","source","carrier","disasterType","indicator","description","locationOptions","uploadParams","filePath","disasterCode","disasterCodeInput","decodedData","province","city","country","town","village","disasterMajorCategory","disasterSubCategory","disasterIndicator","date","reportingUnit","sourceCategory","sourceSubCategory","carrierForm","link","sourceValueLabelMap","code","name","sourceCode","catagoryValueLabelMap","valueLabelMap","SourcesName","subSourcesName","carriers","disasterTypes","indicators","selectedDisasterTypeCode","selectedDisasterSubTypeCode","isSelectingDisasterType","cascaderProps","value","label","children","lazy","lazyLoad","lazyLoadData","sourceProps","lazyLoadSourceData","disasterTypeProps","lazyLoadDisasterTypeData","watch","form.location","newValue","oldValue","console","log","methods","node","resolve","level","fetchData","fetchProvinces","fetchCities","fetchCounties","fetchTowns","fetchVillages","then","catch","error","fetchSources","fetchSubSources","fetchDisasterTypes","fetchSubDisasterTypes","response","get","provinces","Array","isArray","forEach","push","provinceCode","cities","cityCode","counties","county","areaCode","towns","streetCode","villages","sourcesResponse","subSourcesResponse","params","disasterTypesResponse","subDisasterTypesResponse","handleCascadeChange","selectedData","length","handleSourceChange","handleDisasterTypeChange","selectedLabel","getLabelFromDisasterTypes","fetchIndicators","warn","callback","foundItem","find","item","handleDisasterSubTypeChange","disasterTypeCode","initData","carriersResponse","generateDisasterCode","join","toISOString","split","Location","dict","reduce","acc","catadict","catadict2","key","sourcedict","disasterData","category","detail","sendDisasterData","post","msg","disasterInfo","submitDisasterInfo","fetchAllDisasterInfo","requestData","headers","$notify","customUploadRequest","file","formData","FormData","append","success","decodeFile","decodeResponse","fileLink","beforeFileUpload","fileName","fileParts","mounted"],"sources":["src/views/manager/Upload.vue"],"sourcesContent":["<template>\n  <div class=\"main-body-content\">\n    <div class=\"main-body-header\">灾情信息上传</div>\n\n    <!-- 编码部分 -->\n    <el-card class=\"form-card\" :body-style=\"{ padding: '20px' }\">\n      <div class=\"form-title\">灾情信息编码</div>\n      <el-form :model=\"form\" label-position=\"right\" label-width=\"120px\">\n        <el-row>\n          <!-- 地理位置 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情地理位置\">\n              <el-cascader size=\"small\" v-model=\"form.location\" :props=\"cascaderProps\" placeholder=\"请选择完整的地理位置\"\n                @change=\"handleCascadeChange\" change-on-select></el-cascader>\n            </el-form-item>\n          </el-col>\n\n\n          <!-- 时间 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情时间\">\n              <el-date-picker v-model=\"form.time\" type=\"datetime\" placeholder=\"请选择灾情时间\" size=\"small\"></el-date-picker>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <el-row>\n          <!-- 来源 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情来源\">\n              <el-cascader size=\"small\" v-model=\"form.source\" :props=\"sourceProps\" placeholder=\"请选择灾情来源\"\n                @change=\"handleSourceChange\" change-on-select></el-cascader>\n            </el-form-item>\n          </el-col>\n\n          <!-- 载体类型 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情载体类型\">\n              <el-select size=\"small\" v-model=\"form.carrier\" placeholder=\"请选择灾情载体类型\">\n                <el-option v-for=\"(carrier, index) in carriers\" :key=\"index\" :label=\"carrier\"\n                  :value=\"carrier\"></el-option>\n              </el-select>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <el-row>\n          <!-- 灾情分类 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情分类\">\n\n              <el-cascader size=\"small\" v-model=\"form.disasterType\" :props=\"disasterTypeProps\" placeholder=\"请选择灾情分类\"\n                @change=\"handleDisasterTypeChange\" change-on-select></el-cascader>\n            </el-form-item>\n          </el-col>\n\n          <!-- 灾情指标分类 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情指标分类\">\n              <el-select size=\"small\" v-model=\"form.indicator\" placeholder=\"请选择灾情指标分类\">\n                <el-option v-for=\"(indicator, index) in indicators\" :key=\"index\" :label=\"indicator\"\n                  :value=\"indicator\"></el-option>\n              </el-select>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <!-- 富文本框，放在编码部分 -->\n        <el-form-item label=\"灾情描述\" style=\"margin-top: 10px;\">\n          <el-input type=\"textarea\" size=\"small\" v-model=\"form.description\" placeholder=\"请输入灾情描述\" rows=\"4\"\n            style=\"resize: none; width: 100%;\"></el-input>\n        </el-form-item>\n\n        <!-- 生成灾情码按钮 -->\n        <el-form-item>\n          <el-button size=\"small\" type=\"primary\" @click=\"generateDisasterCode\">生成灾情码</el-button>\n        </el-form-item>\n      </el-form>\n\n      <div class=\"disaster-code-display\">\n        <el-input size=\"small\" v-model=\"disasterCode\" placeholder=\"生成的灾情码\" readonly>\n        </el-input>\n      </div>\n\n    </el-card>\n\n    <!-- 解码部分 -->\n    <el-card class=\"form-card\" :body-style=\"{ padding: '20px' }\">\n      <div class=\"form-title\">灾情信息解码</div>\n      <el-form :model=\"form\" label-position=\"right\" label-width=\"120px\">\n        <el-form-item label=\"灾情码\">\n          <el-input size=\"small\" v-model=\"disasterCodeInput\" placeholder=\"请输入灾情码\"></el-input>\n        </el-form-item>\n\n\n\n        <el-form-item label=\"上传文件\">\n          <el-upload :http-request=\"customUploadRequest\" :before-upload=\"beforeFileUpload\" list-type=\"text\"\n            style=\"width: 100%;\">\n            <el-button size=\"small\" type=\"success\">点击上传文件</el-button>\n          </el-upload>\n        </el-form-item>\n\n\n        <el-form-item style=\"margin-top: 15px;\">\n          <el-button size=\"small\" type=\"primary\" @click=\"fetchAllDisasterInfo\">解码灾情码</el-button>\n        </el-form-item>\n\n\n        <el-row>\n          <!-- 解码后的地理位置 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情地理位置\">\n              <el-input size=\"small\" :value=\"decodedData.location\" readonly></el-input>\n            </el-form-item>\n          </el-col>\n\n          <!-- 解码后的时间 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情时间\">\n              <el-input size=\"small\" :value=\"decodedData.time\" readonly></el-input>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <el-row>\n          <!-- 解码后的来源 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情来源\">\n              <el-input size=\"small\" :value=\"decodedData.source\" readonly></el-input>\n            </el-form-item>\n          </el-col>\n\n          <!-- 解码后的载体类型 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情载体类型\">\n              <el-input size=\"small\" :value=\"decodedData.carrier\" readonly></el-input>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <el-row>\n          <!-- 解码后的灾情分类 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情分类\">\n              <el-input size=\"small\" :value=\"decodedData.disasterType\" readonly></el-input>\n            </el-form-item>\n          </el-col>\n\n          <!-- 解码后的灾情指标分类 -->\n          <el-col :span=\"12\">\n            <el-form-item label=\"灾情指标分类\">\n              <el-input size=\"small\" :value=\"decodedData.indicator\" readonly></el-input>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n        <!-- 解码后的描述 -->\n        <el-form-item label=\"灾情描述\">\n          <el-input type=\"textarea\" size=\"small\" :value=\"decodedData.description\" readonly></el-input>\n        </el-form-item>\n      </el-form>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport request from \"@/utils/request\";  // 使用封装的 axios 实例\n\nexport default {\n  data() {\n    return {\n      form: {\n        location: [],\n        time: '',\n        source: [],\n        carrier: '',\n        disasterType: [],\n        indicator: '',\n        description: ''\n      },\n      locationOptions: [],  // 存储级联下拉框数据\n      uploadParams: {}, // 动态传递给后端的参数\n      filePath: '', // 上传后的文件路径\n      disasterCode: '',\n      disasterCodeInput: '',  // 用户输入的灾情码\n      decodedData: {\n        location: '',  // 地点\n        time: '',  // 时间\n        source: '',  // 来源\n        carrier: '',  // 承载形式\n        disasterType: '',  // 灾情类型\n        indicator: '',  // 灾情指标\n        description: '',  // 描述\n        province: '',  // 省\n        city: '',  // 市\n        country: '',  // 区县\n        town: '',  // 镇\n        village: '',  // 村\n        disasterMajorCategory: '',  // 灾情主类别\n        disasterSubCategory: '',  // 灾情子类别\n        disasterIndicator: '',  // 灾情指标\n        date: '',  // 日期\n        reportingUnit: '',  // 上报单位\n        sourceCategory: '',  // 来源分类\n        sourceSubCategory: '',  // 来源子分类\n        carrierForm: '',  // 承载形式\n        link: ''  // 数据链接\n      },\n      sourceValueLabelMap: [\n        { code: \"1\", name: \"业务报送数据\" },\n        { code: \"2\", name: \"泛在感知数据\" },\n        { code: \"3\", name: \"其他数据\" },\n        { code: \"00\", name: \"前方地震应急指挥部\", sourceCode: \"1\" },\n        { code: \"01\", name: \"后方地震应急指挥部\", sourceCode: \"1\" },\n        { code: \"20\", name: \"应急指挥技术系统\", sourceCode: \"1\" },\n        { code: \"21\", name: \"社会服务工程应急救援系统\", sourceCode: \"1\" },\n        { code: \"40\", name: \"危险区预评估工作组\", sourceCode: \"1\" },\n        { code: \"41\", name: \"地震应急指挥技术协调组\", sourceCode: \"1\" },\n        { code: \"42\", name: \"震后政府信息支持工作项目组\", sourceCode: \"1\" },\n        { code: \"80\", name: \"灾情快速上报接收处理系统\", sourceCode: \"1\" },\n        { code: \"81\", name: \"地方地震局应急信息服务相关技术系统\", sourceCode: \"1\" },\n        { code: \"99\", name: \"其他\", sourceCode: \"1\" },\n        { code: \"00\", name: \"互联网感知\", sourceCode: \"2\" },\n        { code: \"01\", name: \"通信网感知\", sourceCode: \"2\" },\n        { code: \"02\", name: \"舆情网感知\", sourceCode: \"2\" },\n        { code: \"03\", name: \"电力系统感知\", sourceCode: \"2\" },\n        { code: \"04\", name: \"交通系统感知\", sourceCode: \"2\" },\n        { code: \"05\", name: \"其他\", sourceCode: \"2\" },\n        { code: \"03\", name: \"  \", sourceCode: \"3\" }\n\n      ],\n      catagoryValueLabelMap: [\n        { code: \"1\", name: \"震情\" },\n        { code: \"2\", name: \"人员伤亡及失踪\" },\n        { code: \"3\", name: \"房屋破坏\" },\n        { code: \"4\", name: \"生命线工程灾情\" },\n        { code: \"5\", name: \"次生灾害\" },\n        { code: \"01\", name: \"震情信息\", disasterCode: \"1\" },\n        { code: \"01\", name: \"死亡\", disasterCode: \"2\" },\n        { code: \"02\", name: \"受伤\", disasterCode: \"2\" },\n        { code: \"03\", name: \"失踪\", disasterCode: \"2\" },\n        { code: \"01\", name: \"土木\", disasterCode: \"3\" },\n        { code: \"02\", name: \"砖木\", disasterCode: \"3\" },\n        { code: \"03\", name: \"砖混\", disasterCode: \"3\" },\n        { code: \"04\", name: \"框架\", disasterCode: \"3\" },\n        { code: \"05\", name: \"其他\", disasterCode: \"3\" },\n        { code: \"01\", name: \"交通\", disasterCode: \"4\" },\n        { code: \"02\", name: \"供水\", disasterCode: \"4\" },\n        { code: \"03\", name: \"输油\", disasterCode: \"4\" },\n        { code: \"04\", name: \"燃气\", disasterCode: \"4\" },\n        { code: \"05\", name: \"电力\", disasterCode: \"4\" },\n        { code: \"06\", name: \"通信\", disasterCode: \"4\" },\n        { code: \"07\", name: \"水利\", disasterCode: \"4\" },\n        { code: \"01\", name: \"崩塌\", disasterCode: \"5\" },\n        { code: \"02\", name: \"滑坡\", disasterCode: \"5\" },\n        { code: \"03\", name: \"泥石流\", disasterCode: \"5\" },\n        { code: \"04\", name: \"岩溶塌陷\", disasterCode: \"5\" },\n        { code: \"05\", name: \"地裂缝\", disasterCode: \"5\" },\n        { code: \"06\", name: \"地面沉降\", disasterCode: \"5\" },\n        { code: \"07\", name: \"其他\", disasterCode: \"5\" }\n      ],\n      valueLabelMap: [\n\n      ],\n\n      SourcesName: '',\n      subSourcesName: '',\n      carriers: [],\n      disasterTypes: [],\n      indicators: [],\n      selectedDisasterTypeCode: '',  // 用于记录当前选中的灾情类型编码\n      selectedDisasterSubTypeCode: '',  // 用于记录当前选中的灾情子类型编码\n      isSelectingDisasterType: true,  // 用于标记是否在选择灾情类型\n\n      cascaderProps: {\n        //value: 'code', // 显示的数据绑定字段\n        value: 'code', // 显示的数据绑定字段\n        label: 'name', // 显示的名称字段\n        children: 'children', // 子级数据字段\n        lazy: true, // 启用懒加载\n        lazyLoad: this.lazyLoadData // 动态加载函数\n      },\n      sourceProps: {\n        value: 'code', // 显示的数据绑定字段\n        label: 'name', // 显示的名称字段\n        children: 'children', // 子级数据字段\n        lazy: true, // 启用懒加载\n        lazyLoad: this.lazyLoadSourceData // 动态加载函数\n      },\n      disasterTypeProps: {\n        value: 'code', // 显示的数据绑定字段\n        label: 'name', // 显示的名称字段\n        children: 'children', // 子级数据字段\n        lazy: true, // 启用懒加载\n        lazyLoad: this.lazyLoadDisasterTypeData // 动态加载函数\n      }\n    }\n  },\n  watch: {\n    'form.location': function (newValue, oldValue) {\n      console.log('form.location 变化了：', newValue);\n      console.log('变化前的值：', oldValue);\n    }\n  },\n  methods: {\n    // 懒加载函数，根据级别来加载不同的区域数据\n    lazyLoadData(node, resolve) {\n      const { level, value } = node;  // 获取当前节点的级别和选中的值\n      let fetchData;\n      // 根据级别来判断加载哪个数据（省 -> 市 -> 县区 -> 乡镇 -> 村庄）\n      switch (level) {\n        case 0: // 省级\n          fetchData = this.fetchProvinces();\n          break;\n        case 1: // 市级\n          fetchData = this.fetchCities(value);\n          break;\n        case 2: // 区县级\n          fetchData = this.fetchCounties(value);\n          break;\n        case 3: // 乡镇级\n          fetchData = this.fetchTowns(value);\n          break;\n        case 4: // 村庄级\n          fetchData = this.fetchVillages(value);\n          break;\n        default:\n          resolve([]);\n          return;\n      }\n\n      // 获取数据后，通过 resolve 函数返回节点数据\n      fetchData.then(data => {\n        resolve(data); // 返回数据\n      }).catch(error => {\n        console.error(error);\n        resolve([]); // 如果请求失败，返回空数组\n      });\n    },\n    lazyLoadSourceData(node, resolve) {\n      const { level, value } = node;  // 获取当前节点的级别和选中的值\n      let fetchData;\n      console.log(`Lazy load triggered for level: ${level}, value: ${value}`);\n      // 根据级别来判断加载哪个数据（大类 -> 子类）\n      switch (level) {\n        case 0: // 大类\n          fetchData = this.fetchSources();\n          break;\n        case 1: // 子类\n          fetchData = this.fetchSubSources(value);\n          break;\n        default:\n          resolve([]);\n          return;\n      }\n\n      // 获取数据后，通过 resolve 函数返回节点数据\n      fetchData.then(data => {\n        resolve(data); // 返回数据\n      }).catch(error => {\n        console.error(error);\n        resolve([]); // 如果请求失败，返回空数组\n      });\n    },\n    lazyLoadDisasterTypeData(node, resolve) {\n      const { level, value } = node;  // 获取当前节点的级别和选中的值\n      let fetchData;\n      // 根据级别来判断加载哪个数据（大类 -> 子类）\n      switch (level) {\n        case 0: // 大类\n          fetchData = this.fetchDisasterTypes();\n          break;\n        case 1: // 子类\n          fetchData = this.fetchSubDisasterTypes(value);\n          break;\n        default:\n          resolve([]);\n          return;\n      }\n\n      // 获取数据后，通过 resolve 函数返回节点数据\n      fetchData.then(data => {\n        resolve(data); // 返回数据\n      }).catch(error => {\n        console.error(error);\n        resolve([]); // 如果请求失败，返回空数组\n      });\n    },\n    // 获取省份数据\n    async fetchProvinces() {\n      try {\n        const response = await request.get('http://localhost:8080/api/areas/getProvinces');\n        console.log(response.data);\n        const provinces = response.data;\n        if (provinces && Array.isArray(provinces)) {\n          // 将每个省份的数据添加到 valueLabelMap 数组\n          provinces.forEach(province => {\n            this.valueLabelMap.push({\n              code: province.code,\n              name: province.name\n            });\n          });\n        }\n        console.log(\"Provinces added to valueLabelMap:\", this.valueLabelMap);\n        return response.data;\n      } catch (error) {\n        console.error('Error fetching provinces:', error);\n      }\n    },\n\n    // 获取城市数据\n    async fetchCities(provinceCode) {\n      try {\n        const response = await request.get(`http://localhost:8080/api/areas/getCities?provinceCode=${provinceCode}`);\n        const cities = response.data;\n        if (cities && Array.isArray(cities)) {\n          // 将每个数据添加到 valueLabelMap 数组\n          cities.forEach(city => {\n            this.valueLabelMap.push({\n              code: city.code,\n              name: city.name\n            });\n          });\n        }\n        console.log(\"Cities added to valueLabelMap:\", this.valueLabelMap);\n        return response.data;\n      } catch (error) {\n        console.error('Error fetching cities:', error);\n      }\n    },\n\n    // 获取县区数据\n    async fetchCounties(cityCode) {\n      try {\n        // 调用后端接口获取县区数据\n        const response = await request.get(`http://localhost:8080/api/areas/getCounties?cityCode=${cityCode}`);\n        const counties = response.data;\n        if (counties && Array.isArray(counties)) {\n          // 将每个省份的数据添加到 valueLabelMap 数组\n          counties.forEach(county => {\n            this.valueLabelMap.push({\n              code: county.code,\n              name: county.name\n            });\n          });\n        }\n        console.log(\"Counties added to valueLabelMap:\", this.valueLabelMap);\n        return response.data;  // 返回后端的数据，格式与后端一致\n      } catch (error) {\n        console.error('Error fetching counties:', error);\n      }\n    },\n\n    // 获取乡镇数据\n    async fetchTowns(areaCode) {\n      try {\n        // 调用后端接口获取乡镇数据\n        const response = await request.get(`http://localhost:8080/api/areas/getTowns?areaCode=${areaCode}`);\n        const towns = response.data;\n        if (towns && Array.isArray(towns)) {\n          // 将每个省份的数据添加到 valueLabelMap 数组\n          towns.forEach(town => {\n            this.valueLabelMap.push({\n              code: town.code,\n              name: town.name\n            });\n          });\n        }\n        console.log(\"Towns added to valueLabelMap:\", this.valueLabelMap);\n        return response.data;  // 返回后端的数据，格式与后端一致\n      } catch (error) {\n        console.error('Error fetching towns:', error);\n      }\n    },\n\n\n    // 获取村庄数据\n    async fetchVillages(streetCode) {\n      try { // 调用后端接口获取乡镇数据\n        console.log(\"streetcode\", streetCode);\n        const response = await request.get(`http://localhost:8080/api/areas/getVillages?streetCode=${streetCode}`);\n        const villages = response.data;\n        if (villages && Array.isArray(villages)) {\n          // 将每个省份的数据添加到 valueLabelMap 数组\n          villages.forEach(village => {\n            this.valueLabelMap.push({\n              code: village.code,\n              name: village.name\n            });\n          });\n        }\n        console.log(\"Villages added to valueLabelMap:\", this.valueLabelMap);\n        return response.data;  // 返回后端的数据，格式与后端一致\n      } catch (error) {\n        console.error('Error fetching towns:', error);\n      }\n    },\n\n    // 获取来源大类\n    async fetchSources() {\n      try {\n        const sourcesResponse = await request.get('http://localhost:8080/disaster/sources');\n        console.log(\"Source:\", sourcesResponse.data);\n\n        console.log(\"SourceName\", this.SourcesName);\n        return sourcesResponse.data; // 从后端获取数据\n        console.log(\"Source:\", sourcesResponse.data);\n\n      } catch (error) {\n        console.error('Error fetching sources:', error);\n      }\n    },\n\n    // 获取来源子类\n    async fetchSubSources(sourceCode) {\n      try {\n        const subSourcesResponse = await request.get('http://localhost:8080/disaster/subSources', {\n          params: { sourceCode }  // 确保传递了正确的 sourceCode\n        });\n\n\n        return subSourcesResponse.data; // 从后端获取数据\n      } catch (error) {\n        console.error('Error fetching sub-sources:', error);\n      }\n    },\n\n    // 获取灾情类型大类\n    async fetchDisasterTypes() {\n      try {\n        const disasterTypesResponse = await request.get('http://localhost:8080/disaster/types');\n        this.disasterTypes = disasterTypesResponse.data;  // 更新 disasterTypes\n        return disasterTypesResponse.data; // 从后端获取数据\n      } catch (error) {\n        console.error('Error fetching disaster types:', error);\n      }\n    },\n\n    // 获取子灾情类型大类\n    async fetchSubDisasterTypes(disasterCode) {\n      try {\n        const subDisasterTypesResponse = await request.get('http://localhost:8080/disaster/subTypes', {\n          params: { disasterCode }  // 传递 disasterCode 作为查询参数\n        });\n        return subDisasterTypesResponse.data; // 从后端获取数据\n      } catch (error) {\n        console.error('Error fetching sub-disaster types:', error);\n      }\n    },\n\n    // 级联选择变化时的处理\n    handleCascadeChange(node) {\n      // 此处获取的是最后一级选中的数据\n      // this.form.location = node[node.length - 1];\n      console.log('选中的地理位置:', this.form.location);\n      const selectedData = node[node.length - 1];\n      console.log(selectedData);\n    },\n    handleSourceChange(node) {\n      // 此处获取的是最后一级选中的数据\n      // this.form.source = node[node.length - 1];\n      const selectedData = node[node.length - 1];\n      console.log(selectedData);\n    },\n    handleDisasterTypeChange(node) {\n      console.log('选中的节点数组:', node);\n      console.log('灾情类型数据:', this.disasterTypes);\n      if (node && node.length > 0) {\n        // 假设你只需要第一个选中的节点的 label\n        const selectedDisasterTypeCode = node[0];  // 获取第一个选中的值\n\n        console.log('灾情类型编码:', selectedDisasterTypeCode);\n        // 根据 selectedDisasterTypeCode 获取对应的 label\n        let selectedLabel = '';\n        this.getLabelFromDisasterTypes(selectedDisasterTypeCode, (label) => {\n          selectedLabel = label;\n          console.log('灾情类型的 label:', selectedLabel);\n        });\n\n        if (this.isSelectingDisasterType) {\n          // 如果需要继续其他操作\n          if (selectedDisasterTypeCode !== this.selectedDisasterTypeCode) {\n            this.selectedDisasterTypeCode = selectedDisasterTypeCode;\n            this.fetchIndicators(selectedDisasterTypeCode);\n          }\n        } else {\n          console.log('当前是选择灾情子类型，不请求灾情指标');\n        }\n      } else {\n        console.warn('没有选择灾情类型');\n      }\n    },\n\n    // 根据编码查找对应的label\n    getLabelFromDisasterTypes(code, callback) {\n      // 假设 disasterTypes 是你所有灾情类型数据的集合，且每个项有 'code' 和 'name'\n      const foundItem = this.disasterTypes.find(item => item.code === code);\n      if (foundItem) {\n        callback(foundItem.name);  // 调用回调函数返回 label\n      } else {\n        console.warn('找不到对应的灾情类型');\n      }\n    },\n\n    handleDisasterSubTypeChange(node) {\n      // 打印选中的节点数组\n      console.log('选中的子节点数组:', node);\n\n      if (node && node.length > 0) {\n        const selectedDisasterSubTypeCode = node[0];  // 获取选中的灾情子类型编码\n\n        console.log('灾情子类型编码:', selectedDisasterSubTypeCode);\n\n        // 只在选择灾情子类型时，更新灾情子类型编码\n        if (selectedDisasterSubTypeCode !== this.selectedDisasterSubTypeCode) {\n          this.selectedDisasterSubTypeCode = selectedDisasterSubTypeCode;\n          // 不请求灾情指标，只更新子类型编码\n          console.log('灾情子类型已更新:', selectedDisasterSubTypeCode);\n        }\n      } else {\n        console.warn('没有选择灾情子类型');\n      }\n    },\n\n    // 这个方法请求灾情指标，只有在选择灾情类型时触发\n    async fetchIndicators(disasterTypeCode) {\n      try {\n        console.log('请求灾情指标时传递的灾情类型编码:', disasterTypeCode);\n        const response = await request.get('http://localhost:8080/disaster/indicators', {\n          params: { sourceCode: disasterTypeCode }\n        });\n\n        if (response.data) {\n          // 获取到数据后，存储到 indicators 中\n          this.indicators = response.data;\n          console.log('已获取灾情指标:', this.indicators);\n        } else {\n          console.warn('没有获取到灾情指标数据');\n          this.indicators = [];  // 如果没有数据，设置为空数组\n        }\n      } catch (error) {\n        console.error('获取灾情指标时出错:', error);\n        this.indicators = [];  // 如果出现错误，设置为空数组\n      }\n    },\n\n    // 获取后端的地理位置、灾情来源等数据\n    async initData() {\n      try {\n        const carriersResponse = await request.get('http://localhost:8080/disaster/carriers');\n        //const indicatorsResponse = await request.get('http://localhost:8080/disaster/indicators');\n\n        // 设置其他下拉选项数据\n        this.carriers = carriersResponse.data;\n        //this.indicators = indicatorsResponse.data;\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    },\n\n    // 生成灾情码并生成符合格式的数据\n    generateDisasterCode() {\n      const location = this.form.location.join('/');  // 获取省市区县的组合\n      const time = this.form.time.toISOString().split('.')[0];\n      const source = this.form.source;\n      const carrier = this.form.carrier;\n      const disasterType = this.form.disasterType;\n      const indicator = this.form.indicator;\n      const description = this.form.description;\n      console.log(\"地理位置\", Location);\n\n      // 生成字典\n      const dict = this.valueLabelMap.reduce((acc, item) => {\n        acc[item.code] = item.name;\n        return acc;\n      }, {});\n      const catadict = this.catagoryValueLabelMap.reduce((acc, item) => {\n        acc[item.code] = item.name;\n        return acc;\n      }, {});\n      const catadict2 = this.catagoryValueLabelMap.reduce((acc, item) => {\n        const key = `${item.code}_${item.disasterCode}`;  // 合并 code 和 name\n        acc[key] = item;  // 将 item 本身作为值\n        return acc;\n      }, {});\n      const sourcedict = this.sourceValueLabelMap.reduce((acc, item) => {\n        acc[item.code] = item.name;\n        return acc;\n      }, {});\n      console.log(\"灾情分类\", catadict2[`${disasterType[1]}_${disasterType[0]}`]['name']);\n      console.log(\"灾情来源\", `${source[1]}_${source[0]}`);\n\n      const disasterData = {\n        province: dict[location.split('/')[0]],  // 北京\n        city: dict[location.split('/')[1]],     // 北京市\n        country: dict[location.split('/')[2]],  // 门头沟区\n        town: dict[location.split('/')[3]], // 永定路街道\n        village: dict[location.split('/')[4]],   // 采石路7号社区居委会\n        category: null,  // 房屋破坏\n        date: time,  // 2024-12-24T14:00:00\n        location: location.split('/')[1],  // 北京市\n        detail: description,  // 发生山洪\n        reportingUnit: null,  // 门头沟地质局\n        sourceCategory: sourcedict[source[0]],  // 业务报送数据\n        sourceSubCategory: sourcedict[source[1]],  // 灾情快速上报接收处理系统\n        carrierForm: carrier,  // 图像\n        link: null,  // 传输数据链接\n        disasterMajorCategory: catadict[disasterType[0]],  // 房屋破坏\n        disasterSubCategory: catadict2[`${disasterType[1]}_${disasterType[0]}`]['name'],  // 固定示例，若有其他信息可以动态填充\n        disasterIndicator: indicator  // 一般损坏面积\n      };\n      console.log(\"disasterData\", disasterData);\n\n      this.sendDisasterData(disasterData);  // 调用发送接口方法\n    },\n\n    // 发送数据到后端接口\n    async sendDisasterData(data) {\n      try {\n        // 发送 POST 请求到后端接口\n        const response = await request.post('http://localhost:8080/add', data);\n        console.log('数据发送成功:', response);\n        console.log(\"发送的灾情信息：\", data);\n        console.log(\"返回的数据：\", response.data);\n        // 检查 response.data 是否有效并且是成功的响应\n        if (response && response.data) {\n          const { code, msg, data: disasterInfo } = response.data;\n          console.log(\"返回的code：\", response.code);\n          // 如果返回的 code 是 \"0\"，则表示成功\n          if (code === \"0\") {\n            // 直接从 disasterInfo 提取灾情码\n            // 灾情码为 disasterInfo 字符串中 \"编码后的灾情码: \" 后面的部分\n            this.disasterCode = disasterInfo.split('编码后的灾情码: ')[1] || '无灾情码返回';\n            console.log('生成的灾情码:', this.disasterCode);\n          } else {\n            // 如果 code 不是 \"0\"，显示错误信息\n            console.error('错误:', msg || '未知错误');\n          }\n        } else {\n          console.error('响应数据无效');\n        }\n      } catch (error) {\n        // 捕获并打印错误信息\n        console.error('数据发送失败:', error);\n      }\n    },\n\n    // 上传灾情信息\n    async submitDisasterInfo() {\n      const disasterInfo = {\n        location: this.form.location.join('/'),\n        time: this.form.time,\n        source: this.form.source,\n        carrier: this.form.carrier,\n        disasterType: this.form.disasterType,\n        indicator: this.form.indicator,\n        description: this.form.description\n      };\n\n      try {\n        const response = await request.post('http://localhost:8080/add', disasterInfo);\n        console.log('Disaster information uploaded successfully:', response);\n      } catch (error) {\n        console.error('Error uploading disaster information:', error);\n      }\n    },\n    async fetchAllDisasterInfo() {\n      try {\n        const requestData = {\n          disasterCode: this.disasterCodeInput\n        };\n\n        // 发送 POST 请求\n        const response = await request.post('http://localhost:8080/decode', requestData, {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        console.log(\"Response from backend:\", response);\n        console.log(\"Response data:\", response.data);\n        console.log(\"Response data type:\", response.data.code);\n\n        if (response && response.data) {\n\n          // 后端返回的 `data` 是 JSON 对象，直接解析\n          const disasterInfo = response.data;\n\n          // 将解析后的字段赋值到 `decodedData`\n          this.decodedData = {\n            location: disasterInfo.location || \"\",\n            time: disasterInfo.date || \"\",\n            source: `${disasterInfo.sourceCategory || \"\"} - ${disasterInfo.sourceSubCategory || \"\"}`,\n            carrier: disasterInfo.carrierForm || \"\",\n            disasterType: `${disasterInfo.disasterMajorCategory || \"\"} - ${disasterInfo.disasterSubCategory || \"\"}`,\n            indicator: disasterInfo.disasterIndicator || \"\",\n            description: disasterInfo.detail || \"\"\n          };\n\n          console.log(\"Decoded disaster information:\", this.decodedData);\n\n        } else {\n          console.error(\"No response data received from backend.\");\n          this.$notify.error(\"未从后端接收到数据，请检查服务器！\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching all disaster information:\", error);\n        this.$notify.error(\"请求失败，请检查网络或后端服务！\");\n      }\n    },\n\n    // 自定义上传请求逻辑\n    async customUploadRequest({ file }) {\n      // 获取灾情码\n      const disasterCode = this.disasterCodeInput;\n\n      if (!disasterCode) {\n        this.$notify.error(\"请先输入灾情码！\");\n        return;\n      }\n\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      formData.append(\"disasterCode\", disasterCode);\n\n      try {\n        // 调用后端上传接口\n        const response = await request.post(\"http://localhost:8080/files/upload\", formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\",\n          },\n        });\n\n        if (response.data.code === \"0\") {\n          // 保存文件路径\n          this.filePath = response.data.data.link || \"\";\n          this.$notify.success(\"文件上传成功！\");\n          // 调用文件解码接口\n          this.decodeFile();\n        } else {\n          this.$notify.error(response.data.msg || \"文件上传失败！\");\n        }\n      } catch (error) {\n        console.error(\"File upload failed:\", error);\n        this.$notify.error(\"文件上传失败，请检查后端服务！\");\n      }\n    },\n\n    // 文件解码方法\n    async decodeFile() {\n      try {\n        const decodeResponse = await request.post(\"http://localhost:8080/decodeFromFile\", {\n          disasterCode: this.disasterCodeInput,\n          fileLink: this.filePath,\n        });\n\n        if (decodeResponse.data.code === \"0\") {\n          this.$notify.success(\"解码并存储灾情信息成功！\");\n        } else {\n          this.$notify.error(decodeResponse.data.msg || \"解码失败！\");\n        }\n      } catch (error) {\n        console.error(\"Error decoding and storing disaster info:\", error);\n        this.$notify.error(\"解码失败，请检查后端服务！\");\n      }\n    },\n\n    // 在上传文件前动态设置参数\n    beforeFileUpload(file) {\n      const fileName = file.name;\n      const fileParts = fileName.split(\".\"); // 拆分文件名\n      const disasterCode = fileParts[0]; // 假定文件名格式为: 灾情编码.文件格式\n\n      if (!disasterCode) {\n        this.$notify.error('文件名格式错误，请确保文件名为 \"灾情编码.文件格式\"');\n        return false; // 取消上传\n      }\n\n      // 保存灾情编码到变量\n      this.disasterCodeInput = disasterCode;\n\n      return true; // 允许上传\n    },\n\n\n\n  },\n\n  mounted() {\n    this.initData();\n  }\n}\n</script>\n\n\n// 全局样式，可能有问题\n// https://www.cnblogs.com/alioth01/p/18527300\n<style>\n.form-card {\n  margin-top: 20px;\n}\n\n.form-title {\n  font-size: 18px;\n  font-weight: bold;\n  margin-bottom: 20px;\n}\n\n.disaster-code-display {\n  margin-top: 20px;\n}\n\n.el-radio input[aria-hidden=\"true\"] {\n  display: none !important;\n}\n\n.el-radio:focus:not(.is-focus):not(:active):not(.is-disabled) .el-radio__inner {\n  box-shadow: none !important;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}